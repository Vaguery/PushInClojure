{:error nil,

:program [-22325.005188942094 [35 11 49 -28 15 3 17 -18 -42 31] :generator-againlater 4890703.474160535M (:tagspace-merge :complexes-savestack -1649984N [-9.943343028838356 0.06334814146000411 4.6369518089220065 -28.661675443898016 29.944657864351356 -47.26024302419445 34.35296335708338 -27.695808154797174 -11.070476349360113] 17 :x :complex-equal? :tagspace-keys :snapshot-tagstack) \s 3 1.557022513515541 #push.type.definitions.interval.Interval{:min -10.222102953770829, :max 5, :min-open? false, :max-open? false} :chars-rest 8464.220246135592 [0.4571352349961302 30.32177611283936 -10.88343701104916 6.5601468357508566 43.579484950088315 42.02922830142333 -40.72401420640689 29.0436707264666 -31.76979925998491 23.72592830834914] (:ref-stackdepth :chars-notequal? :booleans-contains? :refs-indexof :interval-shift :booleans-set :generator-storestack :complexes-contains? :scalar-save) :strings-save \' [-19 31 21 15 -43 18 -34 -43 -24 -35] -11.226520585837797 :vector-occurrencesof :ref-tagstack :chars-equal? :set-return -12 :interval-flush 18368.18016886957 2321323.069378428M :set-swap :snapshot-flipstack :scalars-save :scalar-dec :code-conj-set :scalars-new 15 :scalars-return :intervals-set #push.type.definitions.interval.Interval{:min -49.40410587176935, :max -13, :min-open? false, :max-open? false} :s :scalar-return-pop #push.type.definitions.complex.Complex{:re -25, :im -1/56} :string-min :push-nocycleARGS :print-empty? -33.681365001982265 :intervals-replacefirst :scalar-min :strings-yankdup :print-stackdepth \\ :complexes-tagstack :snapshot-end :intervals-as-set :set-swap :scalar>? :booleans-contains? #push.type.definitions.complex.Complex{:re 17, :im 9/23} 0 #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.quoted.QuotedCode{:value (:code-save -3472680.70687066M :vector-storestack :string-flush :intervals-save #push.type.definitions.interval.Interval{:min -48, :max 19.547117042309537, :min-open? false, :max-open? false} 0 :scalar-yankdup -2981191.722207355M :set-conj-set -21500.430234862233 #push.type.definitions.interval.Interval{:min -48, :max -18.430265290124726, :min-open? false, :max-open? false} "bV3rEp}`6J" :string-tagstack \3 \2 :intervals-set :ref-later -3199/43265 "<@sk>3i#1W")} :b 629368N \I :char-yank :complexes-length :booleans-conj :intervals-comprehension :boolean-yankdup :interval-in-set? :vector-contains? :booleans-replacefirst :intervals-emptyitem? :chars-generalize :tagspace-notequal? -3.346387905976499 :tagspace-notequal? :booleans-pop [30.027028717937824 -1.0270474796746285 39.10964494372287 -14.43965024116629 -31.511717234819415 -33.70883267053476 -21.899784554043357 20.93534938857188 29.208432223041484 4.807955462107337 18.859109169503554 -26.171343597231033 32.7623598575866 -7.990347825735341 29.3219452927043 -14.735573120368642 -21.971139331806768 -40.65756878978194 -47.127526185160676 -26.073812958770148] \0)} [-32.67164276319661 11.062887671926049 48.40979535963535 -35.24976000603881 -13.383851972783923 10.033250126469639 43.90073466299599 -35.64720349546285 45.8218414728847 17.7447275075924] :scalar-swap #push.type.definitions.complex.Complex{:re 15, :im -5/21} 20579.925658034714 :generator-againlater #push.type.definitions.interval.Interval{:min -39, :max 9.78284522220224, :min-open? false, :max-open? false} :strings-reverse 38620.44950577311 :strings-replace :exec-in-set? [-47.701964041822954 38.08075133197978 39.69001064952232 11.501705368770331 3.4442512879161455 43.94391994050886 -21.342946652525452 -31.88008858055631 -3.199576089484424 7.344770851505125] :scalar->boolean "KBIjse{||6" :push-unquoterefs -7.557197175185301 #push.type.definitions.quoted.QuotedCode{:value (:generator-return-pop :tagspace-storestack :complexes-replace "&A]{O(er:Q" :char-flipstack :set-difference #push.type.definitions.quoted.QuotedCode{:value (4868473.095034292M :strings-portion [0.7795005203193313 27.358816040135068 46.221873221808735 42.409151495972836 5.357871411280925 30.99231848131413 4.9005676864130265 -35.441451392141246 -9.582044543235355 5.227167208558569 28.146768392418892 -17.591544068753798 -6.5188696266251895 -7.796532101452691 -27.952807340089038 22.834591504724074 -7.881068514363463 38.64472915733691 -48.21296037168943 -34.54883125310545] 4 -3157514N 47 [7.880486568652941 -40.185824937185984 -46.7886207697241 -37.64163538299039 7.640823399363896 -24.235053441217026 16.53050874527183 32.198460984252506 -40.686711451391915 -12.585065906010215 -6.953898359299629 -41.24983036157133 -2.6303609322785064 -4.054837777403911 -45.82848985836709 -2.618146623247462 -16.258790413522647 -29.285582576391466 46.27137933232254 30.395537277443267] :set-yank :intervals-as-set :vector-butlast 4 :complex-subtract :string-pop :scalar-empty? 43396/17781 :booleans-rest :refs-intoset :intervals-cutflip #push.type.definitions.quoted.QuotedCode{:value (:vector-portion #push.type.definitions.interval.Interval{:min -25.36562186025051, :max 47, :min-open? false, :max-open? false} :exec-empty? [-45 -17 47 11 -4 32 16 -30 36 -48 30 -30 30 29 -33 -44 32 44 -41 -47] :scalars-save #push.type.definitions.quoted.QuotedCode{:value (-17841.55697085579 [47 -47 11 -39 -29 -8 -28 33 8 -5 33 -48 -27 35 -5 -22 39 -47 -38 -22] "a4i\"Y!6kgG" :complexes-fillvector 30 #push.type.definitions.quoted.QuotedCode{:value (3896042N :code-store [37 -33 -35 -45 -42 -49 -19 6 -9 -42 20 20 -44 -21 -28 -9 35 -26 -41 -43] #push.type.definitions.quoted.QuotedCode{:value (:booleans-indexof :interval-conj-set [-6 -22 -49 -45 12 5 -9 -42 12 -49 36 26 -48 13 38 -36 46 20 40 -32] 39112/25077 :intervals-later -35313 "pVQhwtm-{p" :generator-storestack -29.140740311970823 :exec-store :interval-savestack -3.3335870996692805 :strings-againlater :vector-comprehension :strings-later :refs-cutstack :e 320561.24885710236M #push.type.definitions.complex.Complex{:re -48, :im 1/2} :string≥?)} :complexes-butlast -4 -33034.89525561087 (:strings-conj-set :chars-replacefirst :tagspace-print :interval-equal? :char->set :vector-rerunall #push.type.definitions.interval.Interval{:min -1.9136620761041527, :max 35, :min-open? false, :max-open? false} :scalars-butlast :refs-generalizeall :tagspace-empty? :chars-yankdup \n :intervals-cutflip :string≥? -33442/88451 -14547/16529 (:scalar-later :refs-print #push.type.definitions.interval.Interval{:min -0.6942026697914656, :max 42, :min-open? false, :max-open? false} :interval-min :scalars->code :generator-next :complexes-new :complexes-cutflip #push.type.definitions.quoted.QuotedCode{:value (:refs-generalize 17912 13645.706736049011 :refs-liftstack :vector-cyclevector :scalar-save :vector-yank :scalars-return :interval-dup -0.4512011891877057 17171 :booleans-portion -39814 :complex-liftstack :vector-echoall :code-liftstack 44632 :refs-as-set :refs-return :vector-last)} :chars-echo :snapshot-cutstack \" :tagspace-cutstack -3781034.1698669936M 15444 :scalars->code :scalar-cutflip :string-conj-set) :d :code-do*) 3.330825976696035 4469070N 4032726N 3 -3821063.7169317743M :exec-yank ([5.324728227963391 -28.358907564047975 -19.185488637735283 -37.135142971634224 -25.249940313409603 -0.9903584036189272 40.70603763872937 10.73951578905286 -35.881427265458264 44.707906681441884 33.10711746171499 -47.118969080878124 32.89184751596299 -1.7204503533228461 4.142624160203589 22.739747765465097 42.71449759485169 44.19530400663635 -18.8201611332491] [30.811167200038184 -18.089408655790873 -0.6254524907419636 12.898349426911729 25.626048567273557 -33.08024728522406 -10.98838626821783 0.9434761445015454 -1.9075352724205459 20.5548421394153 -11.090470832842257 -11.084597642718172 18.44611845507781 6.924770370566669 21.54078545058759 -27.441348979732936 31.65538001811902 48.58530689386238 39.612673639664266] :tagspace-empty? :code-cycler :refs-later :strings-shove :generator-flipstack 2335801N ((:ref->code :chars-flush :chars-new -3402838N :boolean-or #push.type.definitions.interval.Interval{:min 0.19395536518293, :max 39, :min-open? false, :max-open? false} :intervals-tag :tagspace-return :char-notequal? -22010/11357 :code-cons :chars-reverse (:boolean-arity3 :refs-shatter 3.730537061728894 127/23514 [-16 39 -30 49 -26 27 -12 30 40 47 -3 38 28 -19 11 -34] [32 -11 -7 -23 -40 -35 44 -41 20 -29 32 39 32 17 47 -11] :snapshot-flush :strings-take :boolean-store 2311502.4151061065M :chars-distinct :strings-rotate [-28.234006476414507 22.085188093571944 -18.531382884454917 19.36278109930481 11.724443438299524 32.00082919432556 43.203652749043115 -33.51904091448801 46.20938612533962 49.59495314840126 1.1315920356619458 4.160701772743657 33.62465163552166 -27.015103796845974 11.69775769276422 -0.3133741190270314] 10285/41453 :refs-last :refs-conj-set) :code-sampler :string-comprehension :code-flipstack :complex-later) :string-againlater :interval-subtract :exec-rerunall [-28 -42 -45 5 -27 23 18 47 22 24 -45 16 41 -46 7 -1 1 -40] [-36.42733518972431 -21.59945671843615 -34.85481730223581 31.124819673811928 12.912005736127483 4.567728716319095 42.9456802158049 -25.018131377711306 39.85048859348281 -37.92037883821415 22.63946223665262 -40.95893799083271 32.06338795512008 -33.5060406530056 12.84146823583334 23.693580733129053 -7.14132259837821 -9.578919891405988] :strings-liftstack :generator-later -1578110N :strings-later #push.type.definitions.quoted.QuotedCode{:value (:refs-flipstack :strings-yank #push.type.definitions.interval.Interval{:min 0, :max 0.9034232195793592, :min-open? false, :max-open? false} -29.555894946935446 -9244/5691 :complex-flush :vector-byexample :set-flush :strings-return :code-extract :complexes-new 1.5564852940766318 -9838/9043 2 :code-atom? :scalar-flipstack 33 -13 -3 :interval-subtract)} -14.427511655280192 -24747/671 :set-yankdup :generator-liftstack :strings-echo #push.type.definitions.quoted.QuotedCode{:value (:complexes-liftstack \- :string-replace -47.20015099084485 :scalar-subtract -3.0241675781910384 :generator-tagstack :string-dup :generator-save :strings-stackdepth :strings-cutflip :vector-return-pop :strings->set \[ :vector-cyclevector :refs-vremove :vector-tag \m 1 :chars-tag)} :chars-echo) :chars-replace :scalars-yank [-49.824505839259395 24.548467108503147 -30.888644002251898 -38.76399890963581 25.53889833378146 16.71247661042358 -34.56750613740708 36.69228941121942 13.675689701920312 -47.15960002336864 12.733679678807754 23.638719615926192 -3.794812388579814 38.228052361326306 -23.37496487258759 -42.29870370228591 -24.758899271810407 27.555542392622314 -25.366899983170697] :k :exec-string-iterate :interval-return -42053/9129 #push.type.definitions.complex.Complex{:re -24, :im 40/77} :intervals-concat :ref-dump) "uB&2s:KI2#" 32 :code-yank [-13.733929847007218 8.622827693454695 4.8165653427255535 -38.613475438413246 -4.742937901951429 -32.41617795132336 30.990746253755077 32.708552097063745 45.27344218533493 -14.408699264125069 43.05578416762815 -14.76730700207166 -4.939143725041731 -5.431891140547677 -11.443959805898551 3.648140819208244 5.396326600942594 40.642869506148145 34.95896812389849 27.654527640091374] :exec-tag)} :scalar-tag :intervals-rotate 6444.278993166539 :scalars-vremove :scalars-nth :chars-cyclevector :strings-as-set :scalars-store :exec-in-set? -1164039.654854199M "i@OOSmW-qC" :vector-vsplit :interval-rerunall :generator-swap)} :tagspace-tidy :refs-generalizeall -44 :exec-flipstack :scalars-store \t [24 42 21 -47 -3 -13 -42 -49 1 14 39 -41 -30 -40 -36 -29 45 -44 -24 29] 4873535.815189466M :boolean-2bittable :vector-do*each :char-liftstack :tagspace-return-pop :strings-flush 17165)} #push.type.definitions.quoted.QuotedCode{:value (9198.680358207166 :ref-lookup :booleans-equal? :vector-againlater :strings-cycler :exec-do*times :vector-yank 1 :set-savestack :g :tagspace-remove :complex-empty? :booleans-storestack :string-storestack -40.6308452250742 \o -2116981N \3 :strings-shove :boolean-pop)})} #push.type.definitions.complex.Complex{:re -47, :im -19/20} 21657 (#push.type.definitions.complex.Complex{:re -35, :im 37/100} :strings-new :complex-yank 4.274877633966591 :ref-exchange "*F6o>aN4ea" :refs-conj 26159/52676 :refs-sampler :ref-forget :booleans-againlater :n "w,<KLl:b%c" "PW2B[<]ZKs" :scalar-againlater :ref-return -11560.271292632497 #push.type.definitions.complex.Complex{:re -28, :im -4/31} :char-in-set?) :string-last :generator-cutstack :set-storestack :ref-print 3 :char-lowercase? 3230133.014341102M :f :booleans->code :chars-sampler)} :code-empty? :strings-occurrencesof :snapshot-rotate -549307.8061031653M :refs-cyclevector "mUmWRa)f5R" :code-position :tagspace-tag :generator-later #push.type.definitions.quoted.QuotedCode{:value (1956133.2170850607M :refs-rest :print-stackdepth :intervals-butlast 5474.884485229493 :scalars-save #push.type.definitions.quoted.QuotedCode{:value (:refs-flipstack :p "1Y!ZGwh6C`" :scalars-conj :intervals-yankdup :complexes-items [25.08097911804606 -30.309615777606822 -40.91460662718358 11.968288416033388 -47.23836846625934 31.782345729778456 5.427729445797638 47.889520482517455 34.556251976051215 32.96411926524226 12.326165407593436 18.6805244955913 16.37251153609175 -2.681322712862233 48.03973926430564 29.957219059316998 -8.871273582020365 29.763800945827583 38.97414572912504 -44.99121607599995] :scalar-sqrt :generator-flush [21.742116183868916 8.925740486770508 8.002658456457503 -34.56652376322522 16.794475992972707 25.702518998717323 -8.400990476915219 -12.568217593333927 -1.5161411708496502 27.88502527596269 -31.322914399746104 -20.97313902732757 -25.89888839398997 24.414855330536255 42.2938515602163 -2.603591719991549 -42.08043579168197 25.314479709658613 37.241653017282445 -48.34193349439773] #push.type.definitions.quoted.QuotedCode{:value (11329 #push.type.definitions.interval.Interval{:min 4, :max 32.13447555939639, :min-open? false, :max-open? false} :refs-cutflip :strings-vremove :char-rerunall :push-instructionset :boolean-intoset :ref-return-pop :char->code -34837 :exec-cutstack #push.type.definitions.quoted.QuotedCode{:value (:refs-reverse 478645.15369359776M :string-comprehension :error-stackdepth :vector-echo :code-do :log-stackdepth :boolean-return :code-list :complex-againlater 37.60749784691207 :scalar-pop (\E -44 :exec-if :vector-comprehension 22 :string-swap 4363428N :scalars-pt-crossover :ref-return :interval-cutstack [-34 23 -1 12 6 -9 -9 20 2 33 -22 -2 7 -6 38 -20 16 38 2] :s :generator-store -44.50748564831435 :refs-pop -41288 :tagspace-later :snapshot-rotate :intervals-flush) :exec-empty? -1 -29202.090295308557 :boolean-arity2 #push.type.definitions.complex.Complex{:re -35, :im 5/47} :set-swap #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.quoted.QuotedCode{:value (:complex-in-set? :scalars-equal? 0.3265881846390801 :strings-savestack :scalars-vfilter :scalarsign->boolean :refs->code :chars-distinct :scalar-echoall :intervals-last :complexes-echo -50 :code-liftstack :complexes-sampler [22.05928684518304 -7.315357017354671 -35.45111277437157 -11.920442843297621 -16.78543269448403 46.10521248358991 46.01510249495033 21.406201315874185 30.137007181403817 31.70401399184921 -24.860703437851296 17.263001079536267 -25.609361728280234 -40.997403740174654 43.17289177469678 -28.111512646921387 39.53290247802357 -18.208445065840596 11.151069997622088 -3.545602719322119] -4972422N :complexes-remove :boolean-later :interval-notequal? :code-if)} :booleans-return :exec-save :string-rerunall :complexes-liftstack -8.757410448476712 :push-nthref :char≥? -1.3616593077184236 #push.type.definitions.complex.Complex{:re 10, :im -25/49} :set-echo :string≤? :refs-items -4462604.074947303M :string-tag 2678.922845829038 :tagspace-cutstack [-9 36 40 3 -10 13 -16 3 15 26 11 -11 29 37 -8 -23 -46 -6 46 -28] :booleans-in-set? :string-savestack)})} :complex-divide :interval-later :push-bindingcount #push.type.definitions.complex.Complex{:re 25, :im -47/4} :tagspace-cutstack :intervals-as-set :set-subset? [-4.972716176483075 3.8269773805593914 32.601869092466714 5.38343527558213 26.736763247225497 41.03222448483207 -19.027888816534468 -2.4792192629894174 -15.776390857294075 -1.7592725699247325 7.699070667659292 -1.071179338926683 21.922555291408344 29.44550162754271 44.99739268007923 -3.4265321913029894 -6.439155041736598 19.379970045244065 -49.562797531423286 -24.65720482368522])} 23375.399773053767 \c 8887 3 :code-position :boolean-yank \E #push.type.definitions.quoted.QuotedCode{:value ("'q9E,P*sZ0" :complexes-distinct 27.324873056729786 [9.320129573317857 32.210042078357176 -9.494511815049812 -3.5607806225808716 -33.3310420189689 33.06134623072323 -39.476684451851675 -44.24685804636268 -48.358127069869305 24.362811973759804 -42.55848505065681 -14.40825494947132 44.286220083001936 -30.86543215794153 -5.578056158141344 8.806516720054077 -26.5120360020507 -15.683380587105155 -21.447798377401305 -6.237856029837566] -4 #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.interval.Interval{:min -36.004444072203434, :max 14, :min-open? false, :max-open? false} :boolean-faircoin 1 :string-cutflip 42 :refs-conj-set #push.type.definitions.interval.Interval{:min -34.42165322303572, :max -8, :min-open? false, :max-open? false} (27.36714579234716 :boolean-tag 0.19369632700022432 :string-flipstack :vector-length :v :code-do -1624164.7492429689M :set-liftstack :complex-shove #push.type.definitions.quoted.QuotedCode{:value (:c :complex-store 3 [-25.481279975383664 -18.485747678837438 -23.934857322405477 -41.72316351549969 29.753385905326184 -21.3735976163941 -26.394854971634718 20.281120717159467 -10.138574095679957 -12.518688375404452 -46.83566523980544 19.17525349078373 35.38702729602477 -26.072234415781427 -38.956953861387234 -31.74189100989182 -13.826078158527345 -6.05472537600663 9.71662717726268 -46.52866732871814] 5800 :interval-swap :booleans-stackdepth :complexes-shatter :ref-savestack 1571/6193 :push-nocycleARGS "=EJ3>w[1>z" (:booleans->code #push.type.definitions.quoted.QuotedCode{:value (:code-stackdepth :char->string :strings-occurrencesof :refs-liftstack :boolean->set :scalar-abs 13 :snapshot-shove 34.13134298023125 [42 26 44 3 -31 -22 22 37 -23 -34 -35 -3 -30 -49 2 22 17 37 11 15] :generator-storestack :complexes-butlast :booleans-cycler :code-in-set? :scalars-vremove :generator-yank :snapshot-shove (:chars-in-set? :error-empty? 264.51824713664973 :interval->code :interval-flipstack 0 :scalar-save :generator-cutstack :interval-liftstack [-13 28 -20 -3 46 -21 -41 -3 21 -28 17 5 -47 44 48 -33 -42 6 11] 33.77976889728373 :boolean-pop #push.type.definitions.interval.Interval{:min -21.845878547450592, :max 25, :min-open? false, :max-open? false} -4942515.157366696M :exec-while 1689455.8281979281M :scalar-shove (#push.type.definitions.quoted.QuotedCode{:value (35.48903090924446 18692 :scalar-rerunall :set->code "!_$?Tb]wJq" 37.284827517830195 :intervals-equal? :complexes-rest 1084703.358485992M #push.type.definitions.quoted.QuotedCode{:value (:scalar-as-set [38.19874491145953 36.70488813576583 -2.9068299729019387 -13.377151761060546 -39.739105043531374 -1.4475369134299498 3.7467996324099815 -25.424003428155405 -6.667984804127435 24.28839568512032 -49.395804609955285 48.872687768137325 31.674798194421797 -11.10339679045952 -42.68473844019981 12.79442716503457 -46.37270588398516 38.15658340272637 -40.334836667640815 -10.548134389814209] :generator-savestack :intervals-conj-set :snapshot-new -0.16896382816690014 :ref-cutstack \n (:string-cycler #push.type.definitions.interval.Interval{:min 1, :max 26.983893683527285, :min-open? false, :max-open? false} :x :vector-emptyitem? -1562768N \c 13293/31355 :string-store :string-reverse :complex-pop :complex-stackdepth :chars-yankdup :s (:complex-multiply -4 :vector-conj :vector-conj-set :char-dup :booleans-do*each [0 -31 12 -32 21 33 -45 5 -28 39 -46 -20 -5 -14 -50 40 26 21] 2565739N #push.type.definitions.complex.Complex{:re 25, :im 3/20} :complex-pop #push.type.definitions.complex.Complex{:re 26, :im 43/96} #push.type.definitions.interval.Interval{:min -13, :max -0.3320088347330099, :min-open? false, :max-open? false} :refs-nth "G.=$sW;NZd" #push.type.definitions.quoted.QuotedCode{:value (:ref-tagstack :scalars-contains? :refs-save :code-conj-set :interval-cutstack :complexes-do*each 4234/29539 :vector-print :ref-store #push.type.definitions.complex.Complex{:re -14, :im -38/15} :code-pop :vector-indexof :strings-set :p #push.type.definitions.complex.Complex{:re 7, :im 1/9} :vector-rest :push-quoterefs :ref-store "'B6ZWw.zg!" :complex-equal?)} :strings-indexof :ref-peek \K) "_:|`&]mr9x" :k 1001682.308434967M :scalar-complexify :booleans-echo) :scalars-echo :vector-shove "14*;FY<w%X" \. :strings-equal? :scalars-set -2.2661650103750883 :vector-vremove :set-return-pop :tagspace-count -47.36833417355669)} :vector-shove :complexes-echo 13 :char-savestack :generator-counter "QRR0c[Rg[[" :refs-store 8602/63295 [-40.62141065514394 41.57549059388646 -26.271252162502336 -49.36009898229532 31.09769530720594 1.5701723142463067 20.76693968898479 -44.67425501280991 -1.0786251760607968 -1.1562996607142253 -16.370634773144346 37.86964559996167 -6.498102525529667 -21.14138658628847 43.296992646915015 -5.022326086570573 10.688987652668871 29.63520362742284 38.108351771201356 -3.9784598357597503] :complexes-replacefirst)} :intervals-as-set :interval-in-set? :chars-pop #push.type.definitions.interval.Interval{:min 23.915269912758376, :max 38, :min-open? false, :max-open? false} #push.type.definitions.quoted.QuotedCode{:value (:set-conj-set :complexes-contains? :refs-items :complexes-indexof :complex-conj-set :generator-again :complex-flush #push.type.definitions.complex.Complex{:re -34, :im -9/41} :tagspace-yankdup 1.4972440434124143 -36994.79775702646 35.237953476926705 :push-counter :tagspace-filter -20 :char->code -2855222.830655887M :strings-stackdepth #push.type.definitions.complex.Complex{:re -13, :im -9/34} :exec-liftstack)} :char-conj-set -21.242587381587853 :snapshot-tagstack #push.type.definitions.complex.Complex{:re -40, :im -25/69} #push.type.definitions.quoted.QuotedCode{:value (-184930.87913051806M :scalars-return-pop #push.type.definitions.interval.Interval{:min 34.741973008988765, :max 35, :min-open? false, :max-open? false} :chars-return-pop "N6f*&Nv3fA" \p :refs-dup 4718715N :refs-echoall :vector-equal? :complexes-flush :complex-yank -3068425N :ref-swap :push-instructionset :v :refs-rest :code-againlater :chars->set \>)} :string-rerunall [-21.313706244853293 43.496936285211945 -26.712811421830352 -45.05747175344489 -28.946328712092285 -10.279620584028727 -9.994552080769544 -33.599695266643536 -22.45997281418188 13.472286835096213 34.33594011317891 -43.72869044017731 49.50949360404768 31.09048075748288 32.79039198838392 -22.657236345997077 -0.08226643771801179 -24.760875111999738] :boolean-3bittable :strings-equal? 34 :scalar-storestack :refs-first) :string-conjchar) 24346 [12 -45 -3 25 -22 1 3 -25 28 -6 -48 11 10 12 -34 -37 23 -50 -26 -47])} #push.type.definitions.complex.Complex{:re 38, :im 9/34} [-49.62457717653489 2.2361950106800563 -34.00195658182453 19.332397800978725 14.03038878667077 -41.702862911515005 -21.704717082459833 -23.837287587603218 -46.94679214685057 -48.05954150543572 2.4764865503290565 34.23049138580633 -47.03879329866702 -12.902634456323412 32.22069931000185 -14.606559146595757 -19.10167854830278 47.802241462671276 49.55116482126567] :code-sampler :interval-equal? :string-removechar \# :strings-cutflip :strings-vsplit :tagspace-savestack #push.type.definitions.quoted.QuotedCode{:value (:booleans->code :booleans-tagstack -42564.30922715295 :intervals-portion :vector-echo :char->string 2.1538995815719755 -2773415.122829549M 32479/41466 #push.type.definitions.interval.Interval{:min 12.786257726404074, :max 20, :min-open? false, :max-open? false} :intervals-later :refs-pop 0.20404156325990286 :strings-fillvector 2 :strings-nth :generator-againlater :tagspace-shove :refs->tagspace :set-savestack)} "1dQtUC7,F>" :booleans-contains? :complexes-swap :scalar-cutflip :scalar-shove :ref-empty? 28.2082447181579) :interval-divide :ref-yankdup "hnqvb@]`&H" :refs-later 45640 :string≥? :vector-flipstack)} :generator-storestack :strings-first :ref->vector :snapshot-dup 37 :vector-equal? \* -4029371N) :scalar-return 23881 :tagspace-sampler #push.type.definitions.complex.Complex{:re 10, :im -5/39} "$$bq0\"Q.tr" :ref-cyclevector :interval->set #push.type.definitions.complex.Complex{:re 34, :im -2} :generator-tagstack [29.437593199856565 20.739029077970173 -3.8411568382134007 -7.353745172356781 40.00160905938333 25.532350117608075 41.861629581766806 43.673136357567614 48.18073120812137 46.71535033926109 -6.4492619555142525 35.64145608283253 -18.130635389043025 14.105850909878058 41.67862809931104 -29.428034682959 -24.743471717717412 47.31489388172524 13.699794423565528 -40.070985310868835] "FJl(Si9)]8" :intervals-butlast)} #push.type.definitions.quoted.QuotedCode{:value (:tagspace-cutflip -21 :boolean-intoset :boolean-equal? :strings-liftstack :generator-rerunall :interval-parts :intervals-in-set? :chars-equal? :ref-known? :refs-distinct :refs-echo :scalars-stackdepth #push.type.definitions.interval.Interval{:min -28.874588296158553, :max 12, :min-open? false, :max-open? false} :intervals-yankdup #push.type.definitions.quoted.QuotedCode{:value ([28.9867324439426 27.012300044317854 -22.09126169275114 -9.49245137303685 33.120992526210685 32.335448641153235 8.023551829788367 45.14757384621625 -35.00042033863099 -36.46760405510551 -12.924154054333151 14.260798232195 -46.28792428173476 17.529467966104676 14.112595613461323 14.245181293416849 26.993341098737574 26.673287736886024 18.372054880420563 11.815676016607036] :log-stackdepth :boolean-yank \9 :ref-later 1176903.2404835075M :code-dup :tagspace-valueset :refs-emptyitem? 9 :refs-generalizeall :booleans-replace 16827 :interval-againlater :boolean-later #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re -6, :im 2/17} :boolean-as-set :tagspace-empty? :char->code :complexes-occurrencesof 2900078N 4.292891192603424 :code-map \l -22740.329116037727 2.6996188589587113 40.2712850931819 \: :refs-echo :exec-yank :complex-storestack :a -3 :generator-shove :interval-multiply)} (:code-echoall (4502070N :string-echo -1142070.6930395332M :snapshot-save -4791727N :interval-reciprocal :tagspace-valuesplit :set-tag :exec-while 26.919390246003047 -48601.60172062755 ("PGcnsrx'i7" 1676853N :string-min (:vector-notequal? :code-flipstack 19200 :scalar-later :interval-new :tagspace-later :code-subst :complexes-intoset :intervals-stackdepth :string-rest :scalar-swap 4.352928501533752 :code-extract \S 3309846N :interval-swap) :booleans-savestack :vector-later :strings-nth :vector-tagstack -3 :scalar-abs :ref-exchange -2462954.1990342373M :vector-return :vector-emptyitem? :chars-later [-48 -4 -14 -50 -15 2 42 6 -33 -42 -48 -6 40 24 6 27 -28] -11296/11071) :set-equal? [-48.859078041123574 33.938486088278964 0.850605832735063 27.728044836702153 -4.442256226778262 -19.766315968425452 -0.8548204032530862 41.669732712886116 45.24380418426587 10.581046564674615 -12.773424295335104 24.699250299618882 -2.138351091271261 -47.23271984649057 -16.132565889370007 9.370710807558282 -2.07155526348388 -37.89827369308148] :string>? \: [-43.3937224927174 27.448878876067653 -35.48679565910926 -27.443750372493938 4.9135978759408445 16.60053254234529 19.657115735981705 -39.18976858996295 20.46005317097932 19.46580382552206 -29.075553282428324 31.133336112566766 44.540635677751055 -30.04777839009416 26.920500537400997 -1.866224955126647 -38.79479230655297 -16.08046182761693] :scalars-savestack) :strings-items :scalars-items "\"^C'?WEI33" :f :set-sampler :string-store :char-tagstack :scalar-yank \l :complex-shove #push.type.definitions.complex.Complex{:re 21, :im -6/7} :strings-cycler :ref-conj-set :interval-intoset :v :intervals-later -3.0800377442995144) (:interval-againlater :code-append :complex-storestack :intervals-savestack :complex-rerunall :refs-remove :vector-return -25 (-2 (:vector-items :string<? :scalars-in-set? :ref-cutstack :refs-yank :chars-concat :string-emptystring? :scalars-dup :ref-tagstack -24699.10576402764 :tagspace-keys 3 -29455.567213613544 -682037.5423920564M #push.type.definitions.interval.Interval{:min -46.638120452769115, :max 44, :min-open? false, :max-open? false} -938734N :complexes-length) :booleans-conj :intervals-againlater :ref-return :scalar-E :vector-flush :boolean-cutstack (:booleans-dup :vector-intoset :ref->set :complexes-tagstack #push.type.definitions.complex.Complex{:re -33, :im -46/35} :scalar-echo :code-container :tagspace-return 2967291.2093799915M :string>? "W2>:IVT;M&" (:interval-reflect :tagspace-echoall :vector-intoset :boolean-notequal? :strings-take :set-savestack 3.0385333281616766 :code->set :char-print :z 4078801.787111329M :exec-stackdepth :generator-cutflip :exec-return-pop :intervals-tag :snapshot-rotate) #push.type.definitions.complex.Complex{:re -32, :im 13/32} :chars-equal? :char-digit? :interval-rebracket 2596310.8987759706M) :strings-length :exec->set #push.type.definitions.quoted.QuotedCode{:value (-6577/2671 :chars-take :chars-cutflip :boolean-conj-set :boolean-save "[MfGy|(dg+" :f :scalar-rerunall :booleans-butlast "+.J9=K.p/^" -4167681N :string-nth :scalars-replace :intervals-contains? :generator-totalistic3 -21233/91719 :vector-comprehension #push.type.definitions.complex.Complex{:re -3, :im -28/31} [-44 13 -43 49 47 -13 -49 29 -41 -49 -25 19 13 22 35 -16 47 -50 1 41] -4992520N)} :code-atom? 47309/74134 :vector-items 1568.367143124029 :booleans-pt-crossover :string->chars) :char-savestack :string-indexofchar :char-min :string-liftstack :scalars-notequal? :intervals-occurrencesof :complex-store -22566 :vector-vremove [40 31 14 -7 -44 -23 -25 6 17 -33 45 -46 31 26 -47 36 -17 -14 -42]) :boolean-xor [-16.283924607504915 -33.44872055193703 26.73925662733552 18.176494051444493 -12.21736766337289 -44.816000743349015 -40.27317651732547 29.546672343651366 -9.575181216400061 -27.531581201025258 -1.6007228063376928 39.215509502024375 -41.70691223110771 -19.252650901342506 16.207509610390176 -49.838987828862294 43.094263809032995 -42.76232407892236 -10.904566045646916 33.311372114755855])} :scalar-dup 3 3531087.506452307M :print-empty?)} :char-flipstack -4867562N :complexes-tagstack :complex-parts -10540.024948267637 46688 :complexes-indexof :vector-new :generator-return-pop :log-empty? :generator-counter 2 :code-conj-set)} :vector-items)} :exec-tag [31.250653096365426 -4.688530820193073 -23.503109631352824 -40.56998120277782 -22.26255541190566 -38.91240974384347 32.507916619910304 6.82395846567303 -10.538207252124508 41.63598672940914 7.090735800443994 3.2465807295980014 -31.397154108031366 21.64851164357937 13.664989373822678 -4.153964542786028 11.634858842807581 25.04841476633834 8.535069234266892 -3.2103888327891497] :vector-liftstack -5709/1174 :set-sampler :ref-yank #push.type.definitions.interval.Interval{:min -5, :max 9.901772232382768, :min-open? false, :max-open? false} ((:generator-yankdup :chars-conj :scalar-few :snapshot->code \S :snapshot-swap :ref-fillvector :strings->set [13.15930261578955 46.325243369689545 -20.377368929724614 -43.2926651942377 -38.42114491186662 35.81914934636983 40.487804555279084 13.693165556695263 -40.57255263375431 -12.56751687432314 44.472185327360705 -39.4294251260494 -49.431051503641 -21.566040722078263 39.585880342192866 -37.114830794972185 41.21422373578176 -39.84605125053048] :strings-cutstack :complexes-concat -4413946N -3625987N 3538633N :complex-echo :strings-rest :string-rotate :ref-exchange) -48504/99991 45 :code-notequal? :set-shove :intervals-tag #push.type.definitions.complex.Complex{:re -21, :im 1/3} (:exec-storestack 14623/30959 43094/50931 #push.type.definitions.interval.Interval{:min -13.477363715445989, :max 42, :min-open? false, :max-open? false} :chars-vfilter 36.100134501875075 #push.type.definitions.interval.Interval{:min -34.918934085206644, :max 9, :min-open? false, :max-open? false} :strings-vfilter :scalars-as-set :string-againlater :code-yankdup :scalars-print :char-yankdup :scalars-split #push.type.definitions.complex.Complex{:re -25, :im -30/23} [-31 -46 -40 -19 -37 21 5 41 -48 -32 10 -41 28 -4 -39 18 -32 11] :m :intervals-shove) :set-equal? :chars-shatter :generator-pop :scalars-filter :vector-emptyitem? :ref-rerunall :snapshot-cutstack :scalar-cosine :booleans-replacefirst :code-stackdepth :vector-length) :strings-intoset #push.type.definitions.quoted.QuotedCode{:value (-12268 :char-yank :chars-items :scalars-last :tagspace-filter :chars-sampler [15.072407973987296 29.250224824219487 11.26817564239947 -16.75058537820643 -6.658095228397464 41.318732002898116 -25.12176937286106 -11.094455638583675 35.92298408288812 13.773856227962241 -35.73041717720464 -43.29052931441774 43.12752295997758 -20.116882930381063 -18.36819780599598 -34.3188738363157 -24.2586224148413 11.660913529385986 26.11929171710142 41.07002934607826] 38.80044674467753 #push.type.definitions.quoted.QuotedCode{:value (-5 :char-shove :snapshot-end :complex-echoall :complexes-tagstack :char>? 4777751N #push.type.definitions.interval.Interval{:min 30, :max 40.078041712323625, :min-open? false, :max-open? false} :code-list \Q :strings-do*each "YFIsNN@X-J" :code-nth :scalar-few #push.type.definitions.interval.Interval{:min -41, :max 30.21772869493489, :min-open? false, :max-open? false} :boolean-storestack [2 11 12 -33 -40 20 -25 18 -33 17 -45 30 -21 12 1 38 -43 -50 6 -11] :char-echoall #push.type.definitions.quoted.QuotedCode{:value (:exec-do*while :refs-yank -37 :code-savestack 5 [-26 -39 -9 26 -22 -37 -22 32 -29 -18 -12 12 39 -46 10 -12 -19 39 36 -21] "x/Leza-/Fh" -7462 -0.09136071930088185 :chars-cycler :ref-shove :refs-againlater :tagspace-rotate :complexes-pop :chars-againlater :snapshot-flipstack -7369 :complex-empty? -1 :scalars-comprehension)} -32405/22019)} :vector-yankdup -2 \- :scalars-indexof :scalar-pop :code-return :boolean->code (:chars-flipstack :chars->tagspace :scalars-empty? [-25 -36 -9 29 6 19 16 37 35 -40 -2 34 44 42 -37 0 -31 23 44] -12489 :exec-echoall :tagspace-againlater -10 :ref-liftstack :integer-uniform \t :strings-last -23 :set-union :refs-new :strings-notequal? "_=V)EL9^|(" :tagspace-print :push-nthref) :set-rerunall :booleans-last #push.type.definitions.quoted.QuotedCode{:value (:interval-save :push-nthref :complex-againlater #push.type.definitions.interval.Interval{:min 33, :max 49.77410172354685, :min-open? false, :max-open? false} :vector-remove :chars->code :boolean-as-set :exec->string :exec-intoset -27575/19038 #push.type.definitions.complex.Complex{:re -11, :im -33/49} :ref-stackdepth :scalars-flipstack :ref-in-set? :chars-do*each :refs-replace :g (:set-yank 1884004.83118648M -9416 :scalar-echo :string-min :booleans-storestack \[ :intervals-contains? -2 -1.2498458679381508 :intervals-swap :chars-distinct 48507.85241208837 710171.8620501198M :chars-pt-crossover "OGVmBo\\Dy9" :booleans-dup :snapshot-tagstack :code-points) #push.type.definitions.interval.Interval{:min -43.25066309920553, :max 3, :min-open? false, :max-open? false} [46 -6 8 46 17 -12 49 -44 0 49 -14 11 48 -20 49 -34 17 -11 -35 -14])})} :refs-rerunall \" 38104.22814780081)} :scalar-divide :z :refs-cyclevector :string-rotate :chars-dup #push.type.definitions.interval.Interval{:min -29.188475508593783, :max 42, :min-open? false, :max-open? false} :complex-save #push.type.definitions.complex.Complex{:re -28, :im -26/43} :vector-fillvector 5973/48863 :interval-yankdup :set-echoall :char-return-pop :code-as-set -4 :exec->string 4853180.513730239M :intervals-replace :intervals-emptyitem? :complexes-contains? :complex-cutflip :intervals-remove :string-shove -0.8406265373980943 :ref-tag 11278 :char-shove :intervals-distinct :refs-first #push.type.definitions.quoted.QuotedCode{:value ([24 36 -23 -17 42 28 -45 -45 -23 21 -2 -16 -46 49 44 -27 7 29 44 11] :complex-tag #push.type.definitions.complex.Complex{:re -34, :im -15/2} "_fX=0QRC%I" :tagspace-keyvector [-41.57618901147128 -44.550893675865225 -13.030806284898254 -9.05642588036443 43.87026807224473 38.798210381398405 -16.01907555508223 -12.79135691859188 2.6735031754645178 -4.975548984448629 -22.984311903913046 -32.14108894767159 -38.68582307227517 5.949308186797154 -42.69540751154911 18.70649797064651 20.579247153375917 -2.555692482822799 -24.355192137558866 21.25140356361615] :vector-tagstack 20 33577.67567813255 -2.506723569407555 :booleans-build 47395 :interval-later 4.173900375628575 :n #push.type.definitions.quoted.QuotedCode{:value (-38066.7855109946 :push-unquoterefs 13.301510635781135 -3665031N :interval-echo 4706933.366300823M 0 :boolean-intoset 270845N -1886581N (:booleans-later :booleans-as-set 4.404431821416646 :intervals-rerunall :string-return :h [9 -31 13 -4 -13 -36 -1 9 20 10 -27 13 -7 7 -48 25 -45 6 4] :generator-swap :generator-later :snapshot-flush :generator-yankdup :snapshot-yank (-3961979.8201116542M -3.8730431356742017 7026/32989 -10.973271321685687 \. :intervals-sampler 37261 [-28 -8 -26 -16 -20 47 11 35 49 9 -50 -20 36 -27 -19 -37 23 37] :intervals-yank :tagspace-liftstack -17 :push-bindings :booleans-as-set :scalar-sine :complexes-indexof :complexes-emptyitem? 1.0708873145755078 \E) :refs-flipstack :complexes-as-set #push.type.definitions.interval.Interval{:min 34.947386935889725, :max 44, :min-open? false, :max-open? false} :vector-build -27.423796075581052 :tagspace-filter) :ref-cutstack :snapshot-savestack :string-cutflip #push.type.definitions.quoted.QuotedCode{:value (:refs-as-set [4 -50 12 -8 17 46 7 -5 24 4 -14 -25 40 7 -10 35 31 36 -7 27] :generator-stepper \; :o -24359.79849295802 826049N :refs->set 15 :generator-flush -2.832712647663925 -2.098391623690069 [7 13 28 37 9 42 48 41 -3 36 0 -23 11 -5 9 44 -11 -31 0 45] :refs-yank :scalars-swap :scalar->char :chars-first [-46.56412301635855 -36.24625814166552 8.398721064868077 19.326541989559914 -16.641408386815534 -19.741683909479967 0.39277603546648265 -49.10142823370806 0.7887911300668122 28.18633913056172 -32.22715421609941 9.42248824193107 34.08019343871335 -27.495213916047444 -37.93172730364114 17.099969439132778 30.375542382964085 34.48165595773287 -25.543655839884817 -8.695144091237836] :intervals-equal? 12441.703023740156)} :booleans-stackdepth :d 4792874.359155741M :scalar-savestack :booleans-byexample)} #push.type.definitions.complex.Complex{:re 13, :im 1/33} :strings->tagspace #push.type.definitions.quoted.QuotedCode{:value (:intervals-notequal? -5 :snapshot-pop -1.2778253739182412 :code-container :booleans-distinct -4385300N #push.type.definitions.quoted.QuotedCode{:value (:intervals-shatter 142655.49125123676M :ref-as-set :scalar-many 4003471.798989365M :booleans-vremove :scalar-cutstack \V #push.type.definitions.interval.Interval{:min -40, :max 22.204038050650837, :min-open? false, :max-open? false} [-4.638005562756916 47.84967371247677 -15.478897843450888 32.54695722569309 -13.416939573348245 8.223291900261252 -44.19292677681679 -26.65531321725323 45.44861444139046 12.313512443121098 -35.07061828675525 43.047845220089584 -8.090034526338485 -35.34196291510533 2.7881558685543553 43.84203383419246 -1.960104739663393 41.2861385697787 1.514933138238547 -38.24415424488335] (:o :vector-return :scalar-complexify :scalar<? :complex-savestack :generator-save "?umSF'=B<H" [34 -14 -33 -46 46 27 -50 -1 24 38 -28 40 -20 -3 0 35 20 -42 -46] :scalars-reverse :intervals-shatter :booleans-emptyitem? :chars-emptyitem? [0 -6 9 -39 14 -1 -49 -47 -36 36 45 -21 37 -26 -43 -13 -6 15 -41] :exec-laterloop :scalars-tagstack :scalar-notequal? :refs-do*each #push.type.definitions.quoted.QuotedCode{:value (:complex-empty? :chars-rest :generator-totalistic3 :string-conjchar :refs-againlater :strings-fillvector [33 -36 -4 -41 -14 33 45 -35 24 -5 34 -12 -24 -13 -14 -14 -45 18 -17 -16] :intervals-set :booleans-distinct :code-cutstack :exec-conj-set [48 35 -2 -48 -28 -45 -4 18 1 -30 0 25 27 34 43 -8 -14 -7 -22 14] -3.0050320785833327 :scalar-many :exec-notequal? :vector-savestack -38 :strings-set -17382 #push.type.definitions.quoted.QuotedCode{:value (:snapshot-pop 20793/68992 :snapshot-rotate :vector-length 36347 :interval-echo :g :booleans-storestack #push.type.definitions.quoted.QuotedCode{:value (:interval-in-set? [-11 16 -30 16 -16 -44 -18 25 6 13 -11 -46 -11 -4 14 -21 -27 4 25 -49] #push.type.definitions.quoted.QuotedCode{:value (:chars-distinct :booleans-echoall :complex-multiply :vector-echoall 11369.456485993513 :tagspace-lookup :snapshot-yank :tagspace-lookupscalars :scalar-againlater 4.057855438728424 #push.type.definitions.interval.Interval{:min -11, :max 21.2042997596062, :min-open? false, :max-open? false} :refs-cyclevector :string-splitonspaces :tagspace-min :intervals-storestack [24.009837518170315 -22.348034892908288 9.258208118103575 22.98258916320414 19.896639920472538 -41.034249015796206 -9.708354716453997 -3.8306563414083996 -47.52087695412675 20.337399660186733 0.16865428847847852 5.020903285797743 -1.2887500259731297 -10.673891310337247 -46.40781348729261 29.65708795599575 -34.280999141176395 31.717746460534087 4.850949908697245 -10.95337975669679] #push.type.definitions.interval.Interval{:min -0.5534125922108686, :max 31, :min-open? false, :max-open? false} :e :booleans-vremove (:refs-yankdup (:scalar-ln1p :chars-cycler :boolean->signedint :chars-butlast :exec-tagstack :strings->code -4939.744116617527 [-24 -3 -11 -17 -19 -6 31 -41 19 -6 35 22 36 -8 11 18 13 33] :scalar-abs -48737.386671766435 :scalars-conj [27.190025538391197 -27.01275551330278 17.80056980892479 48.040979550425746 43.32407619133798 -14.878602883188186 -39.063701358922216 37.53048775989325 -12.675553834103269 48.33114388243919 43.477048603786045 37.781121772666864 -23.81790475526121 7.753318531583851 -4.82735660045811 -43.1584877977376 6.5648230686514495 -39.40030995317058] :complex-shift :scalars-dup :intervals-print :chars-later ".cs8}ue)A|" [-15 -5 6 -46 -30 38 6 45 -14 46 1 3 -14 37 44 -37 34 17]) :booleans-intoset (:complex-print [11.478529703160078 46.69770761850299 4.584162803805512 27.41354527035405 19.139332478981046 -22.478518068720334 -36.111076753232695 -44.07161401285627 -33.428071712830416 -11.667128254988455 35.928494490771484 16.596341890135136 -2.953157638908678 -41.75986782727381 47.150910235503034 49.844454681496586 -5.93943901770713 -27.768941524068115] #push.type.definitions.complex.Complex{:re -38, :im 18/71} :interval-empty? :c -46204/99369 47 42924/12073 :complexes-do*each :chars-yankdup :vector-emptyitem? (:code-map :tagspace-valuefilter 544257N 49618 #push.type.definitions.interval.Interval{:min -31, :max -22.745301300415644, :min-open? false, :max-open? false} :string-min -38 -16397.328569968 -24091 39 :intervals-fillvector :scalar-flipstack :print-stackdepth :code-container :scalars-echoall #push.type.definitions.complex.Complex{:re 28, :im 1/46} :scalars-save) :snapshot-tagstack :complexes-tag :strings-store #push.type.definitions.complex.Complex{:re 19, :im 10/37} (:booleans-notequal? :complex->set :char-rotate :string-stackdepth :boolean-echoall :refs-yank :scalar-sqrt [30.664150314118487 -47.64018964619838 14.01992981041515 -35.15290503069131 24.732734161974264 -33.936808223997815 17.298282042769543 48.51652711920664 -0.05608148415564784 15.94193030947379 19.519456425309514 -28.90499203253114 -26.861525199558713 2.9259161028058145 -49.67811013460975 21.622534077998665 -18.570396055413095] :complex-echo #push.type.definitions.complex.Complex{:re 36, :im 22/19} 2182 :complexes-rest :tagspace-keyvector 1800672.1892490247M :strings-store :scalars-cycler :x) -7.985167655547251) [49.36466001112733 -41.982461757202486 -37.103773266643714 4.371559376600544 -46.09060882420507 16.295355769886683 -6.2215171971591445 34.089125559067966 35.67331543596889 -11.669731719015054 -27.17933187038789 -7.693751669384952 -41.407308971799566 -37.430424435670574 6.442882315913103 42.657102864278855 7.089337131659271 -49.83306859312589 28.12855579216192] :code-container :interval-union [-33 -18 -15 6 -50 10 -15 6 -8 -38 -28 30 -31 -5 -29 5 -5 -41 -41] :char-print :exec-swap :chars-nth \" :strings-yankdup :complex-cutstack [-48.88062131521135 -47.483228398910406 39.174462481833245 43.264619927660476 -33.760256354135805 -21.214633794138958 25.2408431430851 18.136545679505517 37.52320923589413 -32.34775740179282 -4.107167429168371 -39.95289882943112 13.28692539017429 -3.2978180291411334 -14.505656998492292 41.96270289332742 49.92388643732163 44.34680827907313 -3.4111663088395403] :vector-remove :string-first :string-shove :complex-subtract))} 5.7682431613488845 :char-empty? :exec-yankdup -20.762531918139928 :scalar-cosine [-47 -28 37 -31 1 -48 -48 -36 21 -10 -10 -31 36 -38 49 -12 46 16 29 8] :complex-return 18991/6035 :scalar-multiply :code-cons :intervals-cutflip :code-insert -0.09084065657936691 :boolean-tagstack 3800766N -49562 -33)} [-26.746987406686852 -13.80705248130569 -25.32274932414509 3.8429430455302693 -19.143778317482596 -28.027784109943312 -40.14595409709629 -7.912321483695386 46.96205089391172 -38.97893870675184 19.598110140220385 -39.079573814319005 29.873098045021635 -4.821823093607094 -36.36096970018724 14.66879653202679 -13.988027139423806 -34.49690907702669 5.163458968290811 49.87505736614726] \2 [28.64197651506298 34.077633783448846 37.48245471822894 -24.946595778099436 -20.09472795477515 8.369533245122938 -29.282046460499856 48.64108344572854 30.558487422102687 40.598610146187056 34.376742429903416 -1.4106541025830097 17.04764622604297 36.58536594852549 -10.52750838530325 33.465381432246616 18.265773301901774 -11.946023486496657 18.405173296215665 5.37148041261505] :code-quote :intervals-stackdepth :complexes-echo :scalars-new 30788.613887721454 :tagspace-shove [-31 0 16 -15 -45 -38 46 8 -10 23 31 -41 39 24 14 22 -31 -2 46 3] [-30 -29 18 45 -50 13 44 20 17 -18 20 2 32 -42 13 -15 -23 -31 46 10])})} #push.type.definitions.complex.Complex{:re -4, :im -2/79}) #push.type.definitions.quoted.QuotedCode{:value (:intervals-conj :scalar-π -4061/10538 :string-indexofchar -4507024.184928231M :vector-flush :chars-items :booleans-contains? :interval-conj-set :booleans-shatter (#push.type.definitions.interval.Interval{:min -21, :max 29.194358819197845, :min-open? false, :max-open? false} :intervals-indexof :scalar-ceiling :refs-storestack :intervals-cutstack -31053/19682 -23437 :string≥? -4.083068924904961 \X \z :exec-in-set? :tagspace-keys :char-print :tagspace-tidy :h :char-dup -17 :ref-yank) :code->set :vector-build :scalars-shatter -0.9947293460148066 :interval-newopen :boolean-in-set? :booleans-echoall :refs-flipstack :chars-length)} 16615.215280025295 44.26271085539912 [-10 39 -36 2 43 -21 2 47 -2 32 33 21 8 -40 -35 -35 19 30 34 27] -39681 :exec-if 31.054380589644694 :complexes-pop [-28 -35 42 22 15 46 3 -1 -34 -18 10 10 26 48 -10 -1 -40 20 -8 13])} ".;$#\"pYBk%" :char≥? :scalar-arctangent :booleans-stackdepth [15.647536485504716 -37.286444964347375 -25.400987078872504 5.188505516800248 19.842437885702367 49.99078762091439 38.27329760950889 -42.03588302909501 27.606412073611878 -19.360792830158104 12.529594642385788 -9.985552922608868 38.93085360779777 8.69258990325067 26.2622068937208 -41.5162411515186 -8.012739283707326 46.57418850428235 -1.8529351213798364 -18.67189344891409] #push.type.definitions.complex.Complex{:re 33, :im 1/5} -4505678.980816259M ".oC8(t^t)V" :set-shove :boolean-2bittable -2.586987202578921 :z)} \h)} #push.type.definitions.interval.Interval{:min -36, :max 24.895842681027062, :min-open? false, :max-open? false} 23.440446018879783 :scalars-remove :f :chars-set :refs-rerunall :char-againlater 151276.05981516652M :scalar-rerunall :complexes-dup :snapshot-yank -40918 32.63850779344915 (:push-unquoterefs :set-stackdepth :vector-liftstack :scalars-generalize 0 :interval-intoset :interval-cutflip :tagspace-sampler 4.353073254965359) 38 :chars-storestack :string-empty? :code-sampler :strings-later :k :string-min :scalar-againlater 1314/877 :generator-stackdepth (:exec-comprehension :interval-rerunall (\( :ref-tagstack :intervals-flush ((:char-lowercase? :char-intoset [-16 25 -18 12 5 23] [-3 42 43 -45 -29 -45] -39 :strings-occurrencesof) :intervals-concat (13811/83878 1762858N #push.type.definitions.interval.Interval{:min 14, :max 35.93174420583354, :min-open? false, :max-open? false} :char≥? 25479.184417629658 :booleans-length) :set-store :tagspace-cutoff :complexes-remove :vector-conj-set) :scalar-echoall 40536/16481 :ref-dump-tagspace :vector-vsplit) :q #push.type.definitions.quoted.QuotedCode{:value (-44 :refs-yankdup :string-take :string-print :tagspace-rotate -49767.50368202568 5250 :complexes-dup :string-flush [-35 -19 43 -39 4 -49 23 -50 -7 37 34 -31 -21 17 3 -16 -36 29 -23 35] -41130 :vector-first :interval-recenter :interval-parts :ref-rerunall :scalar-arctangent :string-cutstack :set-save :booleans-store :tagspace-cutstack)} :code-do*count :refs-comprehension #push.type.definitions.quoted.QuotedCode{:value (-14578 [-13.200981348604344 27.641190077886193 -30.569754144389194 -37.586054914692546 -49.277446152483364 -21.791826573528162 -15.395942247512032 -36.77264431299041 -25.39369489996052 -40.11787574508517 42.59250842581167 -31.670944893517227 -49.127191203100104 -39.229648274985394 11.442405277238876 -37.388532146147334 30.99276954994869 3.2415701317609944 10.198196733422584 -5.0422230359294815] :interval-notequal? :scalar-conj-set :scalars-byexample :complex-yank :vector-do*each :push-instructionset :boolean-echo -41869 :refs-set -918239.9199693468M #push.type.definitions.interval.Interval{:min 30.996031197409025, :max 45, :min-open? false, :max-open? false} "HNDqm;32`8" :booleans-return-pop -47 :vector-empty? :e :strings-fillvector #push.type.definitions.complex.Complex{:re 0, :im -25/64})} -7.409950054982673) \g :generator-tagstack :exec-empty? :chars-butlast :string-removechar :strings-storestack 3653735N :intervals-tag -4801574N :exec-in-set? :tagspace-count :tagspace-storestack -2356073N :complexes-do*each :complexes-tagstack :scalar->code :tagspace-flush :complexes-in-set? :code-first :strings-portion :boolean-yank :scalar-equal? :booleans-savestack [-48 6 -43 1 -9 -4 -50 47 -35 2] :booleans-butlast -38189.06601754374 :interval-liftstack :vector-cycler :scalars-stackdepth :snapshot-cutstack [-42.36257730998049 -2.3633651320159856 34.045632434130084 -45.522750721475234 -49.28813666033365 48.99184040132437 -46.9053614671388 -30.45365643903166 -42.35435909664762 22.397294454411977] #push.type.definitions.interval.Interval{:min -47, :max 42.54178298738201, :min-open? false, :max-open? false} :scalar-tagstack 47655.80186477276 39.9057561573502 :code-againlater :tagspace-stackdepth :interval-conj-set :complex-in-set? :vector-last :scalar-conj-set [-12.226305391156075 -37.8834960270577 47.44949732388962 -44.11976326931243 34.038301046870444 -0.5195138159277732 -33.01393097267332 -14.084708316926111 11.620531296450423 8.613595749103098] 45618 -3 [-4.9704663872762325 40.41282374171645 35.20036338071394 13.53519463605187 16.252258787268048 32.09099893760724 19.035001799940858 31.52624209193189 48.54600199842943 18.632006776363212] :booleans-cutstack :vector-conj (:code-quote -3.4982538822978637 #push.type.definitions.interval.Interval{:min -47, :max -31.891809543280157, :min-open? false, :max-open? false} :vector-replacefirst :string-removechar :h :ref-liftstack :interval-cutstack -23260.525761272642) \O :string>? 16.660858085927217 :code-list :refs-swap 2627366.715009829M :print-newline (#push.type.definitions.interval.Interval{:min -27, :max 47.653529796783744, :min-open? false, :max-open? false} :scalars-rotate 24 :scalar-sign -45.00222662319007 -3 -5 :boolean->string #push.type.definitions.complex.Complex{:re 0, :im -41/54}) (:string-equal? 49 \Y 13 :char-echo :string-stackdepth [-30.47651726518359 -18.91328118418375 2.6314837825878286 -41.44453568023426 0.9958606126229199 -17.213264133307263 -30.32900192608747 -10.63625638101626 -0.2898967184132104] 21 (-16175 :tagspace-normalize :complexes-tagstack (-4 [-17.17516532851051 -21.780704052257793 -41.331065048942165 40.53173625019687 -28.030978854705545 -39.428736782862046 32.93156662518153] :strings-length [23 9 14 42 -5 38 -49] :string-removechar -2 -4) :strings-pt-crossover :push-bindings -4.2964114884077595 :boolean-2bittable)) :exec->string :complexes-conj 1475870.460018837M :chars-tag 10.920297640086119 \U :strings-shatter 23.536133292838414 :complexes->tagspace :integer-uniform :interval-reflect :chars-nth 2079469N -37 :tagspace-yank :set-rerunall :chars->set -46116.430258968554 :vector-do*each :intervals-yank :scalars-byexample 2569573.50771317M [-47 39 21 16 -43 43 2 1 15 -38] -5524/1623 #push.type.definitions.interval.Interval{:min -11.362785214775862, :max 33, :min-open? false, :max-open? false} :ref-liftstack [17 19 38 -21 -46 21 12 49 8 45] :code-do*range -2670619.1845486127M #push.type.definitions.quoted.QuotedCode{:value (:chars->set :scalar-reciprocal :vector-pt-crossover -17375/34191 :z #push.type.definitions.interval.Interval{:min 37, :max 48.49067193793256, :min-open? false, :max-open? false} :complex-zero 3361595.6549228653M :exec-tag [28 -2 26 47 13 5 29 -11 44 -48 -10 40 2 -45 -14 -10 -26 -33 30 -18] -14843.308947671416 :interval-shift :ref-tag :string-yankdup 5 -23039 :strings-return 3636229.907444231M :strings-byexample :exec-echo)} :refs-replace :strings-flipstack :snapshot-begin #push.type.definitions.interval.Interval{:min -35.41870428145191, :max 10, :min-open? false, :max-open? false} -18477/6442 [4.609815733030395 7.283263209626355 -20.23826273936563 43.542873778229534 -5.998558143701196 -4.0697743787675975 31.34304657523444 19.785566270236572 5.965640472324175 12.778322722304338] [0 -31 -50 42 -30 30 -3 -26 40 39] -4844063.042117345M #push.type.definitions.interval.Interval{:min -43.04602064830624, :max -16, :min-open? false, :max-open? false} :vector-items [-32.00544252813388 -22.827436963370396 19.22060026857376 -30.004630236500695 -2.282445525258325 -47.3778044625234 -26.189950620661772 -17.88701412014168 48.61906593353484 31.501906884432216] :vector-yank \c :tagspace-valueremove :ref-intoset :scalars-portion 3123786N :boolean-or #push.type.definitions.quoted.QuotedCode{:value ((:booleans-savestack -1.4381207788962485 :vector-vremove :set-print #push.type.definitions.complex.Complex{:re 40, :im 17/40} #push.type.definitions.quoted.QuotedCode{:value ([18 -14 4 -6 -32 6 -33 19 -34 5 -42 28 35 20 -38 -50 -4 -26 -14 -16] :vector-new :char-savestack 6427/63825 :complexes-empty? :vector-dup 2.678420650434651 :refs-vsplit :code-cycler 23.50354792571727 :boolean-savestack 22354.28722783977 ".-|mBhd)\"v" #push.type.definitions.quoted.QuotedCode{:value (:scalars-replacefirst :vector-replacefirst #push.type.definitions.quoted.QuotedCode{:value (:complexes-cutstack :chars-rotate :refs-liftstack :char->code \w :code-pop :exec-shove :interval-dup :intervals-remove 42.145705091978385 2.1068704615641565 #push.type.definitions.interval.Interval{:min -8, :max 36.89663682291631, :min-open? false, :max-open? false} :intervals-concat -2498.8649720446265 :intervals-notequal? :string-print :scalar-min "GF/69Bo<.`" :tagspace-tidy :strings-storestack)} :intervals-flipstack [-22 -35 -20 -19 3 0 -22 -21 -11 -7 22 8 -26 -42 -1 10 38 -16 25 -42] :snapshot-liftstack :refs-conj :set-print :scalars-liftstack :tagspace-equal? :scalar-tagstack \' 11 -1102929.713664075M -33 -1584360N :char-swap 6207 2.381722609046559 :interval-reflect)} :vector-occurrencesof :intervals-butlast :complexes-replacefirst -1 :interval-include? :exec-string-iterate)} :string->set #push.type.definitions.complex.Complex{:re 40, :im 38/69} :scalar-save [11.501167938984139 28.790719821605478 -43.00553566023253 -45.808237406893326 -23.563840206100195 -30.64341161306331 -34.58191233410967 45.528112463884014 44.32653500888915 25.350735509915367 0.8599924568645676 30.119294611176798 41.901435893868296 6.265924537802533 -1.2465563215758522 43.14792148666707 -16.031570956053145 1.1978352220277415 47.84186206067092] :vector-pt-crossover :print-empty? :scalars-equal? :string-return-pop :scalars-store :char-flipstack :char->set -12820.309418520468 #push.type.definitions.interval.Interval{:min -24, :max 35.33695884069763, :min-open? false, :max-open? false}) :scalars-flush -16.6760168939971 3422856N -42887 :complexes-swap :ref-as-set :booleans-generalize :vector-cutflip :intervals-echoall :booleans-flipstack #push.type.definitions.interval.Interval{:min -46, :max -25.532694367690446, :min-open? false, :max-open? false} -14 :refs-rest :scalar-later :chars-storestack :code-return 4352480.724099694M :scalar-reciprocal :booleans-againlater)} [27.15070377074605 15.442531559530408 28.664517189845057 33.88540782215142 47.63050739414521 -31.869956896571804 -11.093018145993518 -39.165925228292295 -19.64230746158514 -29.875282141622407] -0.22601092359056363 :refs-vfilter :chars-set -1 :log-stackdepth -5 :boolean-intoset 2084799N [9.785200697422106 -17.848436197289573 47.47968197059134 42.136804840803094 -14.673286896131486 37.8339625410908 29.37918205844494 -43.59847227179261 -44.489364546060116 -26.994883041422803] 4 :code-do*times :chars-first 33491 38546 :intervals-occurrencesof -2476369N :string-shove :intervals-vfilter :refs->tagspace :print-stackdepth [-8 49 48 -3 25 19 -46 22 2 42] -2.0782936372924112 :intervals-as-set :exec-do*count :complexes-indexof :set-store :push-bindingcount :refs-contains? :char-echo :refs-vfilter 1 :string-echo :code-first :set-storestack :scalars-nth #push.type.definitions.interval.Interval{:min -11, :max 46.0351508923534, :min-open? false, :max-open? false} :scalars-print [16.34963281395764 46.103425879820136 -6.502171568977644 -47.57931160559876 18.176055020332242 28.906002742234307 -33.061734143970114 -34.274522927626165 36.89594117731765 12.632971510868352] :scalars-in-set? 11.31768801257823 -1970635N :booleans-generalizeall :complex-save 1421.6725517319574 :code-position :generator-echoall :complexes-pop \q :scalars-liftstack 13.314759305775667 :scalar-print :refs-in-set? :string-replacefirst :ref-tagstack :chars-length :booleans-conj [-30.23043118705333 -0.641533493190714 2.380753219516407 9.231379892247674 7.407518142394153 48.08349911690702 47.599698397636956 3.8640163106863454 43.5281553686294 -8.547100722577348] :intervals-replacefirst :interval-pop :complexes-store [39.586307818030974 6.046862997899559 -6.106143017766861 -17.477982597465967 -15.069849502620315 14.569730192900721 -47.7987068565785 -38.218380837387876 16.892107020143115 -37.418842502914096] 30350.6480178138 :scalar-in-set? 2.7127619968081014 :string-flipstack :strings-return 42.89759873010766 :snapshot-new :exec-yankdup :char-swap :scalars-storestack :chars-shatter :chars-intoset :generator-jumpsome :exec-while #push.type.definitions.quoted.QuotedCode{:value (49.78382158906352 :code-position 3.773294098808245 :string-occurrencesofchar :interval-pop :refs-yank :generator-return -15495.23748582384 #push.type.definitions.interval.Interval{:min -13.27599486964035, :max 47, :min-open? false, :max-open? false} :interval-notequal? -4620791N :booleans-intoset [32 27 2 30 18 -32 1 -42 -7 -35 -48 -42 4 23 -22 -2 14 -15 -50 -25] :snapshot-againlater :complexes-butlast 3355035N :ref-return 49434/40241 :snapshot-liftstack :refs-echo)} :scalars-conj :strings-echoall "ff28J3`0Ss" #push.type.definitions.complex.Complex{:re 5, :im -7/58} :refs-savestack :refs-rerunall :scalarsign->boolean :interval-divide :chars-in-set? :exec-later 3 46 (:ref-storestack [-32.79572071811903 26.547545418945788 -17.100745351722715 44.634499396877686 44.29339937468741 21.65637129543377 46.07927504751876 32.98848003509944 -40.45881552796978] #push.type.definitions.interval.Interval{:min -19.14120612709045, :max 11, :min-open? false, :max-open? false} :y 9127.265087311309 :code-equal? 0.25199406486012066 :complexes-replacefirst :scalar-sign) :generator-totalistic3 :intervals-contains? :boolean->string #push.type.definitions.quoted.QuotedCode{:value (-3867989N :scalars-print :vector-notequal? :i :code-echoall :scalar-later :vector-concat :code-cons :interval-print :char->string [-21.134344581736 -21.168782050902337 28.964420464444643 -26.72156164756172 45.23462419665802 37.58958476799448 -8.91499803890786 43.31615321975339 32.30361000249758 -32.972956839321284 49.832414924305866 23.697885854846902 24.92483845086106 41.07393077260504 -4.472540747029818 31.45285108938289 22.14877141530819 -43.19686622098979 29.67799860826507 42.332273647433155] :exec-do*while -1771829N :vector-contains? #push.type.definitions.quoted.QuotedCode{:value (4.528558415008888 :refs-replace "GgN)!C<%Fe" ":^fI:%(A27" 2.277824895966811 :ref-cyclevector :scalars-distinct :ref-dup :integer-totalistic3 :strings-set :vector-as-set :snapshot-stackdepth :vector-contains? -1 :code-do*times :strings-tag 425059N :intervals-replacefirst 2668704N :booleans-echo)} :complex-add :booleans-storestack -1.3265935327811618 -29312.166543622996 -3)} :complex-divide -3539297.353709845M :boolean->code :strings-rerunall :snapshot-equal? :snapshot-pop -2849152.4773412514M :char-conj-set #push.type.definitions.quoted.QuotedCode{:value (";'N4P'(GPE" :interval-multiply :ref-as-set :set-againlater :refs-occurrencesof :chars-swap :vector-return-pop :refs-in-set? :complex-rerunall :scalar-pop :chars-print :booleans-empty? [-19.134244854914783 8.351435245984327 36.88871319565223 26.88684034820389 -13.791412085696933 -14.378406233918604 48.63623360679652 7.3309950532117725 -40.36770362099186 -39.559652148404524 -27.77890310487208 42.70520371555277 -40.07918903970064 -49.31517439378374 32.85181258223594 -15.568021215683089 -49.90097249108615 -2.4337335140640874 3.4259673401520843 10.21075585516543] 1 -3224101N -1838356N ("+i%#'n:q7M" :ref-return-pop 197/162 :ref-shove :complex-stackdepth :exec-string-iterate :complexes-replacefirst :generator-echo #push.type.definitions.quoted.QuotedCode{:value (\h \c -27027/63391 :ref-storestack -9.835791762651112 #push.type.definitions.complex.Complex{:re -13, :im -29/55} :vector-savestack -1 :complexes-reverse "(2v7YQ#B76" -619355.0432306845M :complexes->tagspace [-33 -10 -46 -34 -9 -41 4 -39 36 -29 -39 -45 37 -30 -34 30 -38 -29 -24 -19] :boolean-yankdup 3979677N :complexes-indexof -0.31128899802481946 0 :chars-generalize -28.293296442134718)} :booleans-cutstack :snapshot-againlater 24746 :scalars-generalize :ref-save :b :char-min :tagspace-storestack :vector->set :complexes-build) -25335 :integer-totalistic3 10683/18136)} :scalars-sampler :vector-set -11427 4830341N :tagspace-valuesplit #push.type.definitions.interval.Interval{:min -28, :max 29.052953179465618, :min-open? false, :max-open? false} \G -43169 :scalars-cycler :scalar-dec :vector-indexof :char-equal? 25 :char-lowercase? :scalars-set :string-print 3.3037606615402026 :snapshot-cutstack 34 :complexes-first :code-atom? :tagspace-notequal? :intervals-contains? 4784613.887760319M -3050857.3724882593M :boolean->float -78934N :string-cutstack :tagspace-yankdup :char-tag :code-position :interval-flush :code-notequal? :set-rotate :intervals-pop 3 2 #push.type.definitions.quoted.QuotedCode{:value (:scalar-rerunall :string-first 2109346.117281409M 4887274N :tagspace-cutstack 41 :refs-shove #push.type.definitions.quoted.QuotedCode{:value (:ref-tag :code-insert (:intervals-vfilter :booleans-last :vector->code #push.type.definitions.complex.Complex{:re -28, :im 14/81} :scalars-generalize :intervals-flipstack 3629/7297 -501563N :scalars-save :vector-first :strings-return :intervals-remove (1658124N :booleans-tag :exec-yank :push-instructionset :refs-cutstack :scalar-notequal? :vector->set :code->set [40.46505113693854 -3.078196996723605 -6.342808432898785 10.605281299871969 35.32912339684425 -16.09440685763871 48.211474649219284 39.00519867227921 29.299631850775285 -44.10296993539917 -32.20849136405065 42.72463947258474 -46.28032082562233 16.048920583156928 25.270132412895023 40.24394621662091 29.613657955596494 -12.491782683647287] :complexes-savestack :boolean-tagstack 19.696960971721396 :scalar-tagstack :chars-as-set [28 33 -35 35 -23 14 -38 33 44 32 49 14 20 32 23 9 -24 12] #push.type.definitions.interval.Interval{:min 18, :max 46.78721191753084, :min-open? false, :max-open? false} :strings-emptyitem? :interval-print) :char-empty? :booleans-first 1.4882501435016273 15831/77306 3410.945196806184 :strings-shatter) :set-equal? :chars-tag [6 41 45 23 49 -21 -29 -46 26 21 -46 -36 -31 28 -4 -5 43 9 39 -28] :strings-concat :vector-echoall :chars-savestack 4408209.48878731M 1 :complexes-byexample :chars->tagspace :complexes-pop :complexes-cycler 3.1611674092119593 :booleans-return-pop :scalars-print :boolean-yankdup -35505/98149)} 18847/16422 :interval-echo 43337 -25.00567834602643 :char-yank :ref-pop :exec-do*range -4771/2534 (:complexes-liftstack :generator-storestack -1.7270345536450957 :complex-return-pop :refs-conj-set :scalar-ln \, :refs-generalize :char-store -13937 :code-savestack :scalar-rerunall [3.805504488839105 24.041875583843918 9.193690303285294 -2.606350837990888 -28.793054296765717 -12.839232094800664 37.36571587993288 -15.279951327800632 -27.344296395982713 -22.901850807532586 18.279227053964902 46.45185512726786 -42.82754588635799 -14.943742016755948 -32.511192070965734 -25.554091156137936 -46.91091411923123 -28.120512678580923 -49.38908963121056] :refs-conj-set :complexes-as-set :intervals-rotate (:tagspace-save :scalar-liftstack #push.type.definitions.complex.Complex{:re -20, :im 21/23} -3485188N \{ 24.85591959120633 -4340843N 46760.762016175315 :tagspace-tagstack :char->integer :intervals-later :strings-notequal? :complexes-pt-crossover 44.163170683830984 :complexes-vsplit :complex-yank :refs-empty? -29) :string-yank #push.type.definitions.interval.Interval{:min -5.352149137609743, :max 4, :min-open? false, :max-open? false}) :string-return-pop -1324582.133416765M -31.128641118424493)} :set-rerunall :tagspace-later :boolean->float [-19 41 14 46 -17 -35 38 -30 -2 -34] :booleans-storestack :exec-yank :strings-yank :generator-savestack -2 :intervals-generalize :scalars-generalizeall \S :ref-flipstack 23 :scalar-flipstack "A%:IG@a#su" :generator-counter 26949.96264706178 -0.8123228072937856 :vector-occurrencesof -782 #push.type.definitions.quoted.QuotedCode{:value (:code-flush "7.qz9Hk#7?" :scalars-save :k :string-rotate :refs-echoall :tagspace-lookupscalars #push.type.definitions.quoted.QuotedCode{:value (:interval-newopen :chars-intoset 32871 :boolean-tag :intervals-emptyitem? :ref-storestack (:char-in-set? 1847823.1436645966M :ref-tagstack :scalars-occurrencesof :strings-generalizeall :float-uniform :complex-notequal? :complexes-vremove :set-tag 2 :intervals-cutflip :strings-return-pop -48 :strings-store :complex-swap #push.type.definitions.quoted.QuotedCode{:value (:char-cutstack :booleans-generalize \% :booleans-againlater :strings-cutstack 363686N 4.949590188181528 :set-return -4.318960261212669 :complex-empty? [2.348569767124154 -0.4827718744588765 10.336098120827295 40.9401753196063 41.37839782343981 -36.973190636209495 -35.58079928888856 -13.28218318769796 1.8361009970960325 -20.332395190737184 22.977104581757104 -33.577031551860436 42.929531346194224 -10.734944519715185 30.432330688935707 4.067379933084382 7.543191285837601 -8.829151720977002 -23.84068555953628 -11.812474051011677] \! -0.5810508403509065 :vector-contains? -40.71042516769225 :vector-indexof #push.type.definitions.quoted.QuotedCode{:value (:chars-conj \. :scalar->asciichar :scalar->char #push.type.definitions.interval.Interval{:min -38, :max 35.36455670393674, :min-open? false, :max-open? false} :complexes-cyclevector :push-quoterefs #push.type.definitions.interval.Interval{:min -26.495068871284932, :max -8, :min-open? false, :max-open? false} -0.812122411836457 #push.type.definitions.quoted.QuotedCode{:value (3 :complexes-cyclevector :complexes-generalize :intervals-echoall #push.type.definitions.complex.Complex{:re -49, :im -8/29} :complexes-last :char-equal? :interval-yankdup #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re 45, :im 7/4} -1454496N :intervals-flipstack :tagspace-equal? :tagspace-scale :string-tag #push.type.definitions.quoted.QuotedCode{:value (4228032N 40 :vector-contains? \\ :vector-concat "O><y&K83CZ" -34.92229325769436 -44014/98573 (-3263836N :strings-equal? :set-union :char-rerunall 38904 :ref-savestack :strings-storestack :vector-portion #push.type.definitions.interval.Interval{:min -11.400021818146975, :max -11, :min-open? false, :max-open? false} -2 :scalar-in-set? :snapshot-flush :complexes-nth :strings-notequal? #push.type.definitions.quoted.QuotedCode{:value (:boolean-return -1236450.543550862M \) :set-intersection :boolean-rotate :k :interval-againlater :push-instructionset :scalar-ratio? 20 :chars-tagstack :string-removechar [-28 -44 28 0 -21 31 43 20 14 36 -31 21 -18 -21 32 2 -49 -41 -31 19] :scalar-log10 :scalar-ln :generator-dup :complex-swap :complex-storestack "BUsqT!`BdS" -1)} "Qznh!EBI}\"" #push.type.definitions.quoted.QuotedCode{:value (\i 274303.47113135643M #push.type.definitions.interval.Interval{:min -9, :max 36.32256886915964, :min-open? false, :max-open? false} :tagspace-swap -2 :char-print :complex-divide :vector-concat :complex-intoset :tagspace-lookupscalars :boolean-notequal? :complex-equal? :string-flipstack 4042147.2189353853M :vector-cycler :char->integer :chars-nth :chars-save :push-quoterefs :intervals-contains?)} :refs-swap :string-first) :strings-replace 42 27056 :string-echoall :set-cutflip :strings-contains? :chars-conj :code-echo :complex-parts :complex-parts :tagspace-cycler)} :refs-build :complexes-storestack #push.type.definitions.quoted.QuotedCode{:value (:k "=fvIs>sVS/" :string-replacechar :chars-flush \U 18 -4422810N [-39.463986912794795 -33.645573362308724 19.067866838657253 37.978717117609236 -9.963901631199853 24.873073608361935 -4.5226323768402 10.20201505777544 -17.114044834374965 16.351453013689436 8.403191453281636 -14.962461592954455 -44.410719054698376 18.857010634489498 5.2165598188286495 -20.633072575442057 15.172956904944883 -36.83866365736331 -28.332627447191516 -17.978904386412232] :scalars-pt-crossover \, "Bt%/=v&QqL" 2046140.6887417743M :scalar-cosine -49766/20663 :complexes-as-set [49.64209693953596 8.21200179915391 -41.73523553099202 32.043100046777724 -39.85969129197995 -29.14651822780835 -4.215017098372321 22.49277635625218 11.032477387146002 7.955822235560142 -36.49446433220693 14.039876139652591 -11.866251554025055 -33.16370972994544 35.89919535479197 38.992065121562675 28.704156543696044 -47.04536424039537 49.20858335365274 20.45594661007506] -2.928863102005248 :vector-indexof :scalars-store :refs-return)} :refs-rotate "i5v$0c?fWU" :exec->string 42549.12094979538 -39.28544395966068 :set-notequal? :chars-intoset #push.type.definitions.interval.Interval{:min -42.05059395262815, :max -1, :min-open? false, :max-open? false} :intervals-set [0 14 -49 21 -2 31 5 -35 0 -35 -3 39 8 -7 -26 -14 24 -32 -46 43])} :intervals-yank -47.712429113440116 :boolean-echo :refs-pop :boolean->set :o -1.4732155091375931 :complexes-rest :intervals->set :interval-divide -45485)} :string≤? 3148.166617421033 :ref-notequal? #push.type.definitions.quoted.QuotedCode{:value ([27 22 -48 17 -31 45 43 44 43 9 -4 -24 25 26 32 42 -2 -39 14 15] :string->set :refs-shatter :chars-vfilter :tagspace-dup :refs-do*each :booleans-return-pop :scalars-sampler :string-max :char->integer #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.interval.Interval{:min -11, :max 46.07379496763966, :min-open? false, :max-open? false} :intervals-liftstack :scalars-shove :scalars-last \/ :log-stackdepth :intervals-portion -23.717413712320123 -4365325N -4 :ref-dump-tagspace :string-conj-set :char-pop -3223709N :set-swap [-24 32 -40 -20 47 27 -38 9 4 19 -12 -14 47 49 -24 -7 -42 -27 7 29] :generator->code 17 #push.type.definitions.complex.Complex{:re 4, :im -27/73} 681223N)} :boolean->signedint :vector-yankdup #push.type.definitions.complex.Complex{:re -9, :im 7/16} #push.type.definitions.complex.Complex{:re -3, :im 5} :interval-return ([-5.873742160080056 29.39908048747668 -1.5187990256727915 -15.931752719182889 2.972488395968739 -49.7614592345766 -33.42986976291644 -27.864885909412685 18.43189097776927 -44.00007759798462 30.292519795651003 -10.455338053483487 -15.853248289293774 3.6856536468241643 -19.325000286372273 47.87722123515981 -2.976796083419096 -21.276471414559317 -8.941085376148095] :scalar-sign -4 "+RsszcL_1b" 34204 :chars-tag -3 :booleans-return \( :ref-flipstack [-12 31 7 3 49 -20 11 22 -36 -50 18 16 21 40 -15 36 -37 -18 -43] :chars-distinct (3303735N :intervals-do*each :complexes-indexof :chars-replacefirst -9/21271 [-13 29 -46 31 38 -4 -21 -34 -47 -35 -3 -48 3 -37 -48 30 -13 23] \p [5.498926749188769 -44.39271027583429 -12.091403146116441 -1.0901661460270802 31.699487522243516 8.517067187633842 37.756568199294236 -44.083737915185075 -30.356132231621867 -20.935105275816635 41.2021443487085 -0.43983208085865044 -46.41982139401533 39.7021329396016 -16.89577328953137 32.69709749627691 -27.626685999208377 -10.93047722717828] [14 44 33 -2 -48 -46 11 5 -8 -9 -29 6 34 1 36 36 37 10] -2.86772001492373 :exec-return :complex-as-set :string-return-pop :scalar-print :interval-flipstack :vector-empty? :scalars-equal? :scalars-tag) -1593738.1921238257M :string-replace :booleans-vfilter [35.633231572891006 6.759442572328155 37.67908275607006 14.209918121911187 -44.91867632265249 -26.16343413734907 44.93377328486223 -22.614007145302082 -42.75383213997842 32.184565756541915 45.72071704022764 -39.0574633153705 -25.549590477868044 -32.617993844973135 -45.467193026016595 11.018752708499335 35.11774351141142 -17.31725175297324 -27.614612051937016] -29375.872342907307 :boolean-2bittable) :i :refs-new -16.102808822018687)} \$ :l :scalar-equal? :exec-equal? :interval-cutstack :strings-later)} :boolean-arity3 :intervals-sampler :chars-conj)} "\\Y}2ZXlE;=" :tagspace-max :set-superset?) 16107/40472 (:booleans-echoall :snapshot-stackdepth "`,0VP3\"0`J" :string-swap #push.type.definitions.complex.Complex{:re -11, :im 45/83} :interval-return -4 :chars-storestack :complex-zero 1132552N -9973 [-39.11194780877929 7.553572849805214 45.36209999448094 44.79947657775175 14.54092304532493 -37.80844384532057 -34.20725902168826 -48.140092084255535 -9.771098744565222 -39.0284423983842 -23.229299202990596 31.141603643136705 -13.572217315296399 23.624822211062778 -21.68306905830909 -45.506038189098895 47.15930758931236 -8.191622448233439 11.845425628851125] :set-liftstack :string-flipstack :interval-include? "/:aP|zHRNi" :refs-comprehension :refs-pop [-41.9076604787993 -2.9275758126508293 -25.26829035507536 21.38440191897577 49.07098754843447 -2.848505797388256 32.970133604910174 27.8315278784396 -25.39140636841456 38.09315723304718 -6.074387017492732 -23.26273020642712 -10.145411153779179 -27.3823122625523 -12.46149351999157 12.000753277963717 -32.93196585497897 -4.2715779883303355 -34.58296186426285]) -2664123N :complexes-cyclevector :string-conjchar #push.type.definitions.interval.Interval{:min -27, :max -19.662340739297758, :min-open? false, :max-open? false} :exec-when :set-tag -49602.19353106976 :string-flush :vector-rerunall #push.type.definitions.interval.Interval{:min -42.06331980001477, :max -35, :min-open? false, :max-open? false} :tagspace-tag)} :tagspace-cycler :strings-emptyitem? :scalars-cyclevector (2054760N :boolean->signedfloat 419092N -30 :ref-tagstack (-26.34854533613139 :ref-dup :scalar-inc \& 1.0880449170609428 #push.type.definitions.interval.Interval{:min 45.35746426719494, :max 46, :min-open? false, :max-open? false} :code-contains? :exec-storestack :e :chars-replacefirst -21 (:complexes-cutstack 2.732848656667784 -23361.814178501107 :scalar-divide :tagspace-store :code-as-set (-163926N 31657/69337 :scalars-rotate :complexes-stackdepth -32674/61945 3 :scalar-lots :chars-in-set? :complex-flipstack :booleans-emptyitem? :interval-notequal? :code-position -1.2207485890558303 :ref-peek [47.31022800754077 -24.3371672114709 -26.012511619145716 -44.706432369844386 -27.42735901496346 -49.973358367398134 -13.267315813973248 -4.871216030201083 -30.002039392078807 16.06874571318795 -22.658349180366223 -17.53737366938593 25.37861309529994 16.886788710876587 31.199858727352847 -35.32200526340213] #push.type.definitions.complex.Complex{:re -15, :im -47/81}) :complex-cutflip :refs-rest #push.type.definitions.quoted.QuotedCode{:value (\h :complexes-take [33 -11 45 -47 42 40 17 11 21 -48 -2 -35 18 -26 -28 -36 45 -35 -48 2] 9424.13142022246 [22.65846334606141 -1.1726786473549282 19.266738232289526 -10.452923086584974 -39.634252365084635 -18.445585173637703 -49.47580941700777 -27.543230945843845 23.18247338694293 22.050548161913596 -7.504963407276321 33.00848223719231 -20.545615709876508 -23.31176591628552 45.56385943233401 -29.2627290065006 -27.116149205256136 26.259416802739636 -14.623044424509587 -8.938607320132952] :vector-indexof #push.type.definitions.interval.Interval{:min -21.822849816032008, :max 9, :min-open? false, :max-open? false} #push.type.definitions.complex.Complex{:re -17, :im 21/85} \x :tagspace-keyvector :complex-notequal? :scalar->boolean -2654282N \\ :refs-in-set? -2124056N (:strings-save :booleans-rest :refs-vfilter :refs-indexof :refs-in-set? :generator-againlater :scalar-rerunall :boolean->code \x :string-concat :boolean->set #push.type.definitions.complex.Complex{:re 41, :im 13/24} :complexes-cyclevector "Pt_027pd#Y" 23.00903633474293 :intervals-replace \( "$`EO\"6!+oH" 3) 11022/20765 :scalars-cutstack [17.27987831315403 26.485731511990338 5.394899449525035 36.41616106279588 -45.19071411579603 -37.517418292089474 -3.703670401352177 23.298147729289227 -20.60231628217768 47.29006454352327 -30.311386820360863 -12.728272347308575 -0.19731757141241246 -35.01200120884597 -39.17475728467477 9.623584701470477 37.59271893104271 -9.349692592879052 -41.45178352646958 -40.220563010789725])} #push.type.definitions.interval.Interval{:min -45.681988078037705, :max 15, :min-open? false, :max-open? false} #push.type.definitions.interval.Interval{:min -30.47617308144823, :max 4, :min-open? false, :max-open? false} :integer-totalistic3 -17 :interval-rebracket -0.9519869679831361 :complex-dup) :interval-yank :e 2.2256306708417997 :booleans-conj :ref-shove -0.6288430560454108) :intervals-return :exec-k :booleans-flipstack :generator-savestack -30305/48824 :char-flush #push.type.definitions.complex.Complex{:re -6, :im 28/17} :booleans-vremove :booleans-cyclevector :exec-pop -29604 :complex-infinite? :complex-parts) :snapshot-stackdepth :string-cutstack [14 18 26 -19 -12 27 4 -26 -45 -36 13 12 35 9 14 44 -37 19 -48 35] :intervals-first :string-nth ((:scalars-rerunall -1 10 :scalars-vfilter :ref-echoall 2420977N 4230507N :booleans-build :booleans-vremove :scalar<? 25.929217893224916 :scalars-portion -1 :string-last :interval-intersection :refs-storestack :b :scalar-inc) :set-notequal? 41.00086058347473 #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.quoted.QuotedCode{:value ((:booleans-againlater :interval-intersection :exec-dup :complex-make "riu6>igo/0" :vector-empty? :scalars-reverse :interval->code :generator-cutflip #push.type.definitions.complex.Complex{:re 11, :im 37/28} 18 :string-replace :vector->set "[w|8L,5.!$" :set-comprehension -12730/35183 #push.type.definitions.interval.Interval{:min -41.138737690527925, :max -37, :min-open? false, :max-open? false} :set-rotate :strings-dup) 35720 :booleans-remove :strings-equal? :ref-save 8 40697 #push.type.definitions.interval.Interval{:min -23, :max 37.82689897456095, :min-open? false, :max-open? false} \? :boolean-store :scalar-inc \0 :boolean-yankdup :complex-tagstack :p [43 -14 3 -33 27 -31 -13 -46 4 22 21 31 -11 2 -38 3 -7 -37 9 -39] 7732.446628325728 -28.3312948964652 -9451 :intervals-cutflip)} :complexes->code :set-yank :strings-concat :vector-storestack [4 -26 8 41 -15 33 -43 -13 3 14 17 31 -48 43 9 28 13 -18 22 -24] :refs-take (-30030 :complex-echoall -4417930.428636356M :interval-cutstack :complexes-savestack :generator->code :complexes-generalize 2235665.2812396986M :generator-store :string-yank :chars-yankdup :strings-shatter :complex-notequal? :snapshot-save -2747744N #push.type.definitions.quoted.QuotedCode{:value (\k :complexes-reverse :booleans-tagstack :code-save :string-againlater :interval-tagstack -3886135.589358799M -11 23562/83627 :booleans-butlast :interval-stackdepth :scalars-nth :scalar-as-set :boolean-and #push.type.definitions.interval.Interval{:min -6.345194513179528, :max 5, :min-open? false, :max-open? false} 1938672N [33.008060834249775 -10.631360030853067 -48.145219984529156 -5.188040763121904 1.2333881541414655 -30.50451135584543 -20.44074656036321 -30.229830774394628 32.728303283492835 -24.446708808037975 12.565711975250885 29.866013004292327 -39.486109655366775 -30.540061993399846 -46.96120339085016 19.17947866909435 -37.69103768500307 22.450799142075496 3.5516934091319072 -49.16099143415181] :boolean-cutflip \3 3886806.5319703706M)} :interval->set -3743864.288318488M [47 -26 -42 -43 42 -16 -29 -3 3 -39 40 -7 -12 -10 -17 24 -21 -19 -18]) :complexes-take :exec-tag :set-rotate #push.type.definitions.complex.Complex{:re -31, :im 1/19} :boolean-or :interval-rebracket -19.593718373796875 :code->string :complex-flush :vector-againlater -2010273N :interval-echo)} 32.451457470138095 :exec-while :scalar-integer? 3 "|Txwcn+h\"B" :generator-liftstack :refs-empty? :set-subset? 0 :ref-tagstack :string-notequal? -22607.3371808346 :tagspace-lookupscalars :scalars-cutflip :code-nth) 10628.68535904662 [-35.41776339515852 -43.36197037496534 -32.1408835063735 -39.22283959315165 -39.00468362424121 -17.22573761976568 2.5520604907734636 43.10674286640432 -4.25239009416952 11.674626223406989 -43.08086667815741 -7.814178475454938 -33.54244118140164 37.337633996675095 -40.94886067948964 -1.809884793460661 -44.60975627791487 39.799210871661 -4.684359351321113 22.272716172695525])} (:w :snapshot-cutstack :scalars-dup :tagspace-swap :boolean-notequal? :refs-sampler 2153/2078 :generator-return #push.type.definitions.quoted.QuotedCode{:value (1389396.0702724028M -36676 :ref-echoall :string-yank :string-yankdup [3 -21 39 -23 -34 19 -47 -42 -28 -37 39 6 30 -7 -6 -31 45 -27 -6 -38] :generator->code -1.5702623051103917 :strings-flipstack :refs-set [-23.574579618784608 -8.164435847786358 -4.061486872865039 9.09024664387507 -3.2090169355636036 -49.36224418327164 45.872878113067884 -35.8836075093945 -35.15770889940741 -24.12062742764911 -2.978314069428336 31.030449006575083 -11.378345443765944 0.7467336219814555 6.434792287960221 38.0848811847368 -29.65251449315933 32.151629460456846 -45.88496269425954 -23.322656654390993] :vector-conj-set -461808.85480033327M -11761.569926349213 :complexes-cycler :complexes-comprehension :scalars-rest :chars->set #push.type.definitions.quoted.QuotedCode{:value (0 :interval-shift #push.type.definitions.quoted.QuotedCode{:value (:ref-in-set? 4692374N 2836640N #push.type.definitions.quoted.QuotedCode{:value (-3.1001434077417134 :string-rotate :vector-return-pop #push.type.definitions.interval.Interval{:min -18, :max 7.2072196160056805, :min-open? false, :max-open? false} :string≤? :generator-cutflip -18 :char-echoall :chars-indexof :code-list [-29 -48 48 -49 47 -6 -40 -26 -29 1 -35 -49 4 -42 -26 28 30 -37 -44 25] [-46.60314709829024 -27.820457914461393 -22.891248341010318 -36.25591878169159 -11.833596793593259 -6.78478847635057 49.486915692145004 -12.52062311250937 3.046978036184811 3.4693803991815173 16.156974560875014 44.581907275467685 40.6893378329447 -35.94437333285359 35.81339913420291 -14.026007346976186 34.226502397692485 -29.078677478543035 -42.975843090557085 39.67384658903261] :vector-tag :interval-echoall :exec-storestack :ref-swap (0.6161313340446659 :exec-sampler :string-replacefirstchar -31011.31846240728 13134.848685704434 #push.type.definitions.quoted.QuotedCode{:value (:char-lowercase? :string-flipstack :vector-in-set? -0.5358956202631866 47 :exec-storestack :string-return-pop :vector-refilterall :complexes-yank 3 \i :set-cutstack :exec-as-set [14 46 -18 38 5 27 -40 -48 -22 48 -46 8 17 -46 -41 -4 -4 -2 12 -43] -6.00437187771864 :char-echoall #push.type.definitions.complex.Complex{:re -34, :im 11/45} :scalars-contains? 2887.8504272920836 :boolean-dup)} [10 -34 18 49 14 8 -45 23 -10 38 -5 45 -37 -26 34 36 40 44 16] :snapshot-save :code-wrap :chars-tagstack 42.34486860000908 -23949.2449798242 :booleans-conj #push.type.definitions.interval.Interval{:min -17.744886541188897, :max 35, :min-open? false, :max-open? false} :set-union :complexes-indexof #push.type.definitions.quoted.QuotedCode{:value (:generator-rotate :snapshot-equal? [29.73915899611073 -6.951456403082588 6.072426814800295 -14.69295976847603 48.407490965052176 38.236600590415236 -34.49866288886064 5.064631454486133 -26.782049879193725 29.20684153926632 -13.156250090442775 -43.8822346523627 -20.119381626837264 17.283853581138914 -12.845722718559927 -25.96479862526675 -41.029745608305824 12.493121409816474 -23.342856558751592 -4.883978694842071] :booleans-dup :strings-pop :vector-storestack :booleans-pt-crossover :complex-scale \d :string-setchar 13 6.034258259348334 :refs-vsplit :strings-stackdepth :push-counter 2 #push.type.definitions.quoted.QuotedCode{:value (:char-againlater 36 :strings-do*each "{ZSkwmScs[" -3 :tagspace-valuefilter :z :complex-shift 1.6665215773087105 :refs-sampler #push.type.definitions.complex.Complex{:re -6, :im 25/24} :snapshot-againlater :intervals-storestack [-39.49150741704459 13.205253073689462 -8.4772790159127 -20.527710150945587 9.687233790678832 2.9401856711351186 0.6050759462955995 17.323674359050344 49.260615321659344 25.023017172247066 -43.67544615082877 23.336248083962687 -2.960406798155347 -6.922623685851967 -25.963259927694683 43.5545560131778 39.94181305108188 34.149873532607046 12.504598530577724 -33.41648994522666] -1 :boolean-2bittable :booleans-emptyitem? [-41.92126107401056 47.83927862814268 -10.799745442165289 39.046885878669386 -13.080666924834446 -3.6911057627456074 15.447013441672851 41.27826757931349 6.585143202451086 -49.32681696975697 -14.767402366585301 -6.905961875327108 -32.16246320164041 -20.416325504334964 2.851721374767024 7.800415691071841 -1.2870160702620055 -46.92265765437206 -36.991657031065714 -9.767600911222239] :tagspace-max -28190)} :refs-byexample #push.type.definitions.complex.Complex{:re 30, :im 4/35} \>)} 1015949.7721700342M :e) :ref-print #push.type.definitions.quoted.QuotedCode{:value (-2311.438565755998 :refs-generalizeall :ref->set :strings-save :snapshot-dup :ref->set 4658854.364567194M :scalars-dup #push.type.definitions.interval.Interval{:min -33.73789915171462, :max 40, :min-open? false, :max-open? false} :booleans-echoall 10718 42047/50315 :vector-yankdup :intervals-last #push.type.definitions.interval.Interval{:min -46.38985299442189, :max -42, :min-open? false, :max-open? false} :code-first :tagspace-later -4291352.667493816M :r :push-cycleARGS)} :generator-storestack)} 0.6634282427794638 :boolean-in-set? :interval-as-set :ref->vector :scalars-last :booleans-length :scalars-vfilter :booleans-flipstack :vector-againlater :generator-save "/2k][Hf4wQ" :complexes-pop #push.type.definitions.complex.Complex{:re 28, :im -33/94} :scalar-flush 2147876N [-47 20 -38 -9 -31 42 15 -12 -48 -10 30 -10 16 -15 8 -44 6 -10 27 30])} :generator-stackdepth :complex-shift :complexes-emptyitem? 1.843783189843295 -3.923164478605851 [-0.7316916643720788 3.265448929576955 -46.530707216568345 20.700097355140485 -43.84263236407466 48.93909641541744 6.967842606853189 -41.72238674631016 10.853955793999404 19.07060431655306 41.78120637147087 -17.925689974844026 23.777261193112224 20.801060497279238 -38.310446704776645 4.206826543056998 43.21199609889642 10.991104661265105 22.07886408188537 13.729296344054006] :intervals-tagstack :code-sampler -31918 -3 -2305005N -46 :interval-store ";l:AUGBm?6" \d :ref-print :generator-dup)} :generator-rotate)}) #push.type.definitions.complex.Complex{:re 38, :im 37/82} :string-cutflip :tagspace-valuevector #push.type.definitions.interval.Interval{:min 4.412701968098496, :max 27, :min-open? false, :max-open? false} :refs-replace :boolean-save "$ZMh@}2K#$" :intervals-cutflip :set-tag :exec-rerunall :boolean->integer :vector-set :strings-empty? :ref-notequal? :chars-echoall :string-solid? -2065414N :strings-emptyitem? :chars-portion :snapshot-savestack :scalar-cosine :complexes-reverse :string-notequal? 5355.3539008714215 :strings-indexof ".(^gC:@c4{" :boolean-faircoin :generator-totalistic3 #push.type.definitions.quoted.QuotedCode{:value (:c :booleans-generalizeall :code-contains? 23.021882988647263 :ref-fillvector :chars-equal? #push.type.definitions.quoted.QuotedCode{:value (:refs-length 1528128.46016578M :snapshot-shove :code-noop [28.91398428424732 22.138927135135418 -10.61496031137694 42.30373672192448 32.455704196636574 30.389365371997428 5.85829915003724 -17.05160418019478 30.443049942745716 18.443453635074718 48.92393843352893 39.98780111410896 -17.169623123481074 29.40877600164066 -20.078883154494022 -32.44224407834481 -49.396546591450395 15.213071503394474 -45.62642177644638 -6.446599027156871] :string-flush :booleans-savestack :scalars-conj :chars-pop :boolean-arity2 \c 0 2914560.801486781M :string-store 3 :booleans-stackdepth :scalars-shove :refs-cyclevector "Wdc%D'oh2|" :exec-in-set?)} -1.1387225298850003 :strings-take -44.15406316176909 :refs-reverse 36565 #push.type.definitions.interval.Interval{:min -44, :max -34.28653186257692, :min-open? false, :max-open? false} 18754 "D/QCzu?U3c" :strings-storestack :scalars-generalize :set-cutstack :vector-refilterall -47801/88539)} :scalar-cutflip 2 :intervals-cutflip :ref-cutflip -1.0818940566232351 #push.type.definitions.complex.Complex{:re -25, :im -16/15} #push.type.definitions.quoted.QuotedCode{:value (:ref-save :vector-butlast :complexes-generalizeall :scalar-yank :refs-dup :exec-equal? :intervals-echoall :scalars-build [-14 -19 9 13 4 10 14 32 -48 -40 -29 14 -43 -9 -35 9 16 19 39 -39] 13820 :code-if -3636559.843450078M :boolean-3bittable :intervals-flipstack 23620/60169 :ref-lookup :ref-shove -3.9497404676236947 \U -1.0089073257831616)} :refs-cutflip :vector-last :complex-return :scalars-pt-crossover :intervals-occurrencesof 1 :boolean-save :booleans->set #push.type.definitions.interval.Interval{:min 6.173757008021738, :max 24, :min-open? false, :max-open? false} :scalar-echo :interval-overlap? :exec-return :push-nthref :boolean-cutstack :code-echoall :refs-pt-crossover :char-intoset :tagspace-storestack :char-stackdepth :complexes-last -38384.54351007795 -7.511183528064045 0.3646539239833917 :vector-take :code->string :j :strings-storestack [-5.41702332074496 46.94980433154808 8.392069603655415 24.899891047796274 -37.90176526789293 27.538676383301095 13.46260230519313 -34.0121456765844 4.952020533044774 -2.5839441627104307] :char-save 4338 :booleans-echoall :complexes-remove :string-sampler :refs-emptyitem? :generator-shove :complex-scale :chars-rotate :scalars-sampler 26053 1.9021831305954073 :booleans-yank :string-dup :ref-stackdepth :refs-conj-set :scalars-as-set :refs-later 4120568.8510231357M :exec-save :y :tagspace-swap :ref-pop #push.type.definitions.interval.Interval{:min -30, :max 14.86569517055392, :min-open? false, :max-open? false} 1.9135692248668503 :complexes-length -4233301N :strings->tagspace :intervals-yankdup :booleans-shove :boolean-rerunall [-36 22 44 -21 -32 7 -47 34 22 -38] :set-echoall -2.0107043156501616 :complexes-conj-set :refs-sampler :strings-liftstack :complex-print :vector-refilterall :string-replace :booleans-generalize #push.type.definitions.complex.Complex{:re -23, :im 18/65} 4.318491848072139 :snapshot-cutflip :vector-new #push.type.definitions.quoted.QuotedCode{:value (2 18 :intervals-conj-set #push.type.definitions.quoted.QuotedCode{:value (-3.4780115547585497 :complex-againlater :complexes-save :scalars-indexof :string-intoset :ref-liftstack :generator-jumpsome [-4.856830698335266 47.95617903920386 39.16156783976449 11.068492184837574 14.503478233630773 32.37473772876152 32.89602579962279 26.214822571634016 41.32340814913705 -48.76632509150832 -3.894523665175001 17.916863778993616 47.87647712648808 -45.77471495361248 -0.6677688844046159 -10.096081616299458 24.21883828092625 4.805960838905264 -28.95204505758201 5.244568494317839] 0.21648005212972166 :snapshot-save :refs-return :l :interval-reciprocal :scalar-modulo "n$x7T($K(i" 3286964.843434386M (#push.type.definitions.complex.Complex{:re -5, :im 32/41} :boolean-pop :complexes-build :complexes-echo :ref-yankdup :code-pop :snapshot-againlater :boolean-liftstack :set->set :booleans-replace 47 :chars-shatter -4303663N :interval-conj-set :string-emptystring? :code-yank :booleans-storestack [12.347623154873368 28.81285766465382 -1.42684219742479 18.378148876566854 43.04428609798981 -48.22555137112641 -5.742354774639516 41.54127709977162 -38.20902596559779 27.001008999741146 -32.31753285806619 46.12285212100791 -16.696970226639785 30.36818234805922 -29.13809520898519 -18.16194032704438 -30.375371666531326 -6.875508512980247 46.99768900687765] :booleans-first) :tagspace-equal? \6 -48309)} :boolean-return-pop :tagspace-comprehension #push.type.definitions.complex.Complex{:re 38, :im 32/63} :w :b :refs-vfilter :refs-rerunall :refs-take :strings-rerunall :generator-echo [5.981904162245776 18.243419989480543 -14.233674483367231 2.1063926916070272 20.536314029085347 30.579067020559847 48.08973448192384 -48.441809361679276 29.986258604154287 12.414057311760999 15.357885150275777 -6.254897105292358 -38.45364888448691 -3.859740733804827 4.793671577496831 -22.052298889885268 -2.630782212007034 -44.22721382481672 2.340093692009603 -16.26563390468857] :vector-reverse 418/4821 :boolean-echo :scalar-many [-6 26 -24 24 19 21 13 37 -47 -46 -47 -47 43 18 -17 -46 -45 -44 0 -20])} #push.type.definitions.interval.Interval{:min -25, :max 5.817099034002226, :min-open? false, :max-open? false} :code-yankdup :code-do :string-flipstack :scalars-replacefirst :chars-againlater :boolean-not :string-swap :strings-set #push.type.definitions.complex.Complex{:re 21, :im -11/62} :interval->set :intervals-generalizeall :t :b 13.491460592904005 4.546952726975231 -4.42819324337076 \( "k$\\U],*\\ZQ" 39 [46.77783545218966 -23.69734023370029 39.488976112670954 30.402781526219727 -45.18127507529199 12.393975886971312 8.133294469367968 -32.37799594410957 -45.155367933193425 -30.419659529966058] 2.11567043712082 -18 :chars-shove :complex-return :booleans-last -12.42652711409017 :interval-storestack :snapshot->code :scalars-tagstack 28809.328169742497 :booleans-first :complexes-cycler :code-return :booleans-cutflip :strings-intoset -832180.1640910706M :scalar-yankdup 3 :booleans-cyclevector :complexes-store [-27.27651393856405 -43.542823247839415 23.421873771486645 -32.284978292227436 41.02842467022154 -31.127703317558396 -16.981985861051008 30.667870226588875 -46.54047969361487 11.487496825295771] #push.type.definitions.interval.Interval{:min -36, :max 26.458398478895262, :min-open? false, :max-open? false} :char-echo :refs-new :strings-tagstack :interval-save :exec-do*count :scalars-as-set \z :code-cutstack -3 :tagspace-tagstack 4.198064848652358 :intervals-yankdup :booleans-savestack :tagspace-shove :complexes-shove :scalar-fractional :float-uniform :booleans-pt-crossover :intervals-shove :vector-indexof :t :code-swap :boolean-yank -40.90843570398259 :string-save :chars-vremove :scalar<? 1956218.7899978757M :tagspace-sampler :strings-new -39288.544269391205 32128.268260478217 29032 3.0287140429384554 -579778N \g (:chars-yank :string-replacefirstchar :u :strings-concat :complex-echoall :ref-rotate \' -25540.553229442452 48974.339692773676) -6 :booleans-generalize :o :intervals-conj 638592N -16513/49577 #push.type.definitions.interval.Interval{:min -41.15986856048828, :max 21, :min-open? false, :max-open? false} :code-subst 4161166.017422853M -33.80358130587665 :scalars-sampler :boolean-equal? :exec-againlater :scalar-in-set? [-22 36 16 37 8 39 22 -40 37 -23] #push.type.definitions.quoted.QuotedCode{:value (:e :snapshot-tagstack :strings-cutflip :complexes-pt-crossover #push.type.definitions.complex.Complex{:re 32, :im 26/21} :code-container #push.type.definitions.quoted.QuotedCode{:value (:intervals-length 3828/10297 :complexes-indexof :complex-later :snapshot-stackdepth :scalars->code :scalars-tagstack #push.type.definitions.interval.Interval{:min 5.296176979381862, :max 44, :min-open? false, :max-open? false} :ref-as-set -4065160N :vector-pt-crossover -1.2508836129190923 :ref-in-set? (:scalars-filter :tagspace-return-pop :string-replace :complex-stackdepth -3 #push.type.definitions.quoted.QuotedCode{:value (-1 :booleans-intoset :vector-echoall :scalar-in-set? :char-store #push.type.definitions.complex.Complex{:re 27, :im -2/19} :boolean-intoset :scalars-cyclevector #push.type.definitions.quoted.QuotedCode{:value ([-23.320643158556965 7.299949172999476 -47.59876351204776 -29.111765406509527 0.48671967901032787 -30.211942620699617 -30.13728494420407 45.833869820451795 32.153399734142596 -4.853366296704067 -38.21321362233149 -0.43610618979973736 -19.491618936151532 12.397528887456524 -30.430727632009702 -44.094195140411415 34.912010860861 -32.77229340769189 8.657729924141108 46.541396694575255] 1.3915471935710535 :chars-nth :complexes-replacefirst -991.8737427350934 (-3223 36722.4573127804 :snapshot-cutflip :complex-liftstack :complexes-liftstack :boolean-pop "6vG0<hp6Ki" [24 -48 32 39 38 33 -42 28 -50 -13 28 7 -26 20 -11 2 -38 -37 29] [20 -16 -39 -1 -30 -9 1 42 -41 2 -1 -29 -22 -45 43 46 12 3 -40] #push.type.definitions.complex.Complex{:re -47, :im -19/72} -21879/36505 :string-tag :snapshot-flush :tagspace-scale :scalar->set :vector-portion -20339.837796751646 ([-3 37 1 24 19 0 -4 -47 4 -14 33 -10 -4 -38 23 32 -32 -13] (:vector-reverse :scalar-integer? :scalars-in-set? :h 27019/78282 :vector-flush :booleans-intoset :code-sampler [13 1 -25 3 41 8 -33 29 48 -47 -14 43 41 15 30 13 -35] :tagspace-values :string-liftstack :refs-vremove :complexes-shatter :exec-sampler "r-!{L;%GaM" :string-in-set? :print-stackdepth) -2 "Z$B]r\"PpYr" :tagspace-filter 43.75268258371831 0 :tagspace-rotate \Q :boolean->signedfloat :snapshot-begin :generator-stackdepth -4 :strings-build :o :strings-print [-8.151287000667807 37.26267986780738 -41.177588828476495 -8.303638509321708 26.4889613452749 -34.66333794338132 -37.77652474041064 2.9081992417487683 -33.87323820798187 -44.94239677214558 16.99362104409707 20.383090694911004 16.062323519744297 8.659476715630213 26.04223798531173 4.790936372554867 8.907668424993673 -21.00907810915921] :scalar≥?) :refs-rest) 505.9619100645359 :push-cycleARGS -4988332.158143075M \8 [-34 -7 22 28 45 16 -33 29 -45 19 -49 22 26 27 22 16 29 34 -44 -37] :scalar-as-set :interval-storestack :refs-sampler :ref-print :chars-vsplit [12.549121649601815 0.13264331541832064 15.533967749381787 39.4113252992249 -21.806574302494962 -12.224186756153244 -45.7528662301901 -19.07776488458882 29.38418097944765 24.450073545296632 -35.30842589138046 12.567456446090219 39.005408242914754 35.18595994465173 -16.26739996152967 28.411584219624416 -47.20582297330404 -16.627668389282988 -5.940222087036496 38.5070172159449] :vector-first -597300.5320146009M :interval-storestack)} #push.type.definitions.interval.Interval{:min 4, :max 23.183100129812374, :min-open? false, :max-open? false} :snapshot-liftstack :set-liftstack #push.type.definitions.interval.Interval{:min -3.2199331931171997, :max 31, :min-open? false, :max-open? false} :vector-build :chars-emptyitem? :scalars-savestack :intervals-notequal? :tagspace-min -1.5647820181045669 :complex-flipstack)} :set-flipstack :tagspace-empty? -0.5944888755337647 :booleans-generalize :refs-cyclevector :set-conj-set :scalar-stackdepth 48.93662651908919 :string-tag :booleans-rotate :code-liftstack :complexes-comprehension :interval-shift) :complexes-yank [12 8 24 28 38 -19 49 -1 37 3 7 -43 -36 -3 27 -5 0 -41 -6 34] (:booleans-equal? 4749137.93217469M :generator->code -4 :vector-indexof ("KY|$jH})$G" :complex-dup "D^xc*5<t!*" -17.993607378512763 :ref-savestack :booleans->tagspace [-26 20 21 -21 5 -31 29 -41 26 24 -25 18 -41 -23 -25 -4 29 15] [-33 23 30 33 25 11 24 23 -18 43 -19 29 -27 -44 31 20 -50 30] :set->tagspace \* :c 29 :strings-reverse :ref-empty? -2169624.7461793763M :generator-reset :code-echoall -29) #push.type.definitions.complex.Complex{:re -13, :im 4/95} 1.5600711158791372 :complex-make -28 :interval-save :scalars-last :char-uppercase? 5648/8943 2 :set-print :booleans-emptyitem? :vector-swap :snapshot-save) :exec-stackdepth :scalars-cutstack :chars-reverse)} :ref-rotate :string-store :booleans-remove :booleans-contains? :refs-butlast :strings-cycler #push.type.definitions.interval.Interval{:min -23, :max 22.55462302884355, :min-open? false, :max-open? false} :strings-in-set? [4 -29 24 -36 -31 16 46 -18 30 -30 24 -22 -34 -7 -1 30 -30 -33 -4 15] :ref-return -20.787561527138664 "svKA:1ulq5" :vector-echo)} 5340/4601 [37 33 20 21 -35 17 -8 -6 45 9] 4.556759627510072 :interval-echoall #push.type.definitions.quoted.QuotedCode{:value (11043.763657076546 #push.type.definitions.complex.Complex{:re -5, :im -3/49} -556234.8436886314M -0.9713446260880945 :refs-flush :strings->tagspace -6987/54508 :scalarsign->boolean :string-max :strings-stackdepth :booleans-vremove :vector-in-set? :scalars-length :strings-rotate :scalar-tagstack :snapshot-flush :exec-string-iterate -1556/15537 :scalars-fillvector [19 -48 -42 -11 -10 5 -26 -21 -1 29 -44 -29 -18 16 34 14 -10 -34 -2 -38])} :set-savestack :s -23068 :code-empty? 6.574104784578907 "zE1F.1@;DN" :scalars-echo :complexes-return :ref-savestack :scalars-swap :refs-fillvector [36.07943503992905 -3.7498911283532124 -49.56180588412617 45.27838677688605 25.950092931294876 13.02771261876002 49.28618843075253 6.366801946538722 44.4991568566315 23.430058667345094] :scalar-flipstack [26 10 18 -31 27 -34 4 9 -42 36] :chars-last :tagspace-keys ".F1N>_2oXb" [-5 -12 -7 -4 47 29 -7 -39 2 -50] :refs-rotate [-23 -2 45 -42 -24 8 -47 32 43 23] 144905.44854461867M :v :complexes-intoset #push.type.definitions.complex.Complex{:re -8, :im 32/39} :w 0.6274729012300906 :intervals-take :refs-savestack :scalars-tagstack :scalar-conj-set :code-flush :code-append :scalar-sine :strings-emptyitem? :string-splitonspaces :h :code-flipstack 871950.5695114294M :interval-reciprocal [33 -5 43 47 -27 37 -25 6 -25 -47] -12721 #push.type.definitions.quoted.QuotedCode{:value (:boolean-savestack :scalars-stackdepth -4.532940259676177 :scalars-cycler (-45.31103949005262 :intervals-last :code-do*count #push.type.definitions.interval.Interval{:min -3, :max 44.228647998097586, :min-open? false, :max-open? false} :scalar-tangent #push.type.definitions.quoted.QuotedCode{:value (:char-notequal? (:vector-equal? :complexes-rerunall :complexes-againlater :generator-tagstack :complexes-echo 38328/17503 3.877468761959868 :chars-new (4692842.268696995M :snapshot-store :refs-cutstack -2 -4.986834802513393 :vector-do*each 40008 :char-uppercase? :chars-remove :v [-2.939723292015927 7.62118230105515 -34.698839272863495 -49.8486418756744 -7.097983683798667 -12.533441035373713 -36.751149557643025 -14.924965703890706 18.066994077798498 10.135184986517132 -34.584023053558724 -33.430986480016884 -28.293312151623063 -41.186843026818025 -42.7939996052351 9.177557054031539 -9.711914816569013 44.36144897127551] :boolean-storestack :intervals-intoset -20472.66148997302 :refs-print \Y #push.type.definitions.interval.Interval{:min -49.38296708176683, :max -33, :min-open? false, :max-open? false} :strings-do*each) :intervals-portion :boolean-conj-set :snapshot-againlater 36200.63919195092 14512 [13 29 18 4 -12 35 14 -4 45 -43 21 -41 -37 -9 1 4 -39 -37 22] 10990/93253 :exec-flush 37288/5057 :generator-stepper) "cH=}\"d<l_L" :char-intoset 2800922N :interval-yankdup (:booleans-rotate #push.type.definitions.complex.Complex{:re 35, :im -42/71} -46049/28720 13767 7830/86131 \{ :intervals-length :string-againlater :scalar->set :tagspace-tagstack :tagspace-merge :l :complex-print 35367 [-43 35 -4 -43 46 36 18 -18 41 6 21 43 30 -48 43 41 -11 20 -48] :strings-yank :string-tagstack :exec-echo #push.type.definitions.complex.Complex{:re -32, :im -1/43}) :chars-tagstack [35.09166468898121 44.75194138044763 -39.12046097269713 -23.51700820553788 -47.767645570505366 33.629142052738445 -43.01955786418466 29.17930435664833 -0.9592680977834149 -31.398015995348615 34.416052238180654 -23.902565427322852 -37.81390358442046 32.97755628987585 -9.618273029323035 -10.482034606787224 -10.534501970996715 6.753240908212618 -21.138629903786168 -16.225588363771806] [-10.979838324295933 -27.787057990487963 28.526074622394887 -20.771263598533242 -48.95887212266361 -0.17552059337874937 -42.31824918730547 34.61944028929459 24.507547410916303 32.932838846016395 -4.180529692375586 0.18250310030036587 17.753534555534884 27.279999394293014 1.9209545956997403 -21.86662150403704 5.156413242729741 39.667308378371885 27.528438656867394 24.751043570954394] :chars-yankdup -20931 :interval-storestack \@ -2333/4086 :set-flipstack :booleans-remove #push.type.definitions.interval.Interval{:min 23.97234008749558, :max 24, :min-open? false, :max-open? false} :boolean-later :set-return)} :tagspace-lookup :strings-vfilter :boolean-shove :chars-tagstack :chars-replacefirst :scalars-tagstack :intervals-conj-set :chars-store :tagspace-max :interval-reciprocal #push.type.definitions.quoted.QuotedCode{:value (:booleans-generalizeall :integer-totalistic3 :push-storeARGS :code-yank :chars-shove 1435192N -4183659.82408988M :scalar-echo :set-later :complexes-notequal? :strings-length :strings-shove 20284.7892251562 :boolean-equal? "FdTolP3SGJ" :set-intersection -3.8463620351681493 :strings-last :tagspace-pop -535751.0059362315M)} #push.type.definitions.interval.Interval{:min -21.039511774989528, :max 47, :min-open? false, :max-open? false} :d) :interval-multiply :string-shatter :interval-storestack #push.type.definitions.quoted.QuotedCode{:value ([-23 -20 -4 -13 -25 11 -45 20 16 -11 7 -34 -50 -33 28 -7 -34 -40 -8 -38] 22.703324414524033 8831/25156 :booleans-reverse :strings-emptyitem? :booleans-tag :complexes-byexample 3 (46306 :snapshot-swap "`e#=zO^o,C" :tagspace-savestack :chars-empty? :scalars-replacefirst :intervals-emptyitem? :refs-new :complexes-againlater :scalar-cutflip "l1FF9\\&w4^" :chars-save :intervals-replace [-12 32 -40 -8 40 44 44 -9 -41 49 16 -16 -43 44 29 -45 -21 -35 47] :scalar-storestack :scalar-echo :exec-in-set? -28.971321427434095 :vector-refilterall) :booleans-intoset :ref-fillvector :char-yank [47 43 -14 -27 36 -25 -38 5 -30 -17 -30 -49 31 47 15 15 0 -35 46 -32] :complexes-as-set :scalar-yank :string-reverse 2637053.677169008M :scalar-rerunall :intervals-dup -4.460842675025304)} [-37.900736806270956 -16.44890815023846 -33.285124642507995 32.78358813159046 17.77036200575212 -0.1283684604569757 -2.32301448168527 29.310008598378374 44.190553935503885 -21.034282472546984 41.916850345064475 45.13284001325941 17.55540132572051 9.62060863180907 -11.992742014375267 -21.14753194118316 2.141606386247311 -16.94085681121176 -32.519819057775905 -9.128576200423787] 19212.681601399876 :generator-jumpsome :complexes-flush :booleans-notequal? 1.505848298970652 :o :char-flush :complexes-portion :boolean-notequal? #push.type.definitions.interval.Interval{:min -37, :max 17.85372462509372, :min-open? false, :max-open? false})} 25407/95213 :strings-print 1 :boolean-echoall :scalars-echoall :tagspace-rerunall :ref-equal? #push.type.definitions.quoted.QuotedCode{:value (:refs-shove :complex-yank :ref-cutflip :strings-swap #push.type.definitions.quoted.QuotedCode{:value (:char-save :char-in-set? \x #push.type.definitions.complex.Complex{:re -46, :im 1/94} :scalar-rerunall 38146/95681 :string-replacefirst :exec-comprehension 2 :chars-yankdup :intervals-return :string-rotate :intervals-occurrencesof 30.495373669599402 #push.type.definitions.complex.Complex{:re 7, :im -13/19} :chars-conj -364645N [-9 -10 20 16 -17 2 25 -6 45 35 -18 16 19 21 -32 -30 -43 46 -33 15] :boolean-not 3996569N)} 25 [-45.85005536725313 2.7413786851823616 1.6259146130954605 1.5534889706504487 -33.62442868297008 34.835452847720035 26.473149052587956 12.299948370862722 4.95992040949146 33.319147374401794 21.38738293302609 -45.25892128589687 -23.903156433825945 35.677686082871006 -26.48379973831321 47.41581954913747 -42.59767896922462 -47.222967286694804 36.527345992310956 2.874278883343564] :tagspace-valuevector :char->integer -4 :vector-rerunall #push.type.definitions.quoted.QuotedCode{:value (:string-in-set? :refs-flush :string-concat [6.5926519760804965 22.075479031890694 -16.68934557235483 -40.10879867347441 -19.48282110695555 11.726376153742798 9.396763240935634 -24.458335229248064 7.247785956701925 -16.855385569435974 -9.96393695033305 30.79512604988453 47.02937452546075 -39.25227511550179 39.286174631608574 -4.092803614960516 42.14140107792505 -45.14386426067739 36.86190990182632 -13.92663539100387] :complexes-in-set? :strings-liftstack :interval-flush :ref-rotate :intervals-echoall :code-reduce :chars-yank -27.552315856204036 :set-as-set :ref-cyclevector :code-swap :complex-liftstack :code->set #push.type.definitions.interval.Interval{:min -11.586570238191719, :max 38, :min-open? false, :max-open? false} :intervals-replace :scalar-save)} :scalars-new :scalar-store :o :refs-shatter :vector-distinct :chars-as-set [-19 -41 40 -18 -43 23 -14 27 26 -19 -42 -50 43 -5 -42 14 25 -20 -28 -49] [5 -13 -44 -33 44 -34 34 -9 -48 -10 10 49 22 3 -9 41 -27 43 33 -18])} :string-conjchar #push.type.definitions.complex.Complex{:re -17, :im 43/83} :intervals-print :generator-echoall :char-echoall 3400317N 4738186.653368227M :interval-liftstack :string-print -4 :scalar-divide :m -3874057N :strings->tagspace (:vector-tagstack :string-butlast 0.12578484351803887 #push.type.definitions.complex.Complex{:re 28, :im -41/76} #push.type.definitions.quoted.QuotedCode{:value (:a :vector-store 2.245843523413563 :refs-last :string-comprehension 43813.680878759595 [-17 -19 -30 21 31 -23 2 -41 -9 -47 20 6 42 -35 -40 24 0 30 -38 5] :v :complexes-reverse "5A>Q/CgSvH" :scalars-remove :booleans-generalizeall :ref-later #push.type.definitions.interval.Interval{:min -31, :max 9.76384787806056, :min-open? false, :max-open? false} -13593.573535485019 38.15616846760051 27.109421777495697 :boolean-tag (:tagspace-sampler :interval-newopen :booleans-vsplit :complex-conjugate [3.195281438506605 -6.0121438815736425 -25.562345103016092 -2.8710713905406777 13.70284238197771 -15.970410093315145 -44.49926489370705 23.3796086262972 8.72017658581563 0.4949195977689058 39.94169857369303 33.84247606157331 -38.79214906027867 30.42934080239985 25.316638575129787 -0.3477157579624759 2.8160286426407097 -40.13776752017017 -21.621171611762378] :generator-swap 4696271N [-37 -50 -17 -38 36 40 14 7 -5 -27 -27 -35 -28 -37 42 -36 16 -50 14] -4407627.744049604M -14648/20211 :vector->set :intervals-byexample :string-contains? :complexes-vsplit :strings-echoall :vector-shove [26.285436940946667 -30.09487295776928 34.67628626586115 -15.6446885482031 20.803939774318323 -16.078956087635653 -26.17074516453658 43.16782743824339 20.734111281022976 48.14898383706934 39.99905995640455 -13.027581335231467 -26.645093575404033 -33.70672851455415 36.16192493093678 46.30666590214493 25.922070018199364 -12.71647869266831 0.16409137570444443] :exec-do*range :intervals-indexof) :complex-conjugate)} :exec-flush #push.type.definitions.complex.Complex{:re 19, :im 19/2} :chars-againlater :booleans-concat) 26477.06535079243 :scalars-later :intervals-build [-21 -36 -35 41 34 -32 48 -46 42 -38] 36165.47180428835 :vector-items :booleans-items :boolean-in-set? 1076573.0265725888M #push.type.definitions.complex.Complex{:re 8, :im 39/22} :char->integer :booleans-replacefirst :strings-length :string-replace #push.type.definitions.complex.Complex{:re 31, :im 3/2} #push.type.definitions.complex.Complex{:re 44, :im 37/53} 710181.1590026356M :print-space :scalars-occurrencesof 596937N :boolean->integer [16.084061683150168 41.087160677929205 9.683311430688768 -15.38173109697636 1.0250491650229705 -34.73780870518674 -29.126555978755164 26.112780857696066 -11.216643252401937 -34.493667712596206] :tagspace-cycler :booleans-yank :ref-as-set :tagspace-shove #push.type.definitions.interval.Interval{:min -43, :max -38.159672950948895, :min-open? false, :max-open? false} -12895.341656154771 :string-echoall :string-save \_ #push.type.definitions.quoted.QuotedCode{:value (:o #push.type.definitions.quoted.QuotedCode{:value (:intervals-take -47.458288690366466 \3 :tagspace-scale :set-cutstack :exec-tagstack :tagspace-lookupvector :strings-store -10598 -3.1808028643573194 #push.type.definitions.complex.Complex{:re 29, :im 31/60} :exec-rerunall 4.978759114252037 :tagspace-keyvector :strings-concat :vector-pop :scalarsign->boolean 1 :vector-stackdepth :code-comprehension)} :scalars-remove :scalars-cutstack 2 "2`6/LcDrct" #push.type.definitions.quoted.QuotedCode{:value (:booleans-vremove -9381.361874869275 #push.type.definitions.complex.Complex{:re 2, :im -1/20} -4449168.1971599M 39.14652288397144 :scalars-store :complex-pop 4169/15255 :w \m -49 -263/444 -172042.50530443527M :scalar-ln1p :interval-return 37 :scalar-round :intervals-cyclevector :interval-in-set? :ref-storestack)} -2919360N \f [-35 -16 -46 21 6 48 -3 -34 -42 46 40 8 30 44 -46 7 -33 15 19 9] :generator-cutflip :string-first (29.564117766790304 :string-rotate 4.983946244902693 :booleans-tag "Bva`1>sYsW" :booleans-butlast 4 :intervals-tag :chars-remove #push.type.definitions.complex.Complex{:re -27, :im -36/59} :chars-sampler :exec-save :exec-notequal? ([-26.375526199173528 16.032033207356918 9.36498810825227 7.30324704013934 -37.885592813014426 -33.63272244924811 -15.33791719684308 17.828254858977573 -37.83924948605415 -44.552977379692074 -46.169652926307016 5.279266309963404 14.456097930240787 49.9057320323289 10.718803957593906 39.869815221387356 -20.499840947093485 -22.07395026568342] -10 :generator-rotate -3470729.0831812685M :interval-tag :boolean->float :vector-cutflip :scalars-occurrencesof :generator-return :string-notequal? :set-rerunall :booleans-take [-26 -15 19 -45 -16 -16 -27 -5 0 -5 13 20 -5 34 3 -36 22 12] #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.interval.Interval{:min -6, :max -5.231096172058926, :min-open? false, :max-open? false} [35.312122756128545 30.16111117675095 -42.54047510913024 -37.272413291535464 -44.033674900140255 -27.090625651238177 24.693954534964234 -39.82175574682181 37.27603838795382 -27.986945854527423 -12.985742065677421 -1.1540247737253608 27.00039248703547 -18.885592962852215 -43.778562532283246 20.65318456071438 6.951073437742181 29.497680863019212 16.544739813430994 -26.24931589478462] :refs-do*each :string-emptystring? \p :ref-return-pop 922929.6416811431M :scalar>? #push.type.definitions.quoted.QuotedCode{:value (:interval-crossover :string-min :complex-make [-43 -39 45 -2 -2 28 -16 8 -39 16 -30 10 20 -47 21 -15 33 -20 16 35] :exec-echoall :char-return -18869/48131 :chars-first 4890322N #push.type.definitions.quoted.QuotedCode{:value (\D [-45.92607232582204 33.93650195900733 -20.63785768892754 -28.790836854735424 -45.84615985837455 31.165907810653962 -30.978232726802545 48.35355596399647 27.350589092182474 45.36015745515543 -45.00337898687562 -49.99108725089668 -5.41205308719195 13.58547868088219 -36.908595313607286 19.629953202977873 23.69454779871279 -23.488162314559435 48.65227559404839 15.210937959808973] (:complex-multiply \C [-46 -40 41 19 -25 5 -3 -32 13 2 41 -38 -4 -2 37 -19 10 29 -19] :tagspace-offset :char-shove \r #push.type.definitions.quoted.QuotedCode{:value (:set-dup -4 "w.g,VY|wo8" :booleans-last :snapshot-liftstack :chars-flush :scalars-replace :strings-swap :refs-portion :tagspace-valueset :intervals-byexample -38981 -35.52714737019677 :generator-counter #push.type.definitions.complex.Complex{:re -21, :im 19/7} #push.type.definitions.interval.Interval{:min -38, :max 47.7653732739347, :min-open? false, :max-open? false} :boolean-xor :tagspace-yank :vector-equal? :code-yank)} [-35 5 15 -49 4 12 -14 -20 -50 10 -49 -43 -49 3 44 -34 28 -18 45] -1255/1013 24653 :interval-reciprocal \u 34787/56319 [16 3 -44 1 38 8 12 -40 25 6 4 3 -20 -17 -14 -28 5 20 49] #push.type.definitions.quoted.QuotedCode{:value (:strings-againlater :char-equal? :scalar-float? -4457995N :d 9.565845067367626 :refs-vremove :intervals-new :char-dup 3308676.28786142M :vector-swap :complex-infinite? :scalar-sign :interval-liftstack :ref-known? 2 :complexes-vremove 4519261N :chars-cutflip :set-notequal?)} :string-concat :set->code :set-equal? [-22 43 22 46 -36 0 29 35 30 25 -3 -10 -20 -16 -4 -43 -4 -23 0]) :intervals-do*each :scalars-echoall :scalar-few :strings-butlast -23 :exec-equal? :scalar-subtract :char-digit? -37840.7049359574 :string-yank -36918 :code-atom? :strings-length \I :char-lowercase? \J :complex-as-set)} -2 :snapshot-end :strings-tagstack ([33 0 -50 -15 -20 -16 2 48 -31 43 -5 -30 2 49 -34 11 -36 10 -20] 45903 "6BW&hvBQtV" -2.3107986456713925 :code-stackdepth :interval-scale :complex-shove :f 19.903814529003512 :strings-butlast :scalars-items :refs-sampler :boolean-yankdup :intervals-occurrencesof :tagspace-valuevector -12 506/1875 (:scalars-generalizeall :set-comprehension 0.5204406413677809 :set-store \l :code-flipstack 7357/8259 :code-do :vector-build "SrL0/\"7/b'" 33684 :complexes->tagspace -1 :set-againlater :complex-add :refs-comprehension -5 :tagspace-keys) 4881349.0835026745M) :set-pop \; :complexes-set 4818296N [-17.364086094849718 16.34877365062796 5.508971502882289 28.529174212267748 33.87824057709339 39.24975207928114 26.576380277760464 48.17751690058381 -43.55849143825306 -47.928274157932215 -0.09264148371114089 49.166961886702495 2.8621184857397637 -41.97887389528052 30.715698720799352 -2.065854881035797 -3.3260666326248014 14.284264197119484 -28.949765664216486 40.270913728116795] :refs-againlater)} -40 #push.type.definitions.complex.Complex{:re -33, :im -3/88} :strings-byexample :complex-zero :vector-shatter #push.type.definitions.quoted.QuotedCode{:value (:scalar->set :strings-in-set? :complexes-sampler :scalars-generalizeall 705/12457 :booleans-as-set -1245129.610404885M 16895.000718719573 :intervals-concat "eY<J/qU#9P" -37 :strings-butlast \4 :tagspace-store :ref-liftstack :char-empty? 21435/9431 :string-removechar :interval-pop -30005)} :generator-flipstack :scalars-last [19.650874801525305 -6.010047800547447 29.923522338522275 -37.364007889997595 17.323309948160755 -0.07388619939116126 -25.45655052332879 -43.93379868107197 43.11813548381171 28.43916258735804 12.37989052779799 49.18392362516292 -30.358728264716163 -5.0149061548528024 26.158020560406854 13.844690439995468 34.67876151549369 39.367607686177635 15.503644869473817 40.76318826450243] -19596.773269966907 4719294N)} :complex-stackdepth :scalars->set -19658.80393346178 :vector-portion) [47.6358784065749 -13.104625446178474 16.049166913584727 24.434629900215185 37.91448521265514 -22.43965652618507 -3.0961062673707147 -21.360846468689665 -2.1068193864158573 -43.03247058470095 -47.344478707099036 -47.968681877067276 -20.349107150286315 -23.6887186781916 3.229817074490718 -48.32515384438858 -30.492924572727965 -44.42875351912443 47.5865249855095] :booleans-take [-20.44914045066507 20.872007730501778 -35.092038403124214 26.34454475014445 -0.16739760335996579 43.41320349009344 22.112256420074843 -8.56052666805325 -14.11210653261373 -0.2847990026672349 -20.329768961928607 32.30758175152569 48.18517338428936 -47.94900667009845 49.960119689249936 18.32110729299866 4.032313509400801 29.437992586112998 -17.674529578198452] [-19.207198916904964 -32.6335700743103 24.967308569956614 -25.276568576500747 -1.4154104259093359 -18.665984943836822 -2.062103267606595 -17.50242104157624 23.848878903779664 -9.632951183436859 -4.1799255930551595 -30.34207265747232 46.96138899897883 -4.560830979075092 -2.037300454201386 -6.636917264210162 -31.139168637102987 -32.039442574482806 -2.571031553379001] :snapshot->code) (:snapshot-cutflip :code-extract :interval-tagstack :exec-in-set? -4659447N :string-setchar :scalar-return-pop :complexes-shove :scalar-modulo :log-empty? -47071/78358 35.48524716551282 #push.type.definitions.interval.Interval{:min -12, :max 49.14534259907303, :min-open? false, :max-open? false} :scalars-as-set [-25.67493702302818 -10.634283262496247 -41.34058106758345 26.079671391470626 -23.078113401835388 -48.11561362755212 -38.112089234592226 -9.960729540777194 19.16295150541275 -47.182101095888164 6.825121842506121 6.883685176573643 27.810936465249085 33.478909518418064 9.24943311099824 -9.63052376254435 20.217714411227973 1.2748148578387273 46.75282998878558] :x :chars-cutflip #push.type.definitions.complex.Complex{:re -23, :im -10/33} "!.\\x6A|ryy") :complexes-cutflip :intervals-rerunall -2131246N :chars-replace "k!]@3.hOUe" -2438640.210344797M)} :ref-yank -38.35772201634311 "sHl5>.s='{" :intervals-distinct :scalar<? -27.48048166559258 :scalar-equal? 2792534N -3.3387668203877796 :chars-swap :complex-as-set #push.type.definitions.complex.Complex{:re 26, :im 4/3} -2.404688991498455 :generator-flush :exec-storestack :boolean-cutflip #push.type.definitions.complex.Complex{:re 42, :im -15/31} :string-length :tagspace-liftstack -2.74200711071509 :intervals-byexample :generator-empty? :chars-equal? :char<? -3.8427023444837873 :exec-cutflip :set-notequal? \+ :booleans-in-set? 376/93 :string-store :string-pop :interval-rebracket :booleans-contains? :set-sampler :generator-rotate :strings-shatter 3747436N :boolean-dup #push.type.definitions.complex.Complex{:re -50, :im 3/8} :scalar-intoset #push.type.definitions.complex.Complex{:re 12, :im -41/5} -40.89603694332278 :scalars-in-set? 22.320244615188884 [-1.7843460615232374 42.71913339280661 0.16447532068624326 20.045466419162352 28.31325460620539 42.0566380846936 47.69151806360293 33.14377491013701 8.039726586725926 -37.7948807537542] #push.type.definitions.complex.Complex{:re 27, :im 17/78} #push.type.definitions.complex.Complex{:re -4, :im 48/71} 4 :refs-reverse 786998.0947817024M :scalars-filter :strings-empty? :set-intersection :chars-distinct :scalar-storestack :tagspace-rotate :complex-flush \^ :strings-contains? :scalar-arcsine :interval-intersection :vector-conj-set :generator-totalistic3 :t 31 :complexes-generalize :ref-savestack :refs-stackdepth #push.type.definitions.quoted.QuotedCode{:value ([-37 29 -2 20 -7 -38 -7 -1 23 6 -12 -25 -34 -35 -34 2 -42 7 10 -34] :complex-rerunall -38.64751071088715 :char-whitespace? -9846/55577 :booleans-portion -14384.123452032749 530/84063 [-30.171521925823107 -45.29497614557202 -31.026300757399618 35.69118349929015 -39.687842986594404 5.185964401827128 -1.0952274024165405 -10.050825803358023 -48.07905693851079 35.95462536760674 -0.2929457517162106 23.76512176849495 26.329621365947233 -31.85545638084588 11.365419520324302 25.27398086148608 45.86552566849295 -42.16865707263109 -36.143738620599976 -9.731765225355517] :intervals-items -5192/78417 #push.type.definitions.quoted.QuotedCode{:value (:boolean-print :scalars-new :scalar<? :scalars-new -19356 :b :booleans-swap :char-intoset :generator-dup "'x5mi6I[Om" :scalar-divide :error-empty? 3743912.4455310907M :scalars-notequal? :chars-return :char-flush #push.type.definitions.interval.Interval{:min -17.227884687001136, :max 35, :min-open? false, :max-open? false} :scalars-replacefirst [-8.719548888911277 -19.79853061627155 -37.37070405470182 -17.687734195567195 7.400114813881743 -38.26402518186044 33.61193288587211 25.553485718184504 -42.20761643433417 43.636654571914704 44.683628560423756 -15.309949726154514 -7.876821608109843 47.22278255702142 41.75445226489039 8.171420056117228 34.665949056454465 37.81797890084178 2.7853774082471574 36.04145534755918] :exec-swap)} [49.01741433827041 -19.62081788577098 -36.037065387037224 9.100521475293768 3.110252201775829 11.71152862917134 -27.35740708624895 20.94469996251091 -46.475947919860516 4.221940571078733 5.065687680492303 -18.031126430944887 10.682050722050121 13.12266339527617 -6.294822676563484 21.57384273147015 -45.61843156859816 -34.09313129158657 30.56585956722023 9.252857943766799] :exec-do*count :scalar->boolean :code-append :interval-rotate :string-take -21839/38444 :ref-conj-set)} :char-stackdepth :string-echoall "R?4zau5qc[" 16829/11567 :exec-noop :boolean-flipstack :interval-cutstack :chars-store #push.type.definitions.complex.Complex{:re -34, :im 9/47} -4.594013232454611 :scalars-remove \\ :booleans-generalize :string<? :vector-echo #push.type.definitions.interval.Interval{:min -2, :max 12.449383332474639, :min-open? false, :max-open? false} :scalars-shove :scalars-generalizeall -42407/90901 :complex-rotate "<Bon$SZ52v" :vector-flipstack -3149.166116561988 :intervals-vsplit (-2890123.1683884664M -3502919N (#push.type.definitions.complex.Complex{:re 41, :im -26/43} :scalar-tagstack [47 -18 -6 40 19 43 39 -22] :complex-stackdepth :string-notequal? -1297/3482 -1.74795703321325 :booleans-print) [-10 -6 -35 -23 -3 -46 41 -49 15] :complexes-againlater :exec-s :complexes-reverse :complexes-pop :string-cutstack) :scalar-echoall -4883468.512872708M 4 [19 5 3 38 -13 -38 48 -7 37 31] :generator-totalistic3 :vector-vremove -40 :scalar-flipstack 9.115893539652255 :snapshot-begin :code-conj-set :booleans-storestack :ref-in-set? :scalar>? 3193172N 3166938N :scalars-do*each :strings-conj-set :code-member? :booleans-build :exec-tag :complexes-set :set-againlater :char-echo :complex-echoall :set-save :refs-take -4583134.654493663M -17820/57413 :set-superset? :log-stackdepth :vector-build :vector-notequal? :scalar-floor :set->tagspace :complex-multiply 79/963 :complexes-distinct :char-rerunall :log-stackdepth :intervals-sampler :tagspace-valuevector "S8[8.@D>=!" :scalars-store :code->set :refs-byexample :code-subst :booleans->tagspace "3$%yIy$8UT" :tagspace-tagstack ((:complexes-conj-set -1 :strings-intoset :scalar-save :scalars-yankdup -37918 :generator-rerunall :refs-items) -4825508.437990637M :string≤? :vector-store #push.type.definitions.complex.Complex{:re -28, :im 35/92} -19 45 :chars-tagstack -2.6830669566349674) -3814/12625 :booleans-cyclevector :ref-fillvector [-35.83690437583137 11.106015629915802 -11.522562947558853 12.527660702321128 -2.331592155695539 -36.547030912928136 45.708639521992694 21.67957704713868 8.283642441253257 -9.09294427267261] :ref-swap -1.7711986042787977 -4550671.54216652M ((-3 -5 \+ :complexes-conj :scalars-generalizeall :log-stackdepth :complexes-do*each :string-max) :interval-empty? #push.type.definitions.quoted.QuotedCode{:value (:set-cycler :chars-generalizeall \R :push-bindingcount -14 :complex->set :code-contains? #push.type.definitions.interval.Interval{:min -36.19896431720887, :max 47, :min-open? false, :max-open? false} :exec-dup :vector-shatter :complexes-concat -29864 :vector-reverse [-12.482272985466778 16.362501459572968 1.1147210776513958 -29.272339996436514 19.10152880630058 -42.131762734636744 -16.440712843214676 42.69686196582602 -33.69004613937028 22.68033067430825 -15.95969481875371 46.407259542037025 -44.84933879490608 -12.124592414406962 -16.15073723247609 39.85411134068414 -36.18092133621032 27.138023577133907 26.572264748684532 21.773961887596514] :code-echoall :vector-build 1 [43 -33 12 33 -19 -15 -1 30 -32 44 45 -29 49 11 -10 28 -42 42 3 -17] 47499 4474394N)} 0.48741455786844057 :chars-distinct [-38 -10 -41 -29 15 17 -48 -48 -38] :char-whitespace? -14 29881/28386) 978793.8647888554M :exec-while :char-intoset :snapshot-pop \r 31749/8888 :snapshot-equal? [26.183397426506772 3.5730968313201004 10.028135102120075 4.81482574247466 45.48151875952938 -8.975192125703522 42.33381953915017 -23.414988810056858 -46.01479730048892 7.714836308712783] :boolean-yank :intervals-tagstack :interval-echo :code-do* [-25.140534903620125 -38.950413246327116 -9.88007192909425 -34.05989474607837 -24.874711717139252 -9.89938073921904 14.636234353228048 -26.58166299892686 23.538943754546864 -39.83757910261365] :exec-yank :chars-shatter :boolean-rerunall :set-return-pop -3921003N #push.type.definitions.interval.Interval{:min -33, :max -12.94092546665064, :min-open? false, :max-open? false} :vector-stackdepth :chars-sampler :scalar-echoall 2075/70998 :booleans-conj-set (-1.5612497550638702 :refs-dup :booleans-first -16.45621225747597 :chars-savestack :intervals-generalizeall :strings-pt-crossover :intervals-save "r\\)n%XqF|=") 2636192.5643408587M :strings-comprehension (#push.type.definitions.interval.Interval{:min 20.32305132350929, :max 43, :min-open? false, :max-open? false} -38683/30140 :scalar-infinite? 2802347N :refs-emptyitem? :complexes-return 2 26 :boolean-print) :boolean->string #push.type.definitions.quoted.QuotedCode{:value (:tagspace-new -1.5615255299973807 :scalar-ratio? :y :scalar-E 4 :interval-intersection :chars-shove :code-atom? :generator-yank :ref-ARGS :booleans-emptyitem? :boolean-arity3 :complex-liftstack :complex-rotate :scalars->code #push.type.definitions.quoted.QuotedCode{:value (:scalar-infinite? #push.type.definitions.quoted.QuotedCode{:value (:vector-length -16381 :vector-comprehension :string-yankdup :string-substring :chars-cutflip :intervals-flush 3 :refs-pop :u :boolean-later :generator-reset 3090 -20059 :vector-cutstack :char-swap 1 :tagspace-offset :interval-rerunall 14724.343819178954)} -40825 :set-flush :vector-pop :complexes-last :code-stackdepth :complexes-print :tagspace-againlater -36 :code-tagstack -43835/97313 22810 :code-equal? :code-equal? 4 350624N :string-rotate [-36 -5 46 -28 15 42 -41 -26 6 -12 -41 -31 -32 44 6 0 -10 -20 22 36] :exec-conj-set)} :booleans-save :string-print -18674/25899)} -39920.00254176864 :chars-intoset -1 #push.type.definitions.quoted.QuotedCode{:value (2 -37201/69666 :scalars-echo 3 :intervals-vremove :scalars-rerunall 3725691.809918845M -18139/8971 :booleans-emptyitem? [23 -44 26 -15 12 -21 -41 -24 -35 -24 -10 38 43 48 -47 42 38 42 -50 -18] #push.type.definitions.quoted.QuotedCode{:value (-0.5050613103294239 :chars-dup :interval-flipstack :interval-swap #push.type.definitions.interval.Interval{:min -38, :max 11.523448850691175, :min-open? false, :max-open? false} :strings-stackdepth :booleans-rest [-12.220836575056296 -3.0016674259408447 -37.27568286660363 31.47274758202056 33.52224821291372 44.90248884865608 32.02558067428282 28.78912328984144 -30.41712129430023 -35.44298404374122 -14.272536696932562 1.7079147274619544 -11.457490781718619 -37.35160643727002 -37.444191502177425 -26.574498571428627 -43.58070465093189 30.266188175205315 -28.014450383970146 48.410038025766994] 15203.401108631268 :complexes-nth -32095.99433175333 38.97466834402175 :booleans-in-set? :booleans-replacefirst -2.7767676901946614 :tagspace-dup :complex-zero :boolean->signedfloat :scalar-rerunall :booleans-build)} #push.type.definitions.interval.Interval{:min -43, :max -32.33193246710447, :min-open? false, :max-open? false} #push.type.definitions.interval.Interval{:min 19, :max 22.11697750062038, :min-open? false, :max-open? false} :chars-butlast :booleans-remove (:scalars-rest :vector-rest :scalar-subtract :scalar-return-pop :complexes-as-set :strings-take -45 -1430020.2516291626M 2.676685886685865 -2 :char-lowercase? :char-liftstack :exec-when :intervals-take 31.713554127431465 :string->set #push.type.definitions.interval.Interval{:min -37, :max -13.579964303451298, :min-open? false, :max-open? false} 13.86143663402121 34704.028586529326) ("xJ\"Od+y+v\"" -5 :generator-echo :strings-intoset :strings-vsplit :refs-store :generator->code :snapshot-savestack :strings-generalize :code-quote :interval-flipstack :refs-generalizeall (:char-rerunall 4850036N [14.863948077795825 -42.200182946411466 -40.07998932108179 -25.967777931933 44.28380619430975 46.19710881192745 -25.185369177339656 29.702823679436563 36.88343482361057 -24.513989392943138 -2.6791404251150865 18.326115466509734 5.384252381811827 45.18418804398742 -7.195025541085755 21.8575059282973 -30.14222480770873 -22.20353224075233] 38 :complex-multiply #push.type.definitions.interval.Interval{:min -41.487247358468714, :max 9, :min-open? false, :max-open? false} -48.01464354123183 3 19594/78117 :generator-cutstack :tagspace-new #push.type.definitions.interval.Interval{:min 26, :max 39.190021394854995, :min-open? false, :max-open? false} :scalars-do*each :intervals-nth #push.type.definitions.complex.Complex{:re -20, :im 41/27} (:scalar-tagstack "1Fx%,*[^]s" -1 -1687839.5508997366M :code-in-set? :interval-reciprocal :s :scalar>? 37.263786377909554 :intervals-later :tagspace-return :code-contains? :vector-pop #push.type.definitions.complex.Complex{:re 12, :im -12/73} #push.type.definitions.quoted.QuotedCode{:value (:ref-cutstack #push.type.definitions.quoted.QuotedCode{:value (-4325.793693077794 :tagspace-count :chars-nth :scalar-storestack "x#BdSWOH__" 4.2420583116230315 :exec-save :e #push.type.definitions.complex.Complex{:re -13, :im 11/16} :code-reduce :intervals-byexample :string-rerunall :print-empty? :strings-last :complex-parts :boolean-2bittable :strings-return-pop :scalar≥? -30821.688795331247 :tagspace-cutflip)} 35 #push.type.definitions.quoted.QuotedCode{:value (:chars-portion :char-echo :booleans-new :exec->set 33.43143437194988 :strings-flipstack :refs-replacefirst :string-removechar (:strings-generalize :tagspace-againlater :tagspace-liftstack :string>? :complexes-rest #push.type.definitions.interval.Interval{:min -34.41719842756282, :max 42, :min-open? false, :max-open? false} #push.type.definitions.interval.Interval{:min 0, :max 4.4414038900022135, :min-open? false, :max-open? false} :boolean-later :intervals-pop :tagspace-valuevector :intervals-generalizeall :generator-savestack :n :generator-tagstack :refs-cyclevector :set-notequal? :set-tag 32297.47521411699 4.175199343047268) "\"&(tO,-P\"V" :complexes-do*each :ref-fillvector :scalars-swap :complexes-liftstack :complexes-reverse -35433.4524030943 :char>? :code-swap :booleans-generalize 3583815N)} 28532.989358893305 :code-againlater :scalar-ln1p \, -29591.411455462923 :code-yank -2.220991634855868 "wA]s$OT\\wK" :scalars-butlast :booleans-yank #push.type.definitions.complex.Complex{:re 6, :im 47/43} -43932 \o #push.type.definitions.complex.Complex{:re -21, :im 9/28} :tagspace-pop #push.type.definitions.complex.Complex{:re -33, :im -24/71})} :intervals-conj :strings-yankdup) :scalar-round 13095) #push.type.definitions.interval.Interval{:min -46, :max -45.050888744285075, :min-open? false, :max-open? false} \r :scalars->tagspace :refs-build :scalar-yankdup :interval-cutflip) #push.type.definitions.interval.Interval{:min -22, :max 2.3638869143972627, :min-open? false, :max-open? false} :vector-rest :booleans->code)} \c :string->set #push.type.definitions.quoted.QuotedCode{:value (1840285.4415980186M 1.051214431401796 :x (-16518N :tagspace-liftstack :boolean-and :tagspace-stackdepth :set-subset? :interval-crossover 1.1000174378223084 :exec-when :char->integer :string-sampler -1219545.8505801093M "{=$\\/_l#Hb" :exec-do*count [-45 -36 -48 -31 8 6 7 -36 -18 1 40 -47 22 1 16 -36 -32 27 7] :code-quote :intervals-flush \z :refs-savestack :tagspace-print) :chars-shove :complex-print 2633964N :complexes-cutflip -2247883.5043031443M #push.type.definitions.interval.Interval{:min -13, :max -8.835557997099784, :min-open? false, :max-open? false} :string-stackdepth :string-comprehension :scalars-rest (:intervals-print :refs-storestack "\"_HPP]m^X^" :string-cycler [-31 -8 -46 2 17 23 -50 -25 -2 42 -8 29 -5 0 0 -26 -34 -45 13] :intervals-echo :code-notequal? :string-replacefirstchar :booleans->tagspace :vector-build 25594.131229488165 #push.type.definitions.quoted.QuotedCode{:value ([-22 12 -32 -3 -33 -22 3 -48 -34 -16 -50 -39 -40 24 38 -24 -1 -11 6 -11] -45.63140725903399 :complex-zero :complex-savestack 5 :chars->tagspace [-20.7770705338838 41.29848656820133 -11.18276842992001 -8.61196730607847 22.927535340290092 -18.22339747838473 -7.12400054974065 -41.49841637518694 -32.132454222803254 -15.613016590875581 -35.102650759165975 30.585729519040257 -41.96860691175536 -43.29608142542275 -7.086330931800042 29.352332410287957 -5.674528659551314 -16.13709568921513 42.73292075806741 49.01137607138665] (:set-intersection :chars-cycler :scalar-inc -2098367N :code-map :scalars-split :scalar-arccosine :boolean-echoall :string-substring 20435/16378 -1.377690138483211 :booleans-items "f|pMcjZaf[" :booleans-tag :string-tag (:scalar-conj-set -32814/14447 #push.type.definitions.quoted.QuotedCode{:value (:strings-tagstack :l -6744/44057 :scalar-bigdec? 14514 :exec-k :char-storestack -12403.389943665265 -2.1179118750246104 (:scalar-infinite? :exec-k :code-nth :intervals-in-set? :complexes-yank :scalars-occurrencesof "j/2/UR6hiH" -3467537.7219806295M -612148N :refs-items :interval-yank :vector-rest :intervals-print -39084 -4209607.496726828M :refs-indexof :set->code 3688 :scalar-ceiling) -75972N :string-splitonspaces \8 :strings-rotate :tagspace-rerunall #push.type.definitions.interval.Interval{:min -50, :max 47.504887361101666, :min-open? false, :max-open? false} :complex->code :refs-liftstack :g :exec-conj-set)} :z :char≥? #push.type.definitions.complex.Complex{:re -13, :im 2/83} :string-butlast 7777 :intervals-new #push.type.definitions.interval.Interval{:min -40.65565264715446, :max 39, :min-open? false, :max-open? false} :char-stackdepth :complex-zero :vector-dup :tagspace-save 16870 #push.type.definitions.complex.Complex{:re 16, :im 8/11} :refs-reverse :tagspace-liftstack) -10784.691265554677 :code-stackdepth 600) :ref-new #push.type.definitions.complex.Complex{:re 21, :im 33/49} [10.408676527563955 -9.614330662504535 1.6690641217380957 12.962948685483447 -0.19975252601641813 36.015459600557335 -23.59950110291731 8.398028760821973 10.799585680761723 -32.56627936630196 -33.87721401624225 -15.546373127626246 23.752802731184502 -49.84626548865233 14.63300538039256 1.4257756891737827 13.15067051586417 33.302438795654055 45.13645853973132 -10.003599340414524] -37401 43307 :booleans-byexample [3.8783170075706863 41.5245451010846 19.491161614768814 -38.00921625561845 23.85971894554288 24.45093621653335 19.808004664184566 -16.779101247645812 6.4015997066921955 38.136354245373866 -28.9942859246051 48.02052764550368 45.47757820983024 -28.528496206885844 -46.56477933191632 -14.37106310727546 6.904978958370144 8.632146186451742 24.926579331229348 -1.6338101928658801] :complex-liftstack :chars-distinct :complexes-storestack :complex-cutstack :intervals-pop)} :booleans-items [-35.9827100748613 11.251287647160154 17.166987125644667 9.782605893895592 4.21944771800851 38.62063547658032 -31.222264339951835 -15.067836876340337 11.647695587297022 0.03759844689474079 -39.6264964024745 25.865254980250086 -17.496104193300447 3.3364880235212198 -4.965553576042957 1.2958000384697286 -21.40969385878092 22.667288039984285 12.030763834981705] :ref-echo #push.type.definitions.complex.Complex{:re -30, :im 41/59} :refs-replacefirst :q -3695848N) ":rAyH-Dx/(" :q :vector-occurrencesof :char-lowercase? \e :refs-againlater)} -36627.64824616771 :interval-recenter :scalars-nth :scalar-float? #push.type.definitions.interval.Interval{:min -7.244372849816507, :max 14, :min-open? false, :max-open? false} :set-rotate \F :refs-occurrencesof :intervals-byexample -12466.556061754018 -5 :char-againlater 2.5592983418879456 :scalar-subtract :snapshot-savestack :generator-stepper :booleans-notequal? :complexes-stackdepth :exec-store 2209975N :ref-echoall #push.type.definitions.quoted.QuotedCode{:value (:interval-tagstack (-35.612144025844884 :refs-againlater :scalars-yank #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re 11, :im 35/29} :complexes-return 44675.03913633435 :chars-first :char-rotate :chars-sampler :chars-return :snapshot-end -10.509516281761108 :vector-flipstack :generator-againlater :intervals-contains? [-20 37 -39 38 29 -41 -47 30 10 -49 -30 8 25 -29 6 14 14 40 2 -28] :strings-flush :scalar-inc :tagspace-comprehension :string<? :scalars-return-pop :intervals-sampler #push.type.definitions.complex.Complex{:re -1, :im -45/92})} -56194N :complexes-againlater :complex-flush :intervals-rotate :scalars-store 3.4391590678796096 :generator-yank -0.9497463892070792 (:strings-length :generator->code :exec-tag [-2 37 -4 8 48 -18 -41 -31 43 24 -21 -3 21 26 10 -21 20 27] 951563.7731052358M :generator-stackdepth 0 :strings-generalize :generator-echo :refs-notequal? -1249285.4000778762M -15 2573/10135 :string-flush :strings-return-pop \M :complex-scale :refs-reverse) :booleans-cutstack :booleans-comprehension :intervals-cycler :strings-vfilter "Tu:/o_ZHeU" :complexes-set) :code-container :ref-fullquote :booleans-conj :snapshot-storestack -1 #push.type.definitions.quoted.QuotedCode{:value (\a "|yEcN44UQq" :ref-yankdup :boolean-tag :w -45208/18965 \S :scalar-later :ref-new -45189 :scalars-do*each :interval-flipstack :scalar-yankdup ":ff;E[C1Oz" -730361N :strings->tagspace :string-spacey? :generator-store :scalars-save :q)} #push.type.definitions.interval.Interval{:min -40.300402080443156, :max -26, :min-open? false, :max-open? false} :intervals-equal? "u/{?y3TUv_" :strings-cutstack :interval-yankdup [-25.084233090847697 21.32675402150548 19.03088138198916 49.11977810926487 -4.842499455398311 48.610602195976014 10.074828327463436 0.3368293606833248 2.6423676401922975 34.441869651437656 -6.747479148653525 -22.88659323719713 46.07751951750997 28.31603934059467 39.61873192227543 49.71021820418578 43.16329876520207 29.99234258741413 29.959638673728136 -9.631501247117505] :intervals-remove -3404393N "_&{Az1j6<l" -4 :booleans-return-pop \q)} :generator-jumpsome :boolean->set :ref-intoset :complexes-echoall 33.998274760918775 :vector-dup :strings-byexample :string-substring :char-max (:strings-echoall :string-print :l -31628/77805 :vector-length -1.6870533072363738 :refs-as-set [18 -17 -49 -38 -31 4 33 -20 -20] :strings-replacefirst) :vector-shatter #push.type.definitions.quoted.QuotedCode{:value (:interval-echo :interval-dup :vector-stackdepth :complexes-items :code-flush :booleans-tagstack :complexes-remove :interval-equal? #push.type.definitions.complex.Complex{:re -2, :im -24/5} :refs-yank -44637 :vector->code -4 :intervals-vremove :exec-savestack :string-againlater #push.type.definitions.interval.Interval{:min -4, :max 20.705581277609596, :min-open? false, :max-open? false} :strings-replace :tagspace-keyvector :set-rotate)} :booleans-do*each :complex-swap :booleans-echo "v@fnw,J&?5" #push.type.definitions.quoted.QuotedCode{:value (:tagspace-empty? -4084925N :vector-reverse [-30.97615833713111 16.637074509875333 -9.020444318777606 8.375705258826216 -39.320083601055956 -31.01667407075532 -17.266921882682126 14.505999447065804 -4.753624671026678 -20.368071713740164 -38.93516426441506 -3.4922695084142816 15.71222207940609 -7.425331373659105 14.186679425041717 -0.21428009807357284 -1.0362082969176711 43.65227330968082 -10.802047599110644 -32.60438601508221] :intervals-occurrencesof :vector-first :char-store :u :scalars-store :interval-later "v\"[f9!-uc)" :strings-comprehension :booleans-as-set :ref-fullquote (14216.96675291082 -44594 :scalars-emptyitem? #push.type.definitions.interval.Interval{:min -38, :max 48.82716200746535, :min-open? false, :max-open? false} -2888699N :tagspace-swap #push.type.definitions.quoted.QuotedCode{:value (:interval-add :refs-liftstack 32.6851267655687 :intervals-shatter :code-map :strings-items :tagspace-values :exec-empty? :refs-rest #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re 44, :im -28/3} -48533 :scalar->string :code-intoset -0.7506691248811883 \J :string->set :exec-comprehension #push.type.definitions.interval.Interval{:min 8.038807485078678, :max 34, :min-open? false, :max-open? false} :scalar-subtract :generator-cutflip #push.type.definitions.complex.Complex{:re -23, :im -1} :scalar-ratio? :scalars-echoall 5437 :booleans-build :chars->tagspace :intervals-echoall :set-conj-set :string<?)} :complexes-byexample :tagspace-swap :chars-rerunall :booleans-stackdepth :k :vector-storestack :strings-remove #push.type.definitions.complex.Complex{:re 0, :im -17/44} "r^97!=1^aM" :scalars-new)} :complex-intoset :vector-in-set? :error-stackdepth :generator-echo [37 37 -38 -25 -24 -3 29 47 -33 -36 28 33 27 6 -6 -39 -49 -11 43] :scalar-bigdec? -33297.21330341898 :intervals-swap 14608/24205 -46765.01604492824 [-9 33 -16 48 -16 28 -34 0 -33 -20 -24 43 21 -29 -41 -30 -17 17 -40] :push-storeARGS) -27 :scalar-storestack :complexes-last 2848413N -20035/51786)} :refs-cycler -2071473N :snapshot-yank :scalar-arcsine :scalars-rerunall :j :intervals-vremove 941/49546 -23871 :strings-fillvector :snapshot-empty? :intervals-cutstack [-30 -23 6 40 8 31 19 -36 31 -2] :booleans-rotate :complexes-build :scalar-π 43737.791881422 :boolean-conj-set :intervals-save :booleans-remove :intervals-indexof -5 :exec-flush :ref-dump-tagspace :set-flush :booleans-shove -13 :booleans-fillvector 39690.787765776215 [37 -35 21 5 6 49 -16 -12 -23 -46] "Kx\"86(CcY(" 6626/44133 :booleans-echoall :x :scalars-items [-42.73936831666596 31.6525714615196 29.812643366373123 -11.047575727345624 -15.326373933479566 -39.0666618937776 49.87215000990315 29.875481150628715 -15.368294852580263 -6.573984561206778] 8321/54851 \q :scalars-conj :scalars-nth :char-return :scalars-in-set? 40 :chars-pop 4457213N :scalar-pop :u #push.type.definitions.interval.Interval{:min -18.35435103906774, :max 46, :min-open? false, :max-open? false} :e :scalar-save [-12 9 37 10 -13 2 -31 48 -22 26] :strings-portion :chars-butlast -6.618415200963234 [27 -40 37 41 20 44 -16 -35 -10 -37]],

:bindings {:e ".Kd.v#??$_", :g :chars-distinct, :c :boolean-equal?, :j -41262, :h #push.type.definitions.complex.Complex{:re -12, :im 45/74}, :b :scalars-comprehension, :d :complex-conjugate, :f \h, :i :char-swap, :a #push.type.definitions.quoted.QuotedCode{:value (:complex-equal? :booleans-concat -371354.80622719973M #push.type.definitions.complex.Complex{:re 38, :im -38/49} :refs-new 4 :scalar-π #push.type.definitions.complex.Complex{:re -39, :im -19/12} :boolean-swap :scalar-min :complexes-byexample :z :snapshot-cutflip -29262.040018265023 4046331N :booleans-empty? :strings-vfilter -2173731.502508651M :scalar-min 26970/18653)}}}
