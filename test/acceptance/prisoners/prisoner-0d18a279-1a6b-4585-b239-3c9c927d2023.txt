{:error nil, :program [2718 19 :exec-pop 3.283809081169416 :chars-remove :push-bindingset :code-echoall #push.type.definitions.complex.Complex{:re -3, :im -1/10} #push.type.definitions.complex.Complex{:re -4, :im -5/2} :complexes-vremove :scalar-ln #push.type.definitions.complex.Complex{:re -4, :im 0} 14878N :exec-pop :complex-flipstack :t :char-store true :set-subset? :scalars-tagstack :boolean-empty? :intervals-concat :code-first #push.type.definitions.complex.Complex{:re 2, :im -5/3} :tagspace-lookupscalars :r #push.type.definitions.interval.Interval{:min -209, :max 314.4849440510907, :min-open? false, :max-open? false} :chars-rerunall :code-cutflip -2.946750221037812 :boolean->integer 2.8166682205863065 :generator-stepper :char-equal? -4 \7 :chars-concat (#push.type.definitions.complex.Complex{:re 5/2, :im 3/10} :interval-conj-set 40710.811491147935M :intervals-later :interval-max) :ref-tagstack :scalars-as-set :p :booleans-comprehension :interval-reflect :n 38735N :interval-print 38663.41805335482M :tagspace-values :boolean-flipstack :string-emptystring? -11.035768293098549 :complexes-echoall :scalar-min (:snapshot-empty? :refs-generalizeall \* -3793.474486468942 :tagspace-againlater :complex-empty?) :intervals-shove :tagspace-echoall [] :intervals-flipstack [41 1 -36 0 15 49 27 -42] :scalars-pop #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re -9/2, :im 1/8} false :complexes-cutstack 3/2)} :scalars-flush :code-savestack #push.type.definitions.quoted.QuotedCode{:value (:scalar≤?)} #push.type.definitions.interval.Interval{:min -45, :max 200.2124283088998, :min-open? false, :max-open? false} :vector-conj :a :scalar-ceiling :chars-generalize -3 :complexes-cyclevector :interval-storestack :strings-flipstack :chars-items :string-substring :intervals-notequal? :char-letter? :complexes-replace :exec-pop :vector-tag "ly^ckI<l37" :string-replace :chars-butlast :code-yank :intervals-replace :string-save "/S{c0v|;@H" :complexes-first :boolean->signedfloat :push-bindings -2.1627167971224703 :vector-refilterall :scalar-sine #push.type.definitions.interval.Interval{:min -50, :max 22.47648951537451, :min-open? false, :max-open? false} :vector->set [-36.10417586970214 -42.782906489386384] -38 :intervals->set :integer-uniform :tagspace-print :scalar-return :intervals-length :vector-reverse :snapshot-save :generator-rotate :interval-dup #push.type.definitions.complex.Complex{:re -4, :im 4/7} :scalar-store \k #push.type.definitions.interval.Interval{:min -497.1419315973954, :max -10, :min-open? false, :max-open? false} :ref-fillvector :strings-byexample :complex-multiply :complex->code :booleans-vremove :vector-liftstack :strings-equal? true 33.10073706715603 :boolean-faircoin :chars-build :string-tag 31441.961417192142M :scalar->asciichar :scalar-subtract :vector-save "$$6ZsD5t((" \| -1259N :interval-newopen #push.type.definitions.complex.Complex{:re 2, :im 1} \s \[ -253/823 :complexes-vfilter :ref-equal? :complex-shove :generator-cutstack -4.361892424231963 \S :chars-flipstack :scalar->boolean 15527N :chars-cutstack :scalars-conj -3.6156396122328447 #push.type.definitions.quoted.QuotedCode{:value (:exec-store :tagspace-filter #push.type.definitions.interval.Interval{:min -358, :max -29.89742678187696, :min-open? false, :max-open? false} :complex-conjugate)} :set-tag :tagspace-flipstack :scalars-vfilter #push.type.definitions.quoted.QuotedCode{:value (:tagspace-empty? :exec-flush -36/743 #push.type.definitions.complex.Complex{:re 3/2, :im 7/16} #push.type.definitions.quoted.QuotedCode{:value (2471.807116690051 162/707 :chars-distinct :chars-empty? :booleans-vfilter -37.722683065638506)} :complexes-conj)} :refs-pop :vector-return-pop -2262 :complex-tag :error-empty? -31.76925981405445 #push.type.definitions.quoted.QuotedCode{:value (6900.457701331827M 3.163866219411206)} #push.type.definitions.complex.Complex{:re -5, :im -3/7} 2049.6672302042316 33.636106052487776 -1.6982994023408295 :generator-cutflip :string-echo :scalars->set -29 :boolean-store :complexes-sampler [-41.76514966129097 22.82815367899613 11.720977585636419] :string-storestack 19498N 47 :vector-shatter :generator-rerunall :string-shatter [-32 37 -39 12 25 13] :char-cutflip :set-swap 4831.941897637998 -3.4686203008055108 :m #push.type.definitions.complex.Complex{:re 4, :im 1/2} :exec-store true :interval-empty? :string-take :tagspace-valuesplit :complex-cutstack :ref-clear :code-echoall (-9699.199075485354M -2180 -2.1395721461651496) (:strings-fillvector #push.type.definitions.quoted.QuotedCode{:value (:refs-build :char-rotate)} :refs-savestack () :chars-flipstack) :booleans-swap #push.type.definitions.quoted.QuotedCode{:value (:scalars-emptyitem? :scalar->char #push.type.definitions.quoted.QuotedCode{:value (:refs-byexample #push.type.definitions.interval.Interval{:min 65.86757149607882, :max 117, :min-open? false, :max-open? false} 1.4838171327161769 #push.type.definitions.complex.Complex{:re -4, :im 1/3} 24.353199810371905 :complexes-portion)} #push.type.definitions.quoted.QuotedCode{:value (-2533)} :boolean-cutstack :ref-peek [23 6 44 22 37 -34 -42])} "1:BD)0L|D_" :k :exec-comprehension :booleans-last :chars-indexof :string-replacefirstchar #push.type.definitions.interval.Interval{:min -15.859269210177331, :max 51, :min-open? false, :max-open? false} :complexes-save :chars-cutflip :chars-emptyitem? :code-dup :intervals-nth #push.type.definitions.complex.Complex{:re -4, :im 3/7} :string-return #push.type.definitions.interval.Interval{:min -134.7475381458849, :max 446, :min-open? false, :max-open? false} :boolean-againlater :code-cutstack :tagspace-storestack :code-list :set-return :scalar-infinite? [-14.033219438858666 -41.395859734204144 18.979689916103283 -11.91132059772034 -38.07005681410972 28.93435941954445 14.275606823321269 -14.847124467903136 -12.478290849923937] #push.type.definitions.quoted.QuotedCode{:value ((:string-as-set :generator-empty? :z -35282.87909440799M) :j :string-liftstack 10 :chars-generalize #push.type.definitions.quoted.QuotedCode{:value (:boolean->integer)})} :char-store :tagspace-yank :strings-later :chars-save (-2.249714873678341 #push.type.definitions.quoted.QuotedCode{:value (:booleans-tagstack :exec-equal?)} #push.type.definitions.quoted.QuotedCode{:value ([19.32006468429517 15.29800505602607 -28.468218022815144 -14.36495456171576 -31.93109813709901 23.33563116735428] -4)} :scalars-split :generator-swap) :generator-return-pop :scalar-dec :vector->code :generator->code 33872N #push.type.definitions.quoted.QuotedCode{:value (:refs-notequal?)} :string-replace -8996N :push-nthref \u :strings-save :code-return :exec-comprehension 3244 :snapshot-tag [-16.74166158685628 -14.994580790835158 4.5594322451764455 -21.385030290243577 39.3276218960892 13.790721992413033 -23.12288938390307 -48.70957155536689] :complexes-yankdup :vector-return -42735.30272552908M :code-in-set? :intervals-pt-crossover :vector-storestack :strings-vfilter :vector-fillvector [29 -20 13] :chars-againlater 30048N :interval-crossover :strings-flipstack :scalars-intoset :chars-return :refs-echo -33068.02758853389M :complexes-as-set \$ -45883N 479/92 :scalar-stackdepth #push.type.definitions.interval.Interval{:min 240, :max 354.8813209788792, :min-open? false, :max-open? false} 3214.008046436167M 1413.8265789855213 :interval-max -498/895 :exec-do*range #push.type.definitions.quoted.QuotedCode{:value (:scalars->tagspace :scalar-lots :scalars-rest :refs-savestack :string-butlast)} 2120 [5.739331685909974 -27.19839001690374] :booleans-in-set? :set->code :snapshot-liftstack :complex-save :boolean-3bittable -4 :intervals-vsplit 29 :intervals-storestack :ref-rotate :code-save #push.type.definitions.quoted.QuotedCode{:value ([32.00216214129259 4.4278743369431695 42.81299978145884 -5.027597881614916 -18.80376408682884] :chars-fillvector :scalars-pt-crossover true #push.type.definitions.complex.Complex{:re -9/2, :im 1/4} :complex-stackdepth :intervals->code :complexes-distinct)} :string-solid? :booleans-stackdepth -41/322 :complexes-save -39633.734444743284M :complexes-pop :string-cutstack :intervals->set (10647.879609641808M :string-replace) :ref->set :string≥? -0.5240154751598105 :string-concat [36 20] :intervals-rerunall :complexes-replacefirst #push.type.definitions.quoted.QuotedCode{:value (:complex-in-set? :ref-later -83/650 :generator-flipstack :string-removechar :boolean-rotate :booleans-yank)} [-37.37674236542428 -35.136516631914674 -49.483134189064245 16.788158317950632 -9.704758220636421 7.70395702706228 42.19660515413196 -14.258226894499273] :interval-shift 10 #push.type.definitions.interval.Interval{:min -318.19729579858233, :max 445, :min-open? false, :max-open? false} :vector-later :complexes-as-set (:tagspace-rotate :vector-return :tagspace-max) :snapshot-begin #push.type.definitions.complex.Complex{:re -4, :im -1/2} :complexes-tagstack [17 29] -1.606254128317235 :set-equal? 1 :code-cons :complex-print :scalars-vfilter :snapshot-equal? #push.type.definitions.complex.Complex{:re 4, :im -1} [27.208533498810453 12.815439277790318 -34.459684171372096 -3.13805488039025 35.6886757952653 -7.842687557743901] -16 :intervals-distinct :intervals-contains? 2043 :interval-echoall :intervals-remove 4.706945168450121 :chars-distinct :complexes-indexof 6/43 #push.type.definitions.quoted.QuotedCode{:value (:exec-if)} :ref-cyclevector [-2.103788521496753 15.664607862114337 44.61269305394052 -46.693305785842554 -29.513295007219554 5.079461903496544 30.79424386667185 -0.7096432023789703] #push.type.definitions.complex.Complex{:re -5, :im 0} :generator-rerunall :code-null? [31.28540932541381] :complexes-concat :push-storeARGS :interval-dup -4 :boolean-as-set :string-dup #push.type.definitions.quoted.QuotedCode{:value (:chars-liftstack :code-wrap (22370.392344113294M 20.32007677044139 :set-later [15 -18 -11 24 27 -8] :strings-take) -17486.49809437778M)} -42.79605245766325 :scalars-pt-crossover :exec-string-iterate 47176.75992315299M :vector-savestack #push.type.definitions.complex.Complex{:re 1, :im 1/3} 26611.292891817007M -42958N -12 :tagspace-storestack :tagspace-storestack #push.type.definitions.interval.Interval{:min -415, :max -174.94213327192, :min-open? false, :max-open? false} 20/9 -46.6644597404674 (\| #push.type.definitions.complex.Complex{:re 3/2, :im 3/10} #push.type.definitions.interval.Interval{:min -263.9291095543234, :max 92, :min-open? false, :max-open? false}) #push.type.definitions.quoted.QuotedCode{:value (:snapshot-save :scalars-remove)} :chars-vremove \M -2971 -1.6454146035482395 :chars-liftstack 3/2 2 :code-save :strings-yankdup 182.6807088340447 :interval-rotate :chars-take -203/388 #push.type.definitions.complex.Complex{:re -1, :im -1/6} [44.68463499266832 -39.92509676320287 22.282627255532915 -36.08083337950225 0.9654731711134588 -15.631299621543668] #push.type.definitions.interval.Interval{:min 381.61437103877586, :max 458, :min-open? false, :max-open? false} :k :scalars-yankdup :code-do* 437/739 :intervals-nth :interval->code -1485.0055289228558 :scalars-echoall 39895.8139383517M -3.2326320453773736 -3 :string-comprehension "CF^&x]>,;=" :scalar-rerunall false [-25 40 0 -33 44 29 -23 -25] :vector-pt-crossover :exec-tagstack 4 :intervals-length :strings-shove :ref-stackdepth :set-dup :booleans-pop :scalars-set "@X6Arxtotm" :scalars-cutstack :complex-flush :ref-conj-set :refs-concat 31336N :refs-pt-crossover 4484.775072778315 :set-rerunall :tagspace-comprehension #push.type.definitions.interval.Interval{:min -243.19301664333534, :max 361, :min-open? false, :max-open? false} 1924.338393886239M :scalar-some :strings-tagstack :refs-sampler :intervals-save :complexes->set :char-as-set 4543.054879220712 -1084.13253279414 3.2994255466107987 :char-as-set :string-liftstack 586.2055801254965 :exec-cycler "<&?7$rMUdZ" [-45 -46 -21 23 -23 -14 41 -9 3] "mwm?m2%>%M" -2565.2607942811956 #push.type.definitions.complex.Complex{:re 1, :im -5/6} :strings-do*each :string-shatter :intervals-butlast :set-subset? :exec-string-iterate :exec-as-set #push.type.definitions.quoted.QuotedCode{:value (:booleans-echo :chars-stackdepth)} 3103 :strings-dup :exec-do*times :interval-reflect :scalars-shatter :refs-new :refs-save :intervals-againlater -2417.3683309540097 -49289N :chars-fillvector :chars-fillvector :exec-print :vector-first ([24.45040126628483 -16.23405341984941 19.0941480907086 5.466455228871709 -26.762978191086553 32.521581630343576 33.24804362866486 24.61808529845372] :vector-yankdup :complexes-yankdup :snapshot-store :char-equal?) :log-empty? :scalar-dec 31720N -133/694 -27288N :t -1 19682.33965379001M -2423.0117194645086 -1.9700968375462713 [-48.87070433615618 -21.16649647813794 -25.10490319347507 -42.201348972098344 -2.248153939618682 -16.158415911622413] :ref-forget :b 34943.23604434547M -320/723 :vector-vremove :scalars-portion :scalars-filter :refs-cutflip :vector-fillvector :exec-sampler :chars-notequal? :exec-intoset false 0 :ref-lookup :complexes-reverse :refs-cutstack false false :chars-rotate :generator-tag 2237 #push.type.definitions.interval.Interval{:min -206, :max 148.6479941803998, :min-open? false, :max-open? false} :interval-store -21.76954672113538 :snapshot-savestack :code-noop :code-cycler :scalar-storestack :vector-build :interval-shift :set-storestack :exec-s :vector-concat :booleans-rerunall false :complexes-echo -33599.539257707365M :strings-pt-crossover :m -3750.312374220055 [37.22686246120843 47.4914595634754 -4.455143775933713 3.1130185341206627] -20246N :string-save :interval-hull :intervals-swap :char-yankdup 3 3321.2949775833713 #push.type.definitions.interval.Interval{:min -306, :max -43.75320919629996, :min-open? false, :max-open? false} 1703.2626622849302 :string-containschar? "6g^vpE|4:>" [1.180601301841456 29.718169699556668 13.78944919472412 -30.148848000704287 -45.14101370604381 -42.62718366669238 -36.958512725307884 -22.073630968054893] #push.type.definitions.interval.Interval{:min -114, :max 91.84158304836023, :min-open? false, :max-open? false} :exec-if :string-cycler :refs-pt-crossover :exec-cutflip :chars-conj-set :chars->code 3 :char-digit? :scalars-tag :set-savestack 20410.757367572005M 1617.184088899011 :code-reduce \V :complex-subtract :refs-save 2127 [-2 -13 12] :scalar->set :char-yank "1ud(`t)S4i" () (:char-storestack) () :chars-items 26555.667755560804M 2836.6156453300828 -31869.453799453262M :intervals-intoset :scalar->asciichar :string-empty? #push.type.definitions.quoted.QuotedCode{:value (false :booleans-stackdepth [])} :code-print #push.type.definitions.complex.Complex{:re 2, :im 0} #push.type.definitions.quoted.QuotedCode{:value (:booleans-emptyitem? [37.75272705533955 -41.70415119169967 5.051644633027344 -6.68662346426423 -10.224108194301948 -28.664948867690924] :booleans-echo -12623.124187132638M :complexes-savestack :chars-nth :exec-laterloop)} :vector-vfilter :complexes-shatter :boolean-againlater (true :vector-cutstack) [28.741153863662888 -27.829833864789833 -45.436265766747766 31.350358419412117 -0.5977672120927053 26.45837342199755] :code-dup :boolean-echoall :intervals-sampler 35699.646496063346M [19.732215688685386 -40.21245012007135 49.921761910242495 -39.629398896273585 5.928023106712388 -30.430310601810085 -20.7519131946763 23.205911651092677 -19.75342640291443] false :booleans-return :complex-shift :complexes-build :scalars-length "O3RYVE7I?$" 2 :scalars-return :boolean-yankdup :set-cycler :booleans-do*each :vector-do*each :vector-first :complex-empty? :h :ref->code [28 -44 -18] :refs-emptyitem? -22471.303860399596M #push.type.definitions.interval.Interval{:min -131.40114876365902, :max 469, :min-open? false, :max-open? false} :char-print :boolean-not :intervals-tagstack :tagspace-keys 1.1252710455011954 [-40 -34 -47 14 -37 12 -36 -10] :vector-savestack 16654N :vector-remove #push.type.definitions.quoted.QuotedCode{:value (:complexes-rest 7791N)} 1825 :generator-cutstack :chars-print :complexes-length -3.286953133191216 3780 :scalar-integer? ")3[tF&)60]" [28.25230300840971 30.14525537434892 45.47613819555836 -49.941278090447916 -12.301634880427656 -15.923686951361425 1.8586778797105552 -21.11360599098098 -22.697928846817618] :refs-empty? 36451N :intervals-save :code-wrap :chars-occurrencesof -45.358184683724666 :boolean-stackdepth :scalar-reciprocal [] "0@'o8(:\"Oi" 1407 :chars-cutstack (:scalars-nth :intervals-yank :complexes-dup :snapshot-save) :j -44825.9002704514M :intervals-reverse #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.quoted.QuotedCode{:value ()})} :code-length [] :scalars->set :scalar-rotate :string-in-set? -35511N -5120N :exec-stackdepth 2 :string-first false 824 :refs-vremove -57/433 :w \[ :string-substring #push.type.definitions.quoted.QuotedCode{:value ("(6\\H7k;DI" 8839.410368052013M)} #push.type.definitions.quoted.QuotedCode{:value (-2.5531794357036004 :set-dup :scalar-dup :scalar-complexify :intervals-sampler :complex-add)} 3.112433992711903 1756.1804177910135 \H :set-yank :vector-equal? () :scalar-storestack :refs-take (:boolean-dup 14919N :complexes-empty? :tagspace-cutstack 44.78383807930909 :exec-return-pop :intervals-flipstack) -47753.3961782201M #push.type.definitions.quoted.QuotedCode{:value (-2410)} :booleans-fillvector :strings-butlast [-24.43340884956623 34.09792887782346 -23.743860124686876] :exec-if :boolean-echo :chars-take -3.76256268061261 -4 :j :intervals-savestack :vector-equal? :booleans-againlater :exec-rerunall #push.type.definitions.quoted.QuotedCode{:value (\B :interval-shift (:chars-stackdepth [23.606383542371496 20.30564873623456 -4.72930331832962] \z :snapshot-flush) 1/2 :strings-remove)} :exec-return-pop :intervals-new :complex-tag :scalar-store :vector-replace :scalar-notequal? :chars-last :set->code :scalars-nth :boolean-faircoin :refs-do*each 4407 [-38.33831433675368 -35.9652286979409 -43.51236661010452 1.8258626924827297 17.2603339927427 -2.541797063182038] -461/250 :set-save :booleans-swap :vector-cutflip :snapshot-empty? :log-empty? :string-cutstack :complexes-generalizeall 39 [] :intervals-as-set :booleans-contains? :refs-return [-31.430105033170396 19.835613035337914 28.349464368735624 -32.676648760888206 40.199501942097854 27.424599669902094 1.6125995322375033 -28.174003980324148] 36845.183753498466M :tagspace-return :vector-cutflip :ref-yankdup :tagspace-store :scalar-arcsine :chars-flush :boolean-notequal? :vector-indexof -3793 :set-conj-set (:refs-reverse :tagspace-save "3;csbi}ZL" -1539.8716431998764 :scalars-swap) :complex-return :string-tagstack :intervals-last 27.41256533069705 :complex-dup [-35 8 -5 21 -6 47 -37] 0.20013057656012911 -35.108564538251926 :generator-savestack -48538.572281652756M :ref-forget :exec-intoset :a -3.5644488003823116 :chars-cycler 3 :set-swap -527N "\\^v3/>yB(^" 0.7693317247377234 [-49 -12 -39 -37 19 -10] -3562.03577204907 :refs-in-set? :chars-stackdepth "UXsfXL}2iq" [5.099829500339524 27.75648553093818 42.91197686477979] \g :strings-flipstack :exec-yankdup -2998.378380909543 [30.784100846963852 9.656676067970672 15.981587955218515 -31.577054484729516 -32.13344808564756 45.614108791771145 -32.61382112852446] :vector-as-set 2081N :boolean-empty? :push-bindingcount 47283N :scalar-π 48809.590763410684M #push.type.definitions.quoted.QuotedCode{:value (:scalars-items)} -4878 :complexes-first :complexes-storestack :intervals-cyclevector :generator-tagstack -44870N :interval-reflect :intervals-emptyitem? :intervals-tag :char-cutflip (:exec-dup 5/2 :scalars-split -26) :ref-conj-set :tagspace-echoall :complex-tagstack :scalars->set :vector-conj-set :tagspace-dup :boolean-3bittable #push.type.definitions.interval.Interval{:min 31, :max 199.80546408685336, :min-open? false, :max-open? false} :snapshot-storestack :scalar-cosine -26 20952.63358580653M :refs-stackdepth :refs-dup :interval-min :complexes-againlater 47.7236606120851 :chars-dup :snapshot-yankdup :code-insert true [-47 -49 4 -10 4 -38] :scalar-ln1p 17895N :code-tagstack #push.type.definitions.complex.Complex{:re 3, :im -1/3} :intervals-conj :code-comprehension #push.type.definitions.interval.Interval{:min -284.437212559415, :max 314, :min-open? false, :max-open? false} -351/904 :boolean-xor :complex-divide :refs-as-set :intervals-occurrencesof [27 28 44 -22 35] :intervals-portion :interval-shift "v57ysZ?{5Q" :complex-echoall :vector-distinct :complex-parts :set-tag \? :complexes-replace -4 :push-unquoterefs 1121 :scalar-store #push.type.definitions.complex.Complex{:re 0, :im 2/3} :complexes-vsplit :complexes-echo :generator-shove #push.type.definitions.quoted.QuotedCode{:value (:generator-again :vector-items (:intervals-portion :generator-swap) \e :tagspace-notequal? :complexes-print :vector-cutstack 3.400486123491329)} [-47.73958638404879 -1.453926003477477 -46.05295623888595 23.329762310065234 -27.43456409090256 32.97570934836453] :tagspace-valueremove :h 3200 "J#^+:Q<r/_" #push.type.definitions.interval.Interval{:min -162, :max -56.9820802222373, :min-open? false, :max-open? false} :complexes-in-set? [4.053598353314925 -15.689767153308999 24.513706161005842 22.094889640465126] #push.type.definitions.quoted.QuotedCode{:value (:strings-tag)} :vector-vfilter :integer-totalistic3 :booleans-replace :booleans-pt-crossover :refs-storestack [23.54828118031662 9.901014548322998 -48.25462897132861 -6.662712712914711 43.136892619532446 30.313632847282108 26.0576200540757 -16.69669007089093 -38.86020452349895] 15488N 9/10 :ref-return-pop #push.type.definitions.quoted.QuotedCode{:value (:vector-reverse :booleans-yankdup :scalar-abs)} :interval-add -45875N -3 :exec-comprehension :snapshot-empty? \N 1.6511342057188507 :complexes-intoset [-45 -6 24] [44.19671624091404 -31.271534782179657] -331/202 :ref-new :exec-later :vector-refilter :chars-tagstack :intervals-pt-crossover :complexes-storestack 4922.619875533337 -2395 -2674.8476356931305 false #push.type.definitions.complex.Complex{:re 1, :im -1/8} :complex-liftstack (:strings-do*each :exec-save :interval-pop #push.type.definitions.quoted.QuotedCode{:value (18250N 8.575436270321923 (#push.type.definitions.quoted.QuotedCode{:value (:scalars->code :strings-flipstack :complexes-tag #push.type.definitions.quoted.QuotedCode{:value (:scalarsign->boolean :scalar-echo 14684N [])})} -31.460963716463297 ":[Pk80F" -3365 -2.7765742706650656))} (:vector-vsplit)) \$ -4.68801065692526 #push.type.definitions.quoted.QuotedCode{:value (1/2 :set-notequal? :refs-fillvector :refs-intoset :chars-dup :booleans-equal? true :vector-echo)} true :generator-cutstack :code-drop :complex-notequal? #push.type.definitions.quoted.QuotedCode{:value (:scalars-equal? :complex-cutstack :boolean-return-pop)} 1818.637361330968 :interval-add () false :string-occurrencesofchar :scalars-remove :char-equal? :complex-in-set? :booleans-shatter :code-conj-set :scalars-later #push.type.definitions.interval.Interval{:min -154, :max 174.91775845098016, :min-open? false, :max-open? false} :chars-againlater :code-print :strings-later :refs-fillvector :booleans-dup :refs-tagstack :boolean-empty? :strings-emptyitem? 3 :scalar-ratio? :chars-distinct :string-savestack [-44 -24 28 25 12 34 -49] :generator-flipstack -1.7144173400696316 (#push.type.definitions.quoted.QuotedCode{:value (:scalar-complexify)} :refs-build :vector-contains?) :chars-indexof :booleans-items :x (32 :scalar-equal? :code-equal? :exec-savestack) true :interval-conj-set :refs-notequal? 1 :intervals-generalize :strings-replacefirst #push.type.definitions.interval.Interval{:min 73, :max 427.12344422470665, :min-open? false, :max-open? false} \^ :strings-replacefirst :scalar-arcsine :booleans-empty? -18742N :scalar-many :scalar-many :scalar-log10 9277.236611122731M :k :scalars-fillvector "xiz}jYKs6@" -29.919727879458158 :interval-shove :scalars-liftstack :code-size 4 :vector-rotate :vector-savestack :boolean-rotate :vector-emptyitem? :scalar-inc :scalar-ln #push.type.definitions.complex.Complex{:re -2, :im 0} :interval-min :code-equal? :exec->set :push-unquoterefs :strings-pt-crossover false :exec-flush :chars-cutflip [] :refs-cutflip :chars-generalizeall :set-flush "X]Gd;{yX|/" :string-reverse :complex-liftstack #push.type.definitions.complex.Complex{:re 4, :im 4/5} :scalar-in-set? #push.type.definitions.complex.Complex{:re -5, :im 2} :char-cutflip [-36.88784948859677 34.37321761788607 -8.260568440795538 18.170094450454684] :ref-rerunall 1.5577326256328128 -2 :complexes-save :booleans-shove 211/127 :chars-flush :scalar-π "jg)2KxvAeL" :strings-pop :complexes-indexof :ref-swap :interval-hull [38.9060602890067 34.17730904129867 -27.970266182908997 2.8525754143156945 -12.213600174343142 -2.1904813393729654 -17.795668184257863 -26.653360349044597 43.13267870376768] #push.type.definitions.complex.Complex{:re 1, :im 1/5} -22 -2 :complexes-vremove :strings-set 205/117 :boolean-notequal? :vector-flush :scalar-print false :scalars-conj-set :scalars-first 32 :log-empty? :intervals-storestack #push.type.definitions.quoted.QuotedCode{:value (3.0587525750678255 -13194N :tagspace-valuefilter :refs-againlater :refs-later :ref-tagstack :generator-counter -47/312)} 9807.511179745678M :intervals-rerunall #push.type.definitions.interval.Interval{:min -282, :max -46.09451953984336, :min-open? false, :max-open? false} :scalars-emptyitem? :strings-take :chars->code "k@C1nCLL_1" :intervals-rerunall :code->string :complexes-shatter false :char-equal? 16 :ref-return :chars-nth :code-liftstack 23/16 :refs-sampler :string-return-pop () 2 21115.0601521067M -7.569010803841557 -36588.12099106566M :code-pop :string->tagspace :tagspace-lookup 7/33 :refs-vremove :complexes-tagstack -19.274221685172378 :boolean-tagstack], :bindings {:OUTPUT nil, :e :complex-infinite?, :g :strings-fillvector, :c :complexes-rotate, :j :integer-uniform, :h :snapshot-againlater, :b :boolean-shove, :d :string-butlast, :f :set-subset?, :i (:strings-build :scalar-tangent :b #push.type.definitions.quoted.QuotedCode{:value ()} 37149N), :a :refs-length}}