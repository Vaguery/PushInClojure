{:error nil, :program [:scalars-remove :boolean-dup 218.55386849095612 -23.83218017318788 [6 41 45 -18] :interval-divide :scalar-min :string-echoall :string-cutflip -3056 -24.42018251410758 [-24 -26 -11 -13 -50 47 -10 -46 -16] :booleans-liftstack :vector-byexample [29 -39 39 37 -5 -18 29 -16] :set-comprehension :strings-return :booleans-in-set? :refs-new :b 1771.1382575441648 :scalar-dec #push.type.definitions.quoted.QuotedCode{:value (-4162 #push.type.definitions.interval.Interval{:min 109.61710852685644, :max 192, :min-open? false, :max-open? false} :booleans-rest :complexes-first [41 9] #push.type.definitions.interval.Interval{:min -373, :max 186.01668658154972, :min-open? false, :max-open? false} #push.type.definitions.quoted.QuotedCode{:value ()} :refs-indexof)} :intervals-indexof :chars-comprehension :h :boolean-flush :ref-tagstack #push.type.definitions.quoted.QuotedCode{:value ()} :vector-vfilter \_ false :ref-save :n \t :scalar->code #push.type.definitions.quoted.QuotedCode{:value (:code-extract :booleans-notequal? (:code-flush :refs-length) false)} -1853 false #push.type.definitions.quoted.QuotedCode{:value (#push.type.definitions.complex.Complex{:re 1/2, :im -5/6} :boolean-rerunall :refs-yank)} :code->string :scalars-portion :code-insert :vector-dup #push.type.definitions.quoted.QuotedCode{:value ()} :scalars-flush :code-shove :boolean-not 38 :set-yankdup -1.5956131203225086 -4.239249115952656 :string-first -479/924 :scalars-shatter :intervals-occurrencesof :code-save -41711N :scalars-generalize [-46 41 -41 -6 4] :interval-parts :generator-flush :code-do*times :refs-cycler :generator-reset :string-flipstack :interval-crossover #push.type.definitions.interval.Interval{:min 164, :max 165.646300122477, :min-open? false, :max-open? false} :ref-return :complex-rerunall 4145 :code-pop :string-replacefirstchar ([-14.25158401184461 13.67993144317385 -37.137108621804536 -0.8068368149709428 -33.877176770435184 31.58766051348755 -30.459215273191916 2.7026837589169617] :tagspace-later [-6.82236979071218 -33.95814747607547 14.221294810744986] :refs-yank 9) :tagspace-offset :generator-rotate :char-conj-set :scalar>? 3.032381048452441 :scalar-floor :refs-contains? -3121 :boolean-rotate :strings-concat :string-pop :refs-intoset "xb`+:m8Y{Y" #push.type.definitions.complex.Complex{:re 4, :im 1/3} :refs-as-set :chars-emptyitem? :string-replacefirstchar :booleans-store :char-lowercase? :string-tag true :vector-yankdup :a [42 37 46 -27 44 13 -17] [15.445639866050513 -25.539945106501015] :vector-first :interval-scale [40.94162433299972 7.672921861040507 -6.178337340438958 15.039465446774912 38.68096900516579] 34 :vector-vfilter 2149 -4466.59807474841 :string-rerunall :scalar-as-set :interval-add :string-rerunall false :complex-cutstack 13/34 :generator-flush :vector-items -6 :f :exec-noop :char>? :scalars-shatter #push.type.definitions.interval.Interval{:min 237, :max 407.8823338131101, :min-open? false, :max-open? false} :interval-union -39846.22355168793M :scalar-dec #push.type.definitions.quoted.QuotedCode{:value (:complexes-build #push.type.definitions.quoted.QuotedCode{:value (:set-store :tagspace-merge 1506 :complexes-intoset :interval-multiply)})} :scalars-echo :string-occurrencesofchar -9935N -15217N -32.78208094685725 :scalars-occurrencesof :intervals-new :string-nth 39.02641649428013 #push.type.definitions.interval.Interval{:min -90.25667128292412, :max 237, :min-open? false, :max-open? false} 1038.3033514012604 :scalar≤? :scalars-return-pop 41.873205916762686 :tagspace-later #push.type.definitions.quoted.QuotedCode{:value ()} :char-whitespace? 50/111 :refs->set :q :snapshot-yank "W.i:)Ajbl{" -4.856660892122835 :complexes-flipstack ":<^6*>CB$3" (:vector-shove -9/2) "R:NCb.A5P9" 23 (:scalars-do*each :interval-return-pop -9 :intervals-conj :string-butlast :string-indexofchar :complexes-equal?) :boolean-tag :chars->tagspace :vector-echoall :code-intoset #push.type.definitions.interval.Interval{:min -199, :max 396.67903047151026, :min-open? false, :max-open? false} 39 :string-indexofchar :strings-cutflip :complexes-conj-set :string-sampler false 167/750 :set->tagspace -3549.4771006991855 -33 [-26.237943144349675] :boolean->float :code-do*range -2594 :ref-echo :snapshot-tag :complexes-set :s :string-empty? 876N [-13 -42 -13 25 -1 -41 28] :scalar-min #push.type.definitions.complex.Complex{:re 3, :im 3/2} #push.type.definitions.interval.Interval{:min -132, :max -20.06102882221751, :min-open? false, :max-open? false} :strings-flush 1815 1 :boolean->code \` :boolean-pop :string-dup :snapshot-tagstack -3806 -1 :vector-swap [-41] :char-store \k :exec-conj-set :scalars-cutstack -4347N -1844 false :interval-include? :boolean-shove -2883.0524228849354 :refs-liftstack () #push.type.definitions.quoted.QuotedCode{:value (:char-intoset false -0.28577133506335173 :scalars-againlater :scalar-power "dq-DjWl-." -1327.688856877894 #push.type.definitions.complex.Complex{:re -3/2, :im -7/8})} :tagspace-sampler "gZ3S<KKhIX" :scalars-build :interval-cutflip #push.type.definitions.quoted.QuotedCode{:value (:intervals-swap :booleans-dup :strings-stackdepth #push.type.definitions.quoted.QuotedCode{:value (:chars->tagspace #push.type.definitions.complex.Complex{:re -4, :im -2/5} 3.2780532695079385 :i true :ref-tagstack :exec-dup)} :intervals-pop :generator-shove :interval-pop #push.type.definitions.quoted.QuotedCode{:value (:tagspace-lookupvector :boolean-stackdepth :char-tag :chars->tagspace :ref-new -29.84753310661568)})} :exec-save :tagspace-comprehension -527.2274316370031 44783N (:vector-shatter :booleans-conj false :booleans-generalizeall :strings-print :strings-stackdepth #push.type.definitions.quoted.QuotedCode{:value (:log-stackdepth :booleans-liftstack #push.type.definitions.complex.Complex{:re 2, :im -2} [-31] -33786N [-1.127777720397333 -20.66579359452443])}) 2 :tagspace-sampler :refs-pop :vector->code :refs-save -4797.809839692928 -49.37549874077013 :chars-take 49 :string-storestack :code-againlater 8247.557943737702M :integer-totalistic3 (:vector-pt-crossover :vector-store) :intervals-take :exec-stackdepth :intervals-rest :vector-new 0.6751750520556463 :u 4889 -47 :set-intersection :tagspace-keyvector 22/21 :ref-equal? #push.type.definitions.complex.Complex{:re -2, :im 1/2} 14 :booleans-replace :interval-tag :set-flush :complexes-cyclevector (:scalar-float? 3.977629239597082 :chars-do*each #push.type.definitions.quoted.QuotedCode{:value ([] :strings-vfilter 33 :booleans-butlast)} :string≤? :intervals-replace :interval-conj-set :scalars-storestack) :intervals-generalizeall :set-savestack -7169N :char-return :complexes-return #push.type.definitions.interval.Interval{:min -332, :max -329.9858468182231, :min-open? false, :max-open? false} :ref-lookup -3649 \G :complexes-later :tagspace-cycler :complexes-flush :string-flush -36310N [-31 42 29] :tagspace-empty? :code-equal? :push-nocycleARGS #push.type.definitions.quoted.QuotedCode{:value ()} (7/2 :interval-againlater #push.type.definitions.interval.Interval{:min 1.3678913242242743, :max 217, :min-open? false, :max-open? false} :vector-equal? 1/2) -41/441 :chars-pt-crossover :complexes-pop :complex-yank :chars-generalize :strings-items :char-flush [10.156486019979916] :string<? :complex-return-pop #push.type.definitions.complex.Complex{:re -5, :im -4/5} :strings-intoset [] 8553.040554247367M :string-conj-set 24.408283047554562 :complexes-concat :code-null? -33.65199197052053 -2 :tagspace-return-pop :char-lowercase? -24928.12249389408M :tagspace-yank :scalars-length :intervals-notequal? :set-empty? :strings->tagspace :booleans-replace #push.type.definitions.complex.Complex{:re 0, :im -3/5} :exec-pop :strings-in-set? #push.type.definitions.interval.Interval{:min -378, :max 131.18190029901996, :min-open? false, :max-open? false} 3556.8002620765965 \0 :intervals-rest [15 -18 21 -16] :complexes-vsplit -4.240829089818599 :string-store :boolean-intoset ((:complex-as-set \h :scalar-equal? :intervals-length #push.type.definitions.quoted.QuotedCode{:value (-20)}) :strings-cutstack :a [10 29 22 20 41 -2 -44] :interval-return-pop) :scalars-tagstack :interval-return-pop "[vTMv5?Kd4" :tagspace-keyvector -486/439 :refs-tag :chars-take :intervals-notequal? :refs-byexample :snapshot-tagstack :char-return :scalar-inc #push.type.definitions.quoted.QuotedCode{:value (14782N -6 [44.37113063253173 29.74604941311277] :vector-dup :ref-againlater)} :interval-shove 22069.082673492943M -0.5031419091401474 \o :complex-reciprocal :tagspace-rotate -0.7598437965657636 :char-save :scalars-echo \F 419/183 [1 -30 48] :interval-notequal? (#push.type.definitions.quoted.QuotedCode{:value (:scalar-cutstack :scalars-vremove :chars->tagspace 2936 :string-cutstack)} :char->integer true 42.882914663104 :strings-vfilter :refs-length) :scalars-concat :chars-butlast :strings-in-set? -407.5871436914276 [-49.77502889302758 41.093577039687375 2.364492101312898 11.776270333697994 -12.225706452070085 -43.85846048706669 -15.100807317991027] :refs-yankdup :boolean->integer 23004N :push-instructionset 47.410422572980025 :vector-last :vector-indexof :intervals-savestack #push.type.definitions.interval.Interval{:min -118, :max 47.32778649417787, :min-open? false, :max-open? false} [-30 -48 -1 2 24 -42 0 -18] true 11.291455356485415 :char-min :boolean-rerunall :chars-swap 28380.852746305187M "gS2u:mG32w" :boolean-savestack 3.318885443768556 :scalar-round 0 [2.1717315782063054 -36.99898108296772 46.426712363409024 4.505003438036546 35.34181287179315 -49.59712754248473 23.535284583656747 -26.86532289344099] #push.type.definitions.interval.Interval{:min -201.8651497912732, :max -188, :min-open? false, :max-open? false} 46.04755844328923 4562 :intervals-storestack :scalar-sqrt :strings-intoset -2596.9354074363628 :char-store :string-splitonspaces :scalars-items :refs-stackdepth :code-yank "y_77[}6^n[" :string-print :interval-stackdepth -38.58884237608628 :scalar-intoset :booleans-conj-set -2 1 :scalars-replacefirst :scalar-many :snapshot-pop :string≥? :char-lowercase? 4334 :tagspace-values :booleans-first :scalars-cutstack :interval-storestack :refs-notequal? :scalar<? -30 :ref-rotate 2 -177.14559470450604 :scalars-shove \d #push.type.definitions.complex.Complex{:re 0, :im 0} :generator-yankdup :intervals-reverse \) :snapshot-begin :scalar-add :vector-replace (\D) :strings-sampler 1086 :a :complexes-indexof [-21.04387899433462 -40.26588825442339 -31.939507682083878 -34.35673393431937 -38.850365899171464] :complexes-replace :exec-echoall #push.type.definitions.interval.Interval{:min -460, :max 84.69101283836028, :min-open? false, :max-open? false} :scalarsign->boolean :string-stackdepth :char-conj-set #push.type.definitions.quoted.QuotedCode{:value (:boolean-storestack 0.9523802534878314 :scalars-yank :scalars-fillvector 167/140 :refs-pt-crossover :snapshot-later)} -2326 :code-subst :push-bindings :refs-first :tagspace-print #push.type.definitions.complex.Complex{:re -1, :im -1/4} 44 :scalar-as-set true #push.type.definitions.complex.Complex{:re -2, :im -3/4} #push.type.definitions.complex.Complex{:re 1, :im 1/3} \1 35.90939513088625 2.4793315582537065 :strings-swap :scalar-dec :string<? :complex-equal? :refs-do*each #push.type.definitions.complex.Complex{:re -5, :im -1/9} :exec-tagstack :chars-items :ref-store :strings-generalizeall [2 30 31 -13] -2 [-38 16 26 6 13 43 8] "h1A;R#e4_Z" :chars-replace -218/219 :scalar-inc :string-concat :error-empty? :complexes-portion -7.2300312435941265 -31984.69000284503M :tagspace-store :refs-vsplit :strings->tagspace :interval-cutflip [-41 -41] :tagspace-savestack :set-store :scalars-savestack :chars-stackdepth -25948.715639815244M (#push.type.definitions.complex.Complex{:re 1/2, :im -7/8} :scalar-some 4390.589768776103 :vector-tag :x :generator-return-pop :intervals-contains?) :tagspace-notequal? :char-echoall -23027N :scalars-replace :exec-rerunall :exec-string-iterate :exec-againlater :complexes-flush -3 :error-empty? #push.type.definitions.quoted.QuotedCode{:value (:booleans-flipstack :complexes-empty?)} :refs-store :strings-yankdup #push.type.definitions.interval.Interval{:min -79.01834962578533, :max -5, :min-open? false, :max-open? false} :chars-dup :string-splitonspaces :scalars-as-set :vector-echo #push.type.definitions.interval.Interval{:min -306, :max 175.51100272761119, :min-open? false, :max-open? false} :generator-yankdup 0 [-7.275957003755593 -24.708165397348715 -30.252612807662505 -47.903715466551525 -31.736573518109513 -37.89993452672351 -41.6272736121082 37.15852384301927 -35.810646060383] :code-conj-set :tagspace-lookupvector -1026 [-28.977071352783913 11.885276852629758 -7.393312676159212 6.685582127662073 26.688248189139173 -34.801141959785475 33.9553817238113 -34.25516750089116] 2.440957073010691 0.07642075784191071 :booleans-cycler true :strings-equal? :scalars-filter :tagspace-lookupvector :w :ref-echo :refs-conj-set [42.41787122726704 -36.81562940951034 -3.497129736809157 -3.3959164181815424] :complexes-in-set? #push.type.definitions.complex.Complex{:re 4, :im 0} :intervals-conj-set [-18 48 -2 5] :vector-do*each #push.type.definitions.quoted.QuotedCode{:value (:string-rest :ref-dump :scalars-notequal? -268/813 :interval-liftstack [-22 34 10 -37 15 -44 28] :intervals-contains? #push.type.definitions.quoted.QuotedCode{:value ((:scalar->set :exec-comprehension) -3)})} #push.type.definitions.quoted.QuotedCode{:value (:chars-portion [] 2754.8028014677775 :scalar-multiply :y (:refs-byexample) -3935.8069310669553)} #push.type.definitions.interval.Interval{:min -204, :max 178.13065085890628, :min-open? false, :max-open? false} :interval-max :refs-shatter :tagspace-lookupscalars :refs-replace [-50 -48 -16 11 -20 34 -6 -14] 211/420 :scalar-arcsine :char-conj-set :refs-vfilter #push.type.definitions.interval.Interval{:min -268.698604791137, :max 52, :min-open? false, :max-open? false} :set->tagspace :vector-cutstack :refs-conj-set :tagspace-pop :vector-reverse :push-cycleARGS -2120 :char-swap :exec-do*count 3035.637203934569 :booleans-flipstack :vector-rest :complexes-echoall :q :strings-pop -35 :string-splitonspaces :interval-pop -21948N 2.5433643281392984 :snapshot->code -4.02062046833906 :chars-vremove 8.868319805834126 :boolean->set :exec-while 19.16787724413348 :boolean-yankdup :intervals-store :string-echoall "$QS*p,yK46" #push.type.definitions.quoted.QuotedCode{:value (:scalars-empty? :tagspace-max :complexes-conj-set :string≤? [-2.8938377522012004 5.755237274912929 13.98741005449591] :scalars-rotate -9/2)} :string-notequal? 4 :interval-equal? :boolean-3bittable :generator-yank :complex-empty? :generator-yank :char-liftstack [-2 -33 1 44 21 -34 2] -28 40 :set-empty? :strings-new [-36.06675591654823 -24.586027934533284 -35.78773631684334] #push.type.definitions.interval.Interval{:min 317.7260054706579, :max 454, :min-open? false, :max-open? false} #push.type.definitions.complex.Complex{:re -4, :im 0} 148/169 :vector-stackdepth :interval-crossover :ref-store -37.06746563634955 (:code-storestack :scalar-multiply :intervals-distinct :tagspace-flipstack :boolean-return :strings-cycler 2.0582549448871763) #push.type.definitions.interval.Interval{:min -176.7385783489924, :max -34, :min-open? false, :max-open? false} :string-spacey? :scalar-arcsine 37.504400156747735 :string-occurrencesofchar :snapshot-rotate "]bMt])525*" (\" #push.type.definitions.complex.Complex{:re -1/2, :im -7/6} :complexes-length :boolean-intoset 3609N \q :scalar->char :tagspace-values) :interval-reciprocal :intervals-cutstack [-23 1 -16 -9 38 30 39 26] :scalars-tag #push.type.definitions.quoted.QuotedCode{:value (-5/2 :refs-equal? :string-shatter)} :complexes-conj :tagspace-stackdepth :string-cutflip 175 :vector-intoset 33 :chars-tag :boolean-2bittable :chars-vfilter #push.type.definitions.complex.Complex{:re -1, :im 0} :j -26 \= \u #push.type.definitions.interval.Interval{:min -3.48615097975636, :max 400, :min-open? false, :max-open? false} :scalars-indexof -205/141 -42 :scalars-fillvector :boolean-faircoin :intervals-items -50/51 :code-map :string-cycler 1833 :code-save :vector-echoall :ref-conj-set :complexes->code :ref-shove 1.0752949207641116 () :boolean-echoall :intervals-cycler :exec-echo 1/104 :string->tagspace :interval-in-set? 24674N :strings-byexample :char->code :booleans-comprehension -39390.985461518925M :scalars-as-set :complex-divide :intervals-stackdepth :booleans-remove #push.type.definitions.interval.Interval{:min 175, :max 245.6515705329423, :min-open? false, :max-open? false} :interval-reciprocal :booleans-echoall :refs-againlater (:vector-contains? [31.796968879848095 -24.94524873694469 -37.34069708803553] [-43.257542052756165 -13.614728599759264]) 3 #push.type.definitions.interval.Interval{:min -472.12328958675323, :max -349, :min-open? false, :max-open? false} 35117.29350660539M :scalar-sine :interval-conj-set -32.350493725978055 :booleans-butlast 488/189 ")6C:k]]dU!" :vector-refilter :set-in-set? :strings-stackdepth :j :string-solid? :code-do*times "Y73\"MQmv{f" [10.490748164654505 15.107042767434024 -34.4955004070451 -9.760930368276831 36.16253854944161 41.91796683392127] :code-sampler #push.type.definitions.quoted.QuotedCode{:value (:intervals-later #push.type.definitions.interval.Interval{:min -372.94046312316357, :max 226, :min-open? false, :max-open? false} :string->code :char-flush)} -4930 -30579N :tagspace-lookup :push-bindingset :strings-length [-37 -23 -1 7 2 6 5 47] :string-replacefirst :complex-cutflip :strings-set :scalars-swap :intervals-first :scalar-subtract -25268.804519035482M :intervals-emptyitem? 127/332 :vector-distinct :char-tag :code-if :booleans-conj-set () 44584N :tagspace-savestack :vector-contains? 4592 :generator-againlater 1010 :set-intersection :complexes-length -40 :code-comprehension -25.007127234613147 :generator-cutflip :scalar-flush :char-whitespace? 1585 :vector-equal? \m :ref-equal? :complexes-portion 43/45 :set->code 449.8996169116217M :set-tag false :ref-rerunall :chars-concat [-18.88023080487844 -35.60729829600173 -28.08032140711365 -12.765858430461172 36.77002551491097 44.59843390089317 41.47781743583178] "=]We}j/-*v" [19 -46 -46] :exec-cutflip -3.7425223991821754 \1 :refs-portion true :m 30.011530863789588 :strings-print true :scalars-filter :interval->set :refs-do*each #push.type.definitions.quoted.QuotedCode{:value (140.84632837257232 :scalar-liftstack :generator-flipstack :refs-comprehension :z -1/2)} :complexes-savestack :char≥? :ref-rerunall 33 :boolean-arity3 :generator-liftstack :r 3072 33324.858106850224M :generator-empty? #push.type.definitions.interval.Interval{:min -348.5941759754898, :max -113, :min-open? false, :max-open? false} #push.type.definitions.quoted.QuotedCode{:value (:scalar-multiply :vector-dup :boolean-faircoin :boolean-rerunall :set-difference 44.50922977176448 :string-store)} -2.0888777809592405 #push.type.definitions.complex.Complex{:re 4, :im -2} :scalar-abs :chars-flush :complex-liftstack :booleans-reverse :string-take :scalar-log10 2 :strings-save :scalar>? :strings-pop :complexes-reverse :set->tagspace 1.82431345014178 8877.099642074572M :scalar-pop 11 :exec-againlater -4029 :intervals-replacefirst :refs-cutflip true #push.type.definitions.interval.Interval{:min -454, :max -79.51205526692837, :min-open? false, :max-open? false} \p :interval-savestack 1782 :string-in-set? :intervals-generalize "(&3RhWCmT7" :string-tagstack #push.type.definitions.complex.Complex{:re -1, :im -3/8} :booleans-swap 1.6650437441830546 :booleans-occurrencesof :code-do*times :complexes-emptyitem? :boolean->integer -2.970377803218881 #push.type.definitions.complex.Complex{:re -5, :im 2/9} (:char-in-set? 3571.8986543745123) :strings-later \k :string-flipstack #push.type.definitions.quoted.QuotedCode{:value (:char-return-pop :refs-last :interval-scale :chars-rerunall :complex-norm)} [-22 20 -21] :strings-in-set? :vector-fillvector #push.type.definitions.interval.Interval{:min -344.7803893032735, :max -113, :min-open? false, :max-open? false} 4.948957280700753 21.4969416352601 :intervals-fillvector #push.type.definitions.quoted.QuotedCode{:value (-3122 1.9317180372142486 :scalar-arccosine :generator-jumpsome (-2302 :strings-replacefirst :tagspace-flush :scalars-reverse #push.type.definitions.interval.Interval{:min -322, :max 66.6439613524642, :min-open? false, :max-open? false}) -5/2 "Y|ZCDybEd" :print-stackdepth)} [-24.472606481433434 -25.772294949764827 18.323184700093094 -6.424099491629697 49.6300930945402 31.90127700664027 -10.84112845719698 -24.69957245564932 -14.077864203208357] :refs-set 4392.433152012181 :intervals-generalize -297/566 :complexes-return-pop -20.052591713183542 :refs-concat [37.713993519158024 -48.94032297960229] :exec-store :snapshot-later :refs-sampler 2.9073674356802552 :vector-indexof :booleans-notequal? :chars-build true :refs-concat :complexes-vfilter -353/919 :scalar-tagstack [29 46] :refs-cutstack :scalars-first :snapshot-equal? :tagspace-return-pop :strings-replace 14337.988776454979M :scalar-swap :m #push.type.definitions.complex.Complex{:re -3, :im -3/8} :generator-yankdup -80/109 :ref-yankdup :boolean-againlater :ref-yank :refs-items :booleans-flush :complexes-nth :refs-as-set -37889.157909762114M true :scalars-distinct :vector-shatter -50 16.0662370384006 -944.0734029059859 :generator-tag :ref-stackdepth #push.type.definitions.complex.Complex{:re 2, :im 4/3} :strings-echo #push.type.definitions.interval.Interval{:min -383, :max 291.3166421974528, :min-open? false, :max-open? false} :boolean-xor :complexes-fillvector :ref-yank :tagspace-cycler :tagspace-valuefilter :complexes-print #push.type.definitions.complex.Complex{:re 0, :im 2/7} :strings-first #push.type.definitions.quoted.QuotedCode{:value (11002.408652436156M)} :intervals-shatter :vector-indexof :strings-return-pop -3111.534613527104 -18403.774695913955M -462 :chars-remove -5 -34120N :code-notequal? :intervals-storestack :vector-take -4306.037787246585 :generator-store 24.84866111574327 [27.649178776234223 38.07814601404547] -8 :chars-rerunall :scalars-as-set :char-intoset :set-later :booleans-last :set-echoall (:booleans-pt-crossover :chars-empty? \i 1761.8418012895963) false :booleans-do*each :boolean-save :refs-shove [44 -50 25 -25 -10 -45 -18 10] :ref-exchange :tagspace-valueset :chars-cyclevector false :set-yank false [49.67202494553895] :generator-store :booleans-echo :chars-storestack :t #push.type.definitions.interval.Interval{:min -374, :max -235.37558217287403, :min-open? false, :max-open? false} :complexes->set :code-subst -1274.0729536927233 -25 "R7Ab(B_9,0" :tagspace-valueremove :push-quoterefs (-9/2 443/584 :booleans-pt-crossover #push.type.definitions.quoted.QuotedCode{:value (\o "{7$6%HvP" -1 [] #push.type.definitions.quoted.QuotedCode{:value (:char->integer)} [7 5 29 -26] :complex-reciprocal)} :boolean-pop \o :refs-print) -4 :generator-yank :chars-notequal? :chars-last :code-storestack :snapshot->code :complex-yankdup 916.5768424456792 "\"|&pV[FX2W" :vector-comprehension :vector-sampler :snapshot-begin :scalar-yank -28.556268943371176 :exec-return-pop :vector-fillvector :char-liftstack :complexes-tag :scalars-store :ref-echo :tagspace-valueremove :vector-as-set 46820.7799481494M :booleans-length :snapshot-swap #push.type.definitions.quoted.QuotedCode{:value (:complexes-shatter :complex-return :complex-conj-set 2562)} :chars-flush :complexes-set :ref-tagstack 497/366 :tagspace-remove :string-sampler :code-liftstack :boolean-arity3 #push.type.definitions.interval.Interval{:min -176.56194252082133, :max 306, :min-open? false, :max-open? false} :complexes-return-pop :complex-storestack #push.type.definitions.quoted.QuotedCode{:value (-3.346751011963328 :interval-flush)} :code-contains? :generator-reset -497/60 :complexes-swap :vector-rest #push.type.definitions.interval.Interval{:min 57.74928699289478, :max 130, :min-open? false, :max-open? false} :refs-yankdup 4112.697334275403 -15/38 \^ :intervals-return-pop :intervals-shatter :scalars-tagstack :complex-infinite? 2.2668069657132426 :code-contains? false 44/241 :booleans-dup :string-contains? :string-rerunall #push.type.definitions.interval.Interval{:min -216.0425775958895, :max -173, :min-open? false, :max-open? false} #push.type.definitions.complex.Complex{:re -4, :im 1/10} 36063N :set-flipstack :boolean-print :generator-dup :scalar-arctangent -17510N :chars-fillvector "=OAm}(b%>c" \Q "5u6}SAtK3P" [5.801145159160249 -2.218171582926651 -20.21787832394907 -6.557800003922395 -43.05848609391294 -17.34994508000802 23.514327019928132 -39.43623571451068] :generator-rotate :print-newline :vector-in-set? :scalars-flipstack :complexes-savestack :refs-items :n false :generator-cutflip :strings-in-set? :scalar->string :tagspace-lookupscalars :string-tag 21731.829297007294M :strings-replace #push.type.definitions.quoted.QuotedCode{:value (:strings-in-set? :booleans-nth :chars-later :x -5 :generator-save :interval-save)} :string-as-set true [2.3880464722611734 -15.190224040749442 -47.28256845141794 40.479710380520444] -3.0967187514942127 34819.370884330914M :complexes-butlast :complex-rotate :string-setchar :booleans-cutstack #push.type.definitions.complex.Complex{:re -2, :im -1/3}], :bindings {:OUTPUT nil, :e :complex-infinite?, :g :strings-fillvector, :c :complexes-rotate, :j :integer-uniform, :h :snapshot-againlater, :b :boolean-shove, :d :string-butlast, :f :set-subset?, :i (:strings-build :scalar-tangent :b #push.type.definitions.quoted.QuotedCode{:value ()} 37149N), :a :refs-length}}