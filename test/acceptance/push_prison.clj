(ns acceptance.push-prison
  (:require [push.instructions.dsl :as dsl]
            [push.instructions.core :as instr]
            [push.type.core :as types]
            [push.util.stack-manipulation :as u]
            [push.util.code-wrangling :as fix]
            [clojure.string :as s])
  (:use midje.sweet)
  (:use [push.interpreter.core])
  (:use [push.interpreter.templates.one-with-everything])
  )


(defn overloaded-interpreter
  [prisoner]
  (-> (make-everything-interpreter :config {:step-limit 20000 :lenient true :max-collection-size 138072}
                                   :bindings (:bindings prisoner)
                                   :program (:program prisoner))
      reset-interpreter))



(defn check-on-prisoner
  [prisoner]
  (let [interpreter (overloaded-interpreter prisoner)]
    (try
      (do
        (println (str "\n\nrunning:" (pr-str (:program interpreter)) "\nwith inputs: " (pr-str (:bindings interpreter))))
        (loop [s interpreter]
          (if (is-done? s)
            (println "DONE")
            (recur (do 
              (println (str "\n>>> " (:counter s)
                            "\n items on :exec " (u/get-stack s :exec)
                            "\n>>> ATTEMPTING " (first (u/get-stack s :exec)) 
                            "\n items on :OUTPUT " (get-in s [:bindings :OUTPUT] '())
                            "\n items on :scalar " (u/get-stack s :scalar)
                            "\n items on :complexes " (mapv count (u/get-stack s :complexes))
                            "\n\n"
                            (pr-str (u/peek-at-stack s :log))
                            
                              ))
              (step s))))))
      (catch Exception e (do 
                            (println 
                              (str "caught exception: " 
                                    (.getMessage e)
                                     " running "
                                     (pr-str (:program interpreter)) "\n"
                                     (pr-str (:bindings interpreter))))
                            (throw (Exception. (.getMessage e))))))))

(def prisoners
  [
  
  {
    :program 

    '[[false false] #{[true true false false true false true true true] :strings-conj "·Î<Ç+" :chars-last :scalar->set :intervals-items :boolean-arity3 :f} 535009693 (:intervals-do*each #push.type.definitions.interval.Interval{:min 48/29, :max 177.87109375, :min-open? false, :max-open? false} \ :intervals-store 772992022) (["ÏÅZÍ8" "Ê¨" "j\"O% Î" "¤.NBC:¾©Dßºm^" "H±©¶Ò¸OÒ´·" "q Ô°(°O¯\"Û'f9»" "Ë:*«¾)Ì" "4Õ"] [false true true false] :strings-items #{:generator-return :chars-build :e 167/151 #push.type.definitions.complex.Complex{:re 20224708, :im 212.015625} false :string-as-set [4966 3257 2958 3786 4273]} :b) :snapshot-notequal? :chars-tag [\` \* \ß \¥ \o \\ \¯ \ \²] \e [false true] "[" [true true false true] (:booleans-flush [\ç] :scalar-cutstack :vector-intoset [false]) :f [1614 1942 1124 3999 1824] :intervals-items :j [true true false false] false ["*Á.yÒæ" "½ÜàÅ:\"n²o" "Ú·¢SJRÏL|¦!r/pK" ":I?.^Ìm)~6ËÌÓ,»¹" "KÀb¸yÓ½¯Á8ÎY,f Þ¥" "m2" "¦º=f«dË¡t³RÝ" "É^×CG§¢o®^aÊ@°\"¦°"] :char-cutflip :string->set :strings-vremove #push.type.definitions.interval.Interval{:min 82/195, :max 322.41015625, :min-open? true, :max-open? false} :complexes-distinct :vector-save 33/73 :booleans-replace ["ÁÞM" "pÈy¯¹<ÛIÕ" "¥ºÇºE" "DW£áa'}0h&Ú¹·UAä" "fÐjÕZ¿¾(§So" "?o½8=" "" "}9Y½(r¬·h"] 982721258M :code-atom? :complex-dup 118.01953125 :boolean-return-pop :complexes-yankdup 101/104 :exec-dup :code-flush [0.00390625] false [0.06640625 0.0703125 0.05078125 0.015625 0.015625 0.12890625 0.00390625 0.04296875 0.14453125] #{:scalars-concat #push.type.definitions.complex.Complex{:re 825749168, :im 137.82421875} :refs-later (:i :chars-dup [true true false] #push.type.definitions.complex.Complex{:re 760754705, :im 29.04296875} #push.type.definitions.complex.Complex{:re 428088730, :im 30.875}) [3879 1243] :scalar-round :i :complexes-intoset} "¦»<\"ÖE$[HLâ3ÄkÂ2~" [\ \9 \w \® \H \Ö \æ \Â \¬] 1760369 :tagspace-save 334221705M 819304938M :set-dup \À :interval-recenter [4790 3091 4660] #{\à #{212.890625 "4âÁ4¼¦" :boolean-yankdup :boolean-tagstack [\ \W \® \À \¿ \I \ \¢ \] [3707 4639 261 2406 1161 1552] :vector-later :exec-do*range} \§ :set-rerunall :snapshot-tag :code-drop :scalars-split \6} #push.type.definitions.complex.Complex{:re 486633963, :im 103.94140625} false :scalar-subtract #{#push.type.definitions.complex.Complex{:re 12673637, :im 114.9765625} \( [false true false true true] ["¥ÆeDSÌ`J!" "¹Î¤<Á" "¸7É¦¨8" "~¾S¦mujQ*jÝÆU)x&±x"] [0.1015625 0.1171875 0.0390625 0.1171875 0.07421875 0.0078125] :strings-shove :booleans-cutflip :scalars-liftstack} :vector-tag #push.type.definitions.complex.Complex{:re 542214238, :im 189.640625} :chars-generalizeall "E('u Úrj<¼aKÄà" \y :vector-empty? :booleans-sampler #push.type.definitions.complex.Complex{:re 79981608, :im 40.0859375} #{#push.type.definitions.interval.Interval{:min 142/45, :max 4.48828125, :min-open? false, :max-open? false} #push.type.definitions.complex.Complex{:re 613784537, :im 347.69140625} :booleans-do*each :vector-contains? :scalar-ln1p true :strings-remove :booleans-intoset} :generator-shove #push.type.definitions.interval.Interval{:min 85/29, :max 187.46875, :min-open? false, :max-open? false} [3807 2499 481 3403 4083] #{:char-shove :vector-replacefirst :refs-emptyitem? [0.12890625 0.0078125 0.01171875 0.015625] :vector-do*each :intervals-as-set :boolean-and :snapshot-stackdepth} :scalar-power [\ä \P \v \O] 198680104 (:snapshot-stackdepth #{:vector-swap (762193670 :strings-replacefirst 85/93 :chars-tagstack (:interval-return-pop #push.type.definitions.interval.Interval{:min 2, :max 131.84375, :min-open? true, :max-open? false} [\Ñ \ \´ \Ü \? \ \ \L] :d :tagspace-tidy)) #push.type.definitions.interval.Interval{:min 81/2, :max 268.234375, :min-open? false, :max-open? true} :set-swap #{:intervals-indexof :scalars-print 545275063M 178/185 #{(:scalar-E :snapshot-cutstack ["pc9ÓÐLr" "I5]`" "L$>@ " "gWÛ ²o'ßytgYykeBµ" "â`¶=@µ" "1Ä/×[¡4hpÂA@.ÔÄn"] :exec-if :complexes-occurrencesof) :vector-stackdepth :code-notequal? 304.83203125 :boolean-cutflip [1247] #push.type.definitions.complex.Complex{:re 731954376, :im 353.8984375} :scalar-print} (:intervals-emptyitem? :intervals-againlater (:tagspace-keyset #{160.08984375 :intervals-empty? :exec-do*while :scalars-items :generator-flush :strings-in-set? \¼ #push.type.definitions.complex.Complex{:re 511096465, :im 333.23828125}} 656334575M [false true true true true true] :refs-portion) false [\_ \e \P \Ú \X \~ \0]) :intervals-yank :complexes-concat} :exec-save [0.04296875 0.12109375 0.11328125 0.109375 0.1015625 0.0 0.125 0.1171875 0.109375] [4415]} #push.type.definitions.interval.Interval{:min 144/113, :max 277.4453125, :min-open? false, :max-open? true} :snapshot-notequal? (:scalars-fillvector :scalar-echo ([true false false true] :scalar-ceiling \ :scalar-yank :strings-flush) #{223.79296875 :string-sampler :booleans-items \* :scalars-echoall \´ :complexes-echoall :intervals->tagspace} #{:complexes-rotate 129.234375 #push.type.definitions.complex.Complex{:re 682658196, :im 277.140625} 760365485 :intervals-in-set? :scalar->char [false false] 676681471})) :booleans-store [\_ \/ \T \ \~ \Ö \½] [0.13671875 0.0 0.14453125 0.0859375 0.0390625 0.10546875 0.07421875 0.07421875] \´ [0.0234375 0.0234375 0.109375 0.1328125 0.0] :chars-tag :vector-pop #push.type.definitions.interval.Interval{:min 118/133, :max 74.3515625, :min-open? false, :max-open? true} :complex-in-set? :refs-sampler \ :exec-do*while #{["{yz»f+Ô" "µ-*ÈÙà" "£á©ÎÔPÃa0Ã" "K6BBÇ¼" "\\"] [] ["V`]|m<cÛ>g" "ªtcAZ" "ÄI´¶1m" "4Õ±¶¨s/¿qc^Cck"] :strings-rerunall #push.type.definitions.complex.Complex{:re 499492389, :im 137.734375} ["d.8!xldqpXÍº" "Å«vtÊD" "ã4¯kJ4Riá!X" "p·a" "*^¼¼ã]gG$µ'àÐ"] :scalars-conj-set :scalar-log10} :string-conj-set 290678796M :interval-add [\È \6 \¸ \Þ \Î \Ø \( \] [1446 2435] :strings-comprehension ["Mµ]Ù" "BF± {¼áÖÍÅÞFÙ¼ÚXi" "LÄ+eç[¾Î0" "MCÏS8{iÚwV¯ãâÕJÅ" "ÐÜ·Q" "©±VÓ9àÒ¤µ¹ºÔÈ:È~"] :complexes-echo :generator-tagstack :scalar-bigdec? :strings-savestack :strings-replace :intervals-return-pop "HGæ¦YmMÖ¿LØ0" [0.05859375] 149.9375 :code-wrap [1461 2744 4580 3859 1565] :intervals-occurrencesof :scalar-many :complexes-rerunall :complex-echoall [] 5/9 :char-print :generator-flipstack :tagspace-equal? [0.04296875 0.0625 0.0234375 0.0859375] :scalar-tangent :tagspace-notequal? #{327.9140625 :refs-do*each #push.type.definitions.complex.Complex{:re 654718042, :im 36.27734375} [] :code-quote [\ \¶ \Å \v \u \C] 108/193 :boolean-as-set} :booleans-do*each :code-shove ["Á3" "ts4g¥Ì¢b" "x»]°[ CScà«H¢¬" "" "É\\k{«[&;f" ":9D;Ï\"KÕ/%W­"] 566548754 :refs-empty? :chars-new :intervals-reverse [0.02734375 0.109375 0.14453125 0.06640625 0.12890625] false :scalars->code :refs-notequal? [2792 4459 833 2469 2859 1405 185 1616 3530] [4813] [60 4527 3696 860 3036 4187 2489 1716 1884] #push.type.definitions.complex.Complex{:re 78621335, :im 345.359375} :generator-echoall #{[\( \T \t \¶ \K] 194148078 :ref-dump #{:exec-do*count 509063718 :generator-return-pop :booleans-length 983024996 :e :complexes-echoall :complex-savestack} #push.type.definitions.complex.Complex{:re 649311170, :im 133.94921875} #push.type.definitions.complex.Complex{:re 684859321, :im 122.18359375} :refs-pop [0.0078125 0.015625 0.109375 0.04296875 0.09375 0.125 0.09765625]} :booleans-vsplit false [0.01171875 0.08984375 0.04296875 0.08984375 0.01953125 0.03125 0.05078125 0.13671875 0.08203125] ([] :chars-flipstack 77/17 :ref-print [0.05078125 0.00390625 0.01953125]) :refs-first :scalar->string :set-shove :tagspace-storestack #{653489725 #push.type.definitions.complex.Complex{:re 667935620, :im 51.9921875} "8" :boolean-shove :complexes-yank :h :char-savestack #push.type.definitions.complex.Complex{:re 96170417, :im 315.81640625}} [\ \ \ \Ö \³ \Ï \Ä \± \] :string-indexofchar #push.type.definitions.interval.Interval{:min 193/4, :max 324.89453125, :min-open? false, :max-open? true} 176.00390625 :boolean-2bittable #push.type.definitions.complex.Complex{:re 345590739, :im 118.4296875} :scalar-add :tagspace-swap #{["´£6gQ¢××ÐªuPGt«" "D»i¼»ßM¬" "KfsYÙ¬Ó" "Ýz)" "×ngRH12Í£_dÕ6YM}b°" "ÊL~.°L!sÚW`cÖ" "8Fã?T,hä Ååx+v" "Û$¨iKÏ"] [false false false false true false false false false] :refs-byexample 582326585 :d (:scalar-π 77/178 :interval-flush [3824 3306 1255 3455 1624] []) (:complex-storestack :string-flush [true true true false true] :i :scalars-indexof) :char>?} :refs-sampler #{174.16796875 :booleans-first :refs-reverse [false true true true true] (:tagspace-return 793517586 true :OUTPUT :j) :complexes-cyclevector " #ÆÞË¯i;®»7K0æH" [0.08984375 0.12109375]} :interval-flipstack 26/11 :strings-dup [1391 1301 2632] true true :e :e \ã [0.15234375 0.05078125] \¶ :refs-stackdepth :strings-generalize :refs-equal? :scalars-liftstack :booleans-stackdepth :code-wrap :complex-parts 197/190 :code-points [\T \² \ \¸ \[ \7 \3 \g] ";pJ^¨[Öª{M?°52S·" [0.078125 0.01171875 0.1328125 0.06640625 0.05078125 0.0859375] :strings-pop :j :strings-take (["Wà¡ #ÚS!ÅÛ¥+ß:" "!,fâTåMÏ¹°" "].Æ´X/­3¯" "QÛf1{A\""] :set-rerunall #push.type.definitions.interval.Interval{:min 22/15, :max 275.13671875, :min-open? true, :max-open? false} :strings-replacefirst :code-dup) :string-store [\-] [\å \/ \ \] 9903505M \ç :string->set true :j "0\\r1æª¥w'!Ö±|*TÆ*H" :string-dup :char≤? 766271484M "F/r`oµrJ[qsÙÐ" :push-cycleARGS :generator-echoall [2043 4879 312 2971] :c :g]



    :bindings 

    '{:OUTPUT (), :e (([false false false] :refs-replace :ref-yank :vector-savestack #push.type.definitions.complex.Complex{:re 228972268, :im 385.1484375} :snapshot-end #push.type.definitions.complex.Complex{:re 511298209, :im 257.953125} [\Î \D \· \¼ \V \" \h \~] [462 2093 2982 1202 1289])), :g ((#{:vector-items :code-contains? :exec-echo true [229 4125 547 4411] [0.1171875 0.03125 0.08984375 0.15234375 0.12109375] #push.type.definitions.interval.Interval{:min 1/47, :max 227.96484375, :min-open? true, :max-open? false} :complexes-save} false :generator-cutflip #{#push.type.definitions.interval.Interval{:min 3/2, :max 213.72265625, :min-open? true, :max-open? false} [\ \0] :scalar-ceiling [4984 3108 72 4883] 200107695M :boolean-not 718200068 :refs-replacefirst} #{171.7109375 :set-stackdepth :char-againlater :booleans-vfilter :tagspace-comprehension :intervals-conj-set :chars-generalize 173/82} [2213 2193 3411 3641 340 4456 4356 3917] :chars-flush #push.type.definitions.interval.Interval{:min 87/88, :max 227.296875, :min-open? false, :max-open? false} :vector-items [0.02734375 0.1015625 0.1171875 0.12109375 0.0390625 0.03125 0.06640625])), :c ((true #push.type.definitions.interval.Interval{:min 71/34, :max 195.75390625, :min-open? false, :max-open? false} :interval-parts :scalar-tangent 642069322M :intervals-as-set 52/73 :vector-intoset #{:set-return #push.type.definitions.complex.Complex{:re 110781262, :im 111.8359375} :tagspace-tag :vector-take :generator-shove false :vector-nth})), :j (([3177 213 2271 1994 3410 2857 1438 778] :refs-flush 809941734M #push.type.definitions.complex.Complex{:re 352704566, :im 113.75390625} #{\ \ :code-do*times :char-store [0.09765625 0.00390625 0.1328125] :complexes-savestack} :tagspace-valuevector :char-cutflip :booleans-nth #{47/15 695923996M [false false false false false false true false true] :boolean-tag :generator-shove :vector->set :interval-union [4946 4787 4734 3419]} [1312 2505 527 4670 1109])), :h ((:scalar-cosine \½ :refs-butlast [true false false true] :push-quoterefs [0.140625] "§+´Û-*ÆJ(Û?Ð[gÉÈ" :scalars-notequal? ["|F" "·«ÄÆn"] :exec-as-set)), :b ((:scalars-rotate 81.69921875 :set-sampler [\[ \s \$ \"] :interval-yankdup :chars-conj-set :intervals-concat :interval-overlap? 86/85)), :d ((#push.type.definitions.interval.Interval{:min 29/48, :max 8.85546875, :min-open? true, :max-open? false} :complexes-savestack 62960114 [\ß \] #{444789273M [] :tagspace-keys true :interval-stackdepth #push.type.definitions.complex.Complex{:re 709827596, :im 237.14453125} :interval-divide #{:vector-conj-set :ref-dump :boolean-store :code-extract [1265 4407 2421 1097 3539 4334] :scalars-echoall [318 3627 4064 961 3307 1014] [3494 2005 715]}} :refs-sampler :scalars-swap :generator-return-pop :boolean-as-set false)), :f ((:vector-refilter #{:complex-divide 69.65625 #push.type.definitions.interval.Interval{:min 88/111, :max 204.31640625, :min-open? false, :max-open? true} :scalars-reverse 366.58984375 ["¹µå×" "½" "!×A·EÀ~" " ¯¹­]" "¸'d" "å"] ["b¾Ý§­ÃÙÓÉ" "ci¦ÀÇH5Or!­¸£<å*x" "à$Ím¸¾â>q(©I4¥" "«" "ZÕç3ßOMËSw¡Ã½u?Ù§[" "dZÔ4±J¢½ÅD¿ÂM7+É" " l¹äJH|»Ö!ã£Ë"] :complexes-echoall} [] 159/127 :chars-build [true false true] 10/47 :strings-flipstack 191/16 960286346M)), :i ((\j :vector-flush :generator-later :scalar-equal? #push.type.definitions.complex.Complex{:re 104409, :im 328.74609375} [\Ø \z \4 \u \Ö] :scalar-divide :boolean-savestack #{:vector-in-set? #{\ã 231779852 :intervals-build :refs-cyclevector [2365 976] [0.03125 0.00390625 0.04296875] :code-tagstack "¾ä"} ["\\c;Å¢¥iÎÂ" "nÂÒ>" "Ò-@" "¼Àæ`Gv%ÙæÒI£9 HÑ" "[i¼6)LÄ9º6V" "}6«y¬;E0"] :intervals-notequal? (:ref-shove 68.68359375 :boolean-notequal? 157.9375 "ÏPCÈ\"+E5ß(qº,º|Ô") "oÉA¯*JNh" ["^]ÃN=Aq0lb" "·¡ª¨Ù«ÂÖx" "1¥=V¿Xªº©ç_!" "»iwHâJ@LÓHæH¥¬V;"]})), :a ((false :chars-tag 112/41 :strings-vremove (:complexes-generalize :vector-echoall :char-empty? ["Úß9H½"] [false true true false]) :ref-intoset false :scalars-equal? :ref-peek 695923709M))}


}

  ])


(fact "no exceptions are raised when I run any of these problematic programs"
  :debug :acceptance
  (map check-on-prisoner prisoners) =not=> (throws))

