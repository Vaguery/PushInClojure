(ns acceptance.push-prison
  (:use midje.sweet)
  (:require [push.instructions.dsl :as dsl])
  (:require [push.instructions.core :as instr])
  (:require [push.types.core :as types])
  (:require [push.util.stack-manipulation :as u])
  (:require [clojure.string :as s])
  (:use [push.interpreter.core])
  (:use [push.interpreter.templates.one-with-everything])
  )




(defn check-on-prisoner
  [prisoner]
  (let [interpreter (reset-interpreter 
                      (make-everything-interpreter :config {:step-limit 20000}
                        :inputs (:inputs prisoner)
                        :program (:program prisoner)))]
    (try
      (do
        (println (str "\n\nrunning:" (pr-str (:program interpreter)) "\nwith inputs: " (pr-str (:inputs interpreter))))
        (loop [s interpreter]
          (if (is-done? s)
            (println "DONE")
            (recur (do 
              (println (str (pr-str (u/peek-at-stack s :log))
                            ; "\n >> code: " (pr-str (u/peek-at-stack s :code))
                            ; " >> " (pr-str (map count (vals (:stacks s))))
                            ; " >> " (u/peek-at-stack s :booleans)
                              ))
              (step s))))))
      (catch Exception e (do 
                            (println 
                              (str "caught exception: " 
                                    (.getMessage e)
                                     " running "
                                     (pr-str (:program interpreter)) "\n"
                                     (pr-str (:inputs interpreter))))
                            (throw (Exception. (.getMessage e))))))))

(def prisoners
  [
    {:program [#demo.examples.plane_geometry.definitions.Point{:x 2.3924609375e2, :y 6.3505e4} :booleans-pop :chars-rotate :chars-yankdup :char-letter? :string-containschar? :booleans-rest :strings-print false :input!3 [2176] #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 3.1330078125e2, :y 7.85042059e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.038984375e2, :y 5.68891268e8}} :strings-length false :input!1 :char-flipstack [\ǀ \ണ \ၗ \ۘ] :point-oncircle? :vector-flipstack :string-rest :point-equal? :floats-return-pop :log-stackdepth 203187852 :char-yankdup [false true true true true true true true false] :booleans-last :integers-set :float<? [] :code-return-pop #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 1.390234375e1, :y 5.8535476e7}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.4921484375e2, :y 8.43843802e8}} 392259799 [0.015625 0.0 0.08203125 0.06640625 0.1328125 0.05078125 0.015625] #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 2.02875e2, :y 4.62069914e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.4234765625e2, :y 2.14403053e8}} :circle-tangent? :exec-return-pop '(:float-tangent :code-yank [0.12109375 0.109375] #{101.0234375 #{:line-print :floats-butlast :chars-replacefirst #demo.examples.plane_geometry.definitions.Point{:x 3.773359375e2, :y 8.53793559e8} false "ࠚྠ຤೅Ѕಷ" [0.01171875] [\ᆣ]} #{:input!2 :circle-return :booleans-equal? [] [false true false false false false true false false] "Ŭ࠘࠴୒ႼණலႵయߊٰ׫ታޑᅩøᎁԠˌྍ" :strings-concat ([false false true true true true true false true] #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 3.4718359375e2, :y 1.8164261e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 3.5681640625e2, :y 1.698584e6}} :chars-cutflip \ᆃ :set->code)} :integers-portion :floats-nth :vector-portion :strings-reverse :chars-first} :code-rest) :boolean-and :point-rotate :exec-return-pop :booleans-generalizeall :char->integer false #{:booleans-rotate [true false false true false true true false] :input!10 :boolean-shove 874873602 356.62109375 :input!5} :line-yank #demo.examples.plane_geometry.definitions.Point{:x 2.8302734375e2, :y 5.58161225e8} 271.46484375 :integers-swap :chars-emptyitem? :string-reverse \Ҝ 309283505 47.8984375 [856 1605 1592 1039 1246 1415 4579] '(:set-difference :code-first [true true true false true] ["೟"] #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.5533984375e2, :y 6.23071694e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 3.3975390625e2, :y 5.92287341e8}}) #{:code-flipstack :booleans-pop :floats-print :char-return-pop #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 3.385703125e2, :y 2.0680648e7}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 3.1887109375e2, :y 3.43556448e8}} :chars-replacefirst [0.1015625 0.09765625 0.1328125] :chars-yank} :integers-emptyitem? "ۓʳ܊Ϻੵ̓" :code-pop :chars-flipstack :strings-yank #{#demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.4113671875e2, :y 3.76358789e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 2.118203125e2, :y 8.32650927e8}} :integers-portion :floats-flush '(:string-shove :code-wrap :float-cosine #{:integers-indexof [0.0859375 0.015625 0.03515625 0.0390625 0.0390625] :chars-shove [] "঑" :string-take [\̬] :point-empty?} false) [0.03515625 0.0390625 0.1328125 0.01953125 0.109375 0.01953125 0.0234375 0.046875 0.03515625] :circle-rotate [4679 2547 1243 4746 1114 4320 4410 1385 604] [false false]} '([\ɛ \Ո] (:integer-swap 314.28125 :float-cutflip :string-reverse (:input!5 :string-spacey? ["ۛƯĿ༑˵໙" "Ը" "ߏൂӲ؍ޢ࠹ʶሰ҅" "घఋɗଢ଼ѢᇔĞᆆxດᅉሂᆟఖҩॐᆁ༠"] \Ĩ :booleans-take)) :input!5 #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 2.4552734375e2, :y 2.64441241e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.139453125e2, :y 8.49824552e8}} :vector-set) :string->code :string-contains? 91.0859375 :code-rotate :string-rotate 348.59375 [0.09765625 0.09375 0.02734375 0.14453125 0.1015625 0.02734375 0.03515625] :chars-rest :point-swap false :floats-indexof #{:char-lowercase? [\ \׊ \ቤ \༲ \ٹ \೦ \ਣ \Ⴆ \ൖ] 333015313 :integer-return #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.122578125e2, :y 6.77462292e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 2.10828125e2, :y 5.19822168e8}} :vector-set ["΁झҦࡧ3ڿڅૹĪठሹ࿙8ၦ۷೸ĬΛၗױ" "ǒ୲೘׃थੜ࿎௷" "ੂ؎װՍԓ൦"] :chars-generalize} true [0.046875 0.13671875 0.1484375 0.0234375 0.08984375 0.0859375 0.06640625 0.0234375 0.08984375] :vector-cutflip [2926 3193 1361 4130 314] :integers-flush :float-return-pop ["ƒڒ੤ਉ؜" "ࣳۺኩपLข෨Ӗɬ" "๰൯චጘຎ෌ϹԈሠ" "²࡙" "ቡ" "೩"] :vector-return \୛ [1962 4219 3967 1592] "ʢߛ$ჵൖҍԜौ͑ٮ୹щࣴ" :code-quote true :string-removechar #{:integer-multiply [0.1171875 0.04296875 0.01953125 0.0703125 0.08984375 0.0546875 0.0 0.0625 0.0703125] \ۉ [\ᆠ \ذ \Ԫ \፩ \Ȇ \ʰ \቞] ["ᇃᄾ" "၊ࣖ" "Ӷ່಩߯АĖ౗߯ࣃ"] :code-null? '(:vector->set \˙ #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 1.26421875e2, :y 8.11998861e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 4.8390625e1, :y 6.16665691e8}} [0.109375 0.0546875 0.0546875] 320.328125) '(:input!10 #demo.examples.plane_geometry.definitions.Point{:x 8.80390625e1, :y 4.94220308e8} #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.4108984375e2, :y 7.18001429e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 1.234453125e2, :y 9.67268322e8}} :integers-butlast (:float->char "лۼ෋ພኸ୩ސ" :line-equal? 899498611 #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.9734375e1, :y 5.14063155e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 8.923046875e1, :y 4.52139079e8}}))} [\ඣ \မ \ሢ \ܗ \ɪ \ዣ \ቍ \Ƥ \ඎ] :chars-fromexample [0.1015625] ["ྻվ๱֭ਊᅃЛቩ"] :vector-portion :boolean-yank [false true true true false false false] :code->set :floats-cutflip 57.13671875 '(:input!5 [1669 3802 161 507] [0.0234375 0.15234375 0.06640625 0.0 0.0625 0.09765625 0.02734375] :code-subst ["ొऋƏ࿑Ӓ" "ј͏ˬተҤ˃ࡷ౗ȗྔಔҷæౣໆᇬු૨" "¶ਪಗʒӉ฽֓љሮŜņ" "ডȿߖݏᆟӗ༁෿" "ᆰȋኼඎϺကാ૴ױ഻พڃሆฌ" "ɏΌ֜ཪх௹" "ԭᇫখᇮ" "गါ͏ྼ๱ؗ׹ঠ࣪ʹ" "෣ྑ৐(ݷ཈"]) #demo.examples.plane_geometry.definitions.Point{:x 1.5095703125e2, :y 2.0956437e7} \ຊ "ၙᅍ৺཮ራ૯઄г" :set-yankdup false :circle-coincide? :integers-first :integers-concat :set-yank [\૬ \ǫ \Հ \ԯ \ः] #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.6034375e2, :y 5.83533953e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 2.91515625e2, :y 1.4202578e8}} :integers-nth [] :line<-points :chars-flush '("4ॽ޳ಏ̉ି৚໌ೂǈݦৗ࡝๘ᇿ܂՛ଉౢୡ" :code-flipstack :line->points :char-equal? :code-rotate) 19708180 :integer->code '(:line-circle-intersect? :string<? false :integers-contains? #{[0.078125 0.01953125 0.10546875 0.11328125 0.0546875 0.08984375 0.0078125 0.109375 0.1171875] :floats-emptyitem? #demo.examples.plane_geometry.definitions.Point{:x 1.67421875e1, :y 3.06947284e8} :circle-nested? #demo.examples.plane_geometry.definitions.Point{:x 6.59921875e1, :y 7.40949592e8} [0.09375 0.12890625 0.12109375 0.0078125 0.04296875 0.0546875 0.08984375 0.109375] :circle-flush :floats-first}) :circle->code :exec-pop #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 1.6744921875e2, :y 7.8988435e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 2.37421875e2, :y 5.1279159e8}} [\༡ \ฃ] :vector-last [] :vector-return-pop :string-first :float-cosine :vector-last :input!8 [0.078125] '(#demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 1.61875e2, :y 1.49381174e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.2473828125e2, :y 2.7400129e7}} [\ \] #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 3.6318359375e2, :y 1.24706472e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 1.6649609375e2, :y 7.19859098e8}} #demo.examples.plane_geometry.definitions.Point{:x 1.06953125e1, :y 4.12369309e8} :code-yank) :char-flipstack :vector-portion :integers-emptyitem? :exec-do*range :print-empty? :string-take :error-empty? :integers-generalizeall :integer-yankdup [1617 174 4124 2885 2815 121 1871] "ୃരᄺ֘૏࠹૓௹еඇ࿛" 389.765625 :vector-refilter :integers-replacefirst :strings-cutflip :code-first :input!10 :line-notequal? #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 8.7734375, :y 3.75171367e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 9.467578125e1, :y 6.94394478e8}} :integer-swap ["ൊဎࠛ" "ઈ࿛ᅁৌ጖" "ጅ༹ᇙͩࠁᆢ" "ԅІҖއ๩௖" "ખނЋႲ੩ձ๙܍ǴืjƂׇ" "ǚʹझሡӉນ" "ٓગາ௭͹ܞႣح଎؃Ⴗ຀ཱིᅋ"] ["ගጱ༯АȘ͚ႍᄃଢ଼ޔ" "Ćыܧܴʧอഎዣყਸ਼ІႺݻዎ܆ښၙఴϤ΅" "ৌыȤ׃व኷ंೋာဥ" "ಁྟ"] #{'(#demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 2.1823046875e2, :y 7.8791431e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 1.9584765625e2, :y 7.31310439e8}} :floats-contains? :float-inc :input!6 :boolean->signedint) :booleans-first #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 7.71015625e1, :y 9.84528175e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 1.89359375e2, :y 6.29306209e8}} :integers-stackdepth :booleans-notequal? :char-stackdepth #demo.examples.plane_geometry.definitions.Point{:x 1.6260546875e2, :y 2.30386435e8} :exec-s} :integer-min '(:chars-return-pop ["ʬʽᄽ" "௮ޮ"] :circle-equal? :float-divide :input!4) [false true true] :chars-yank [] true :floats-contains? #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 5.7265625, :y 8.59341291e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 3.70546875e1, :y 2.45079528e8}} :exec-do*times :code-empty? ["ᆭ಑૖؅ተ" "జཤኤડᆎ࣭ርɠ௲౥ࣱ׌"] :string-min :input!7 [0.0078125 0.0390625 0.140625 0.125 0.15234375 0.10546875] \፬ :float-add :input!9 "௫Ε඼Лʪޖѽইᆨኺ੐ओᅓ" :code-do [] #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 2.7889453125e2, :y 5.19333104e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 3.81875e2, :y 9.65893341e8}} :strings-shove :input!2 :vector-swap :char->code ["ᇓ̀क़ᄽধӷˈˑࡹŠݶҫಇெዚ޾ԧ"] :vector-contains? :float->asciichar :point-dup :input!5 :chars-replacefirst :char->float :point-cutflip \ຈ \࡫ :booleans-flush :set-return-pop :exec-print :input!3 :strings-take :floats-replacefirst :set-cutflip #demo.examples.plane_geometry.definitions.Line{:p1 #demo.examples.plane_geometry.definitions.Point{:x 1.573125e2, :y 5.68995223e8}, :p2 #demo.examples.plane_geometry.definitions.Point{:x 4.9203125e1, :y 7.0951827e7}}]
  :inputs {:input!2 "ೢʔ଺ጮ۳౹", :input!9 :environment-new, :input!3 :strings-print, :input!10 :floats-generalizeall, :input!1 [0.125 0.12109375 0.05078125 0.01953125 0.07421875], :input!8 :string-flush, :input!4 :line-notequal?, :input!7 :code-first, :input!5 #demo.examples.plane_geometry.definitions.Circle{:origin #demo.examples.plane_geometry.definitions.Point{:x 3.603515625e1, :y 1.09481166e8}, :edgepoint #demo.examples.plane_geometry.definitions.Point{:x 2.1829296875e2, :y 6.4369211e8}}, :input!6 [false true true true false true]}
  }
])


(fact "no exceptions are raised when I run any of these problematic programs"
  :debug :acceptance
  (map check-on-prisoner prisoners) =not=> (throws))

